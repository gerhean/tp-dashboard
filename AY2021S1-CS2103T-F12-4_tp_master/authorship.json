[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## Lifebook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-4/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F12-4/tp)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![Ui](docs/images/LifebookHomescreen.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Introduction**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* Lifebook is a project developed for an introductory Software Engineering (SE) module (CS2103T) at the National University of Singapore."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Lifebook is a desktop application intended for University students to  manage contact details, assignments, projects, module details, etc."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It is evolved from AddressBook Level 3 (AB3)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* For the detailed user documentation of this project, see [here](https://ay2021s1-cs2103t-f12-4.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* For contributing to the ongoing development of the Lifebook, do check out the [Developer Guide](https://ay2021s1-cs2103t-f12-4.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "This project is developed from an se-education.org initiative. If you would like to contribute code to the initiative, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Libraries used: JavaFX, Jackson, JUnit5"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "kevnw": 4,
      "lerxcl": 19,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "You may reach us through the following email addresses:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Uriel Tan: urieltan@comp.nus.edu.sg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* Chua Chen Ler: chua.chenler@u.nus.edu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Kevin William: kevinwilliam@u.nus.edu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Lucia Tirta Gunawan: luciatirtag@u.nus.edu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Lin Yuan Xun, Caleb: caleblyx@u.nus.edu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Tan Hong Jie Uriel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/urieltan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](https://github.com/urieltan)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[portfolio](team/urieltan.md)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: About Us expert, Developer Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Chua Chen Ler"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/lerxcl.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/lerxcl)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "[[portfolio](team/lerxcl.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: Team Lead, Deliverables and deadlines, Scheduling and tracking"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Lin Yuan Xun, Caleb"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cimg src\u003d\"images/caleblyx.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/caleblyx)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[portfolio](team/caleblyx.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: User guide, Intellij expert, Merge conflict solver"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Lucia Tirta Gunawan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/luciatirta.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/luciatirta)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "[[portfolio](team/luciatirta.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: Testing, Ui Expert"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Kevin William"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/kevnw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/kevnw)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[[portfolio](team/kevnw.md)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: Integration, Code quality, Github Expert"
      }
    ],
    "authorContributionMap": {
      "urieltan": 16,
      "kevnw": 9,
      "luciatirta": 3,
      "lerxcl": 3,
      "caleblyx": 1,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![UpdatedUiClassDiagram](images/UpdatedUiClassDiagram.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `TaskListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "2. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "3. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "5. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete contact 1\")` API call."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![Interactions Inside the Logic Component for the `delete contact 1` Command](images/DeleteContactSequenceDiagram.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"edit event i/1 ...\")` API call."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![Interactions Inside the Logic Component for the `delete contact 1` Command](images/EditEventSequenceDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![UpdatedModelClassDiagram](images/UpdatedModelClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The Model,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* stores a UserPref object that represents the user’s preferences."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* stores the address book and TaskList data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* exposes an unmodifiable ObservableList\u003cPerson\u003e and an unmodifiable ObservableList\u003cTask\u003e. Both of these lists can be ‘observed’ i.e. the UI can be bound to these lists so that the UI automatically updates when the data in their respective lists change."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ":information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook` and `TaskList` , which both `Person` and `Task` references. This allows `AddressBook` amd `TaskList` to only require one `Tag` object per unique `Tag`, instead of each `Person` and `Task` needing their own `Tag` object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![BetterModelClassDiagram](images/UpdatedBetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "\u003cimg width\u003d\"500\" src\u003d\"images/storage/StorageClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "The `UserPrefsStorage` and `TaskListStorage` and `AddressBookStorage` defines the API for reading and saving the Model from and to the computer\u0027s memory. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* `UserPrefsStorage` keeps track of `UserPrefs`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* `TaskListStorage` keeps track of `Task` items in the `Model`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* `AddressBookStorage` keeps track of `Person` items in the `Model`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Storage is responsible for keeping the `UserPrefs`, `Task` and `Person` in JSON file format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "The following class diagram shows how `TaskListStorage` makes use of OOP to handle additional data such as Tags and Recurrence, as well as to differentiate between `Task` and `Event`. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "\u003cimg height\u003d\"500\" src\u003d\"images/storage/TaskListStorageClassDiagram.png\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "The `AddressBookStorage` class is much simpler and only makes use of `JsonAdaptedTag`, while `UserPrefsStorage` is even simpler and doesn\u0027t require it."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "These 2 sequence diagrams show a high level view of reading and saving the `Task` from the `LogicManager`. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "\u003cimg width\u003d\"500\" src\u003d\"images/storage/ReadTaskList.png\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "\u003cimg width\u003d\"500\" src\u003d\"images/storage/SaveTaskList.png\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "urieltan"
        },
        "content": "\u003cimg width\u003d\"500\" src\u003d\"images/storage/ReadFileActivityDiagram.png\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "The activity diagram gives a slightly deeper view of how reading `Task` is done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": "If the file parsing has issues, an exception will be thrown."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Add tasks (`todo` and `event`) feature"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskParserClassDiagram](images/addTask/AddTaskParserClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* `AddCommandParser` implements `Parser\u003cAddCommand\u003e`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* It parses the user input to determine if the user intends to add a `todo`, `event`, or `person`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* It parses the input after the prefixes required to create the intended `todo`, `event`, or `person`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* If the user input has all all required prefixes and matches the required syntax and format, it creates the new intended Task or `person` and passes it to its respective AddCommand constructor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskCommandClassDiagram](images/addTask/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The abstract class `AddCommand` extends `Command`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The concrete classes `AddTodoCommand` and `AddEventCommand` extends `AddCommand`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The command will be executed by the Model, which will update the FilteredTaskList based on the added task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* If it is successful, it will return a CommandResult with a successful message to the UI."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The following sequence diagrams displays a `Todo` being added to the TaskList after inputting the following command: `add todo desc/Complete homework date/12-12-2020 time/2359`. Adding an `Event` follows a similar sequence."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddSequenceDiagram](images/addTask/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The following sequence diagram exhibits the behavior of logic."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskSequenceDiagram](images/addTask/AddTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The following activity diagram shows what happens when the user enters an add task command:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskActivityDiagram](images/addTask/AddTaskActivityDiagram.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "#### How command works:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* An alternative approach would be to have a single `AddTaskCommand` which extends `AddCommand`. The `AddCommandParser` could pass either `todo` or `event` to this class\u0027 constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* This could reduce the replication of code, since both `AddTodoCommand` and `AddEventCommand` are almost identical."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* However, by having two distinct commands, different and more specific success or error messages can be produced by the execution of respective commands."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Edit tasks (`todo` and `event`) feature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![EditTaskParserClassDiagram](images/editTask/EditTaskParserClassDiagram.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `EditCommandParser` implements `Parser\u003cEditCommand\u003e`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* It parses the user input to determine if the user intends to add a `todo` or `event`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* It parses the input after the prefixes required to create the intended `todo` or `event`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* If the user input has all all required prefixes and matches the required syntax and format, it edits the new intended `Todo` or `Event` and passes it to its respective EditCommand constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![EditTaskCommandClassDiagram](images/editTask/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The abstract class `EditCommand` extends `Command`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The concrete classes `EditEventCommand`, `EditTodoCommand`, and `EditContactCommand` extends `EditCommand`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The command will be executed by the Model, which will update the FilteredTaskList based on the edited task."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* If it is successful, it will return a CommandResult with a successful message to the UI."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "---"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The following sequence diagrams displays an `Event` being edited to the TaskList. Editing a `Todo` follows a similar sequence."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![EditTaskSequenceDiagram](images/editTask/EditTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The following sequence diagram exhibits the behavior of logic."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![AddTaskSequenceDiagram](images/editTask/EditTaskSequence.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The following activity diagram shows what happens when the user enters an edit task command:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![AddTaskActivityDiagram](images/editTask/EditTaskActivityDiagram.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "#### How command works:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* An alternative approach would be to have a single `EditTaskCommand` which extends `EditCommand`. The `EditCommandParser` could pass either `todo` or `event` to this class\u0027 constructor."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* This could reduce the replication of code, since both `AddEventCommand` and `AddTodoCommand` are almost identical."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* However, by having two distinct commands, different and more specific success or error messages can be produced by the execution of respective commands."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Filter tasks (`dueAt` and `dueBefore`) feature"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![ParserClassDiagram](images/filterFunction/ParserClassDiagram.png)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueBeforeCommandParser` implements `Parser\u003cDueBeforeCommand\u003e`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It checks for the phrase `itemsDueBefore` and parses the input after the prefixes: date `date/` and time `time/`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * If the input are in the correct date and time format, a new DueBeforePredicate object is created and passed"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    to a new DueBeforeCommand constructor."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueAtCommandParser` implements `Parser\u003cDueAtCommand\u003e`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It checks for the phrase `itemsDueAt` and parses the content after the prefixes: date `date/` and time `time/`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * If the input are in the correct date and time format, a new DueAtPredicate object is created and passed to a new DueAtCommand constructor."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Predicate:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![PredicateClassDiagram](images/filterFunction/PredicateClassDiagram.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The way dueAt and dueBefore works is very similar, the difference only being the dueBefore and dueAt predicate."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "`DueBeforePredicate` and `DueAtPredicate` extends `DuePredicate`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueBeforePredicate` compares the LocalDateTime input and every task\u0027s LocalDateTime, and returns true if the task\u0027s LocalDateTime *is before* the input\u0027s LocalDateTime."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueAtPredicate` compares the LocalDateTime input and every task\u0027s LocalDateTime, and returns true if the task\u0027s LocalDateTime *equals* the input\u0027s LocalDateTime."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The class diagram"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![CommandClassDiagram](images/filterFunction/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueBeforeCommand` and `DueAtCommand` extends `Command`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* The command will be executed with the `Model`, which will update the `FilteredTaskList` based on the `DueAtPredicate`/`DueBeforePredicate`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* If it is successful, it will return a `CommandResult` with a successful message to the UI."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The following sequence diagram shows how the dueAt filtering works:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![FilterSequenceDiagram](images/filterFunction/FilterSequenceDiagram.png)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The following activity diagram shows what happens when the user enters the filter command:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![FilterActivityDiagram](images/filterFunction/FilterActivityDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Aspect: How dueAt and dueBefore executes"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "After implementing the task operations, there is `FilteredTaskList` which we can utilise to filter tasks."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "By using the same function, we can prevent duplication of code."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Furthermore, we have adhered a similar design to the task\u0027s operations (Using of Command, Parser classes) to maintain code consistency."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Add link to tasks (`link meeting` and `link doc`) feature"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![ParserClassDiagram](images/linkFunction/ParserClassDiagram.png)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `LinkCommandParser` implements `Parser\u003cLinkCommand\u003e`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It checks for the phrase `link meeting` for LinkMeetingCommand and parses the input"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    after the prefixes: desc `desc/`, url `url/`, index `i/`, date `date/DD-MM-YYYY`, and time `time/HHmm`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It checks for the phrase `link doc` for LinkCollaborativeCommand and parses the input"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    after the prefixes: desc `desc/`, url `url/`, and index `i/`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * If the inputs are all in the correct format, a new Link object is created and added to an existing task."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kevnw"
        },
        "content": " The class diagram"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![CommandClassDiagram](images/linkFunction/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kevnw"
        },
        "content": "-----"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The following sequence diagram shows how the LinkCommand works:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `LinkCollaborativeCommand` and `LinkMeetingCommand` extends `Command`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The command will be parsed by `AddressBookParser` and further parsed by `LinkCommandParser`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The `LinkCommandParser` will determine whether the command is a `LinkMeetingCommand` or a `LinkCollaborativeCommand`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* After returning the suitable Link Command, the command will be executed, calling the `setTask()` method of `Model`,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevnw"
        },
        "content": "which will update the `TaskList`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* After updating the task, the `LogicManager` will call `saveLifeBook()` method of `Storage` class to store the update."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* If all are successful, `LinkCommand` will return a `CommandResult` with a successful message to the UI."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![FilterSequenceDiagram](images/linkFunction/LinkSequenceDiagram.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The following activity diagram shows what happens when the user enters the link command:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![FilterActivityDiagram](images/linkFunction/LinkActivityDiagram.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Find (`find contact`, `find todo`, and `find event`) feature"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#### Parser:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![ParserClassDiagram](images/findFunction/FindCommandParserClassDiagram.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `FindCommandParser` implements `Parser\u003cFindCommand\u003e`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * It checks for the phrase `find contact` for FindContactCommand and parses the input"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    after the prefixes: `n/` and `t/`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * It checks for the phrase `find event` for FindEventCommand and parses the input"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    after the prefixes: `desc/` and `t/`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * It checks for the phrase `find todo` for FindTodoCommand and parses the input"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    after the prefixes: `desc/` and `t/`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * If the input is correct, a new Predicate object is created and passed to a new FindCommand constructor."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### Predicate:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![PredicateClassDiagram](images/findFunction/ContactMatchesFindKeywordPredicate.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![PredicateClassDiagram](images/findFunction/TaskMatchesFindKeywordPredicate.png)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The way these predicate works is very similar, where the `ContactMatchesFindKeywordPredicate` handles the Person object"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "and the `TaskMatchesFindKeywordPredicate` handles the Task object."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "`ContactMatchesFindKeywordPredicate` implements `Predicate\u003cPerson\u003e`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "`TaskMatchesFindKeywordPredicate` implements `Predicate\u003cTask\u003e`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `ContactMatchesFindKeywordPredicate` returns true if the person\u0027s name contains one of the name keyword given AND one of the tag matches the given tag keyword."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `TaskMatchesFindKeywordPredicate` returns true if the task\u0027s(event or todo) description contains one of the description keyword given AND one of the tag matches the given tag keyword."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only name or description prefix and keyword are given, the predicates return true if the person\u0027s name or task\u0027s description contain one of the keyword given."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only tag prefix and keyword are given, the predicates return true if one of the person\u0027s or task\u0027s tag(s) matches the keyword given."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " The class diagram"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![CommandClassDiagram](images/findFunction/FindCommandClassDiagram.png)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "-----"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The sequence diagram:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `FindContactCommand`, `FindEventCommand` and `FindTodoCommand` extends `FindCommand`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The command will be parsed by `AddressBookParser` and further parsed by `FindCommandParser`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The `FindCommandParser` will determine whether the command is a `FindContactCommand`, `FindEventCommand` or a `FindTodoCommand`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* After returning the suitable FindCommand, the command will be executed,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "calling the `updateFiltertedPersonList()` method of `Model` and update the `AddressBook` if it is a `FindContactCommand`, or"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "the `updateFiltertedTaskList()` method of `Model` and update the `TaskList` if it is a `FindEventCommand` or `FindTodoCommand`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* After updating the model, the `LogicManager` will call the storage to save the file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* If all are successful, `FindCommand` will return a `CommandResult` with a successful message to the UI."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The following sequence diagram shows how the `FindContactCommand` works."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The sequence diagrams for `FindEventCommand` and `FindTodoCommand` are very similar to the diagram below"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "with minor differences in the type of FindCommand returned and function called to update the model."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![FilterSequenceDiagram](images/findFunction/FindCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![SaveFileDiagram](images/findFunction/SaveLifebook.png)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The following activity diagram shows what happens when the user enters the find contact command:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![FilterActivityDiagram](images/findFunction/FindCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The activity diagram when user enters the find event or find todo command is similar to the diagram above."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Common Tag feature `contactTaskTag`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![ParserClassDiagram](images/contactTaskTag/ParserClassDiagram.png)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `ContactTaskTagParser` implements `Parser\u003cContactTaskTagCommand\u003e`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Upon calling `contactTaskTagParser`, the static classes from `contactTaskTagCommand`: `editEditPersonTags` and `EditTaskTags` will be invoked."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "If the person and task index are valid, and there is at least 1 tag given, it returns a new `ContactTaskTagCommand`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![CommandClassDiagram](images/contactTaskTag/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `ContactTaskTagCommand` extends `Command`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "When the `ContactTaskTagCommand` is being executed, it will retrieve the respective `Person` and `Task`, and update the `Tag` field for both"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "with the common tag(s) input."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Then, it will update the `FilteredPersonList` and `FilteredTaskList` to reflect the new changes for the `Person` and `Task` in the GUI."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The following sequence diagram shows how the `contactTaskTag` works:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![SequenceDiagram](images/contactTaskTag/contactTaskTagSequenceDiagram.png)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Full command : \"contactTaskTag t/CS2103T contactIndex/1 taskIndex/1\"** (Due to space constraints in the sequence diagram)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "_Note: The details to of the `Storage` model is being omitted, as it is the same procedure as adding a new contact/task._"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Here is an activity diagram which shows the possible scenerios when the user inputs the command:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![ActivityDiagram](images/contactTaskTag/contactTaskTagActivityDiagram.png)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Making use of the `Tag` class is useful in this case, as this will prevent duplication of code, and reduce the chance of bugs."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Students can keep track of tasks from all modules they take efficiently."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Manage contacts faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Increase school productivity."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* An all in one app that makes student\u0027s life easier."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user                                       | add a new person               |                                                                        |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | forgetful student                          | add todos and events        | remember to complete important tasks for projects and  attend important events|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kevnw"
        },
        "content": "| `* * *`  | user                                       | edit a task             |   easily change wrong or outdated information                                                                     |"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | forgetful student                          | remove todos and events        | remove tasks that I no longer need |"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | user                                       | find a person by name or tag          | locate details of persons without having to go through the entire list |"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | user                                       | find todos by description or tag        | locate details of todos without having to go through the entire list |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | user                                       | find events by description or tag         | locate details of events without having to go through the entire list |"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | student                                    | mark todos and events as done  | remember the tasks or assignments that I have completed          |"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* *`    | disorganised student                       | add and remove collaborative links (Google Drive, and many more) to a todo   | find the collaborative link for the project easily |"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* *`      | disorganised student                       | add, remove, and view zoom links for meetings to an event         | remember my Zoom Links                                      |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kevnw"
        },
        "content": "| `* *`    | forgetful/disorganised student | search what tasks/meetings are due soon or by a specific date/time (filter) | remember to finish before the deadline|"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "| `* *`    | forgetful/disorganised student | see what tasks are due soon | finish up the most urgent tasks first |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "| `* *`    | disorganised student |sort contacts alphabetically | have a more organised contact list to locate contact details more easily|"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "| `* *`    | disorganised student |sort tasks according to order of imminence | have a more organised task list to select tasks that are most imminent|"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "| `* *`    | disorganised student |filter the task list to display all tasks, todos, or events | have a complete or more focused view of my Task List |"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kevnw"
        },
        "content": "| `*`      | user with many contacts in the Lifebook | sort persons by name           | locate a person easily                                                 |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "| `*`      | student with weekly lectures and tutorials | add recurring tasks         | save time by not adding the same task every week, which is time-consuming|"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "| `*`      | student                                  | have a common tag for my contact and task | easily find the person I am working with in a project |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "(For all use cases below, the **System** is the `Lifebook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "#### Contact list use cases"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC1 Delete a person**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "2.  Lifebook shows a list of persons"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "4.  Lifebook deletes the person"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC2 Adjust sorting of tasks**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. User requests to apply/remove sorting on a displayed lists of contacts."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "2. Lifebook acknowledges by adjusting the sorting on the displayed list of contacts according to the option selected by the user."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 2a. The displayed list of contacts is empty."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 2a1. Lifebook removes all filtering from the list and returns a list sorted according to the option selected by the user."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 2b. The list of contacts is empty (i.e no items were added to the list to be sorted)."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 2b1. Lifebook displays an error message to prompt the user to add contacts to the list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "#### TaskList use cases"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC3 Add a Task to the TaskList**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1. User requests to add a Task and its details (i.e. description, dates, and times) to the TaskList."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2. Lifebook acknowledges the request by adding the To Do to the To Do list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 1a. User inputs the dates or times of the Task in the incorrect format."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 1a1. Lifebook shows an error message"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Use case restarts at step 1."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 1b. User chooses to input the task as a recurring one"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 1b1. Lifebook will add the task as a recurring one instead."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Use case: UC4 Perform an action (delete or mark as done) on a Task from the Tasklist**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1.  User requests for list of all Tasks."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2.  Lifebook shows the requested list of Tasks."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "3.  User requests to perform an action on a specific Task from the list"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "4.  Lifebook performs action on the Task."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3b. The given action does not exist."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * 3b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3c. The user marks a recurring task as done."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 3c1. Lifebook will automatically add a new task with the same details, with a new deadline given by the _recurrence_."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC5 Find contacts by name and/or tag**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2.  Lifebook shows a list of persons"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "3.  User requests to find all persons by name and/or tag"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "4.  Lifebook displays all the persons who match the searched keywords"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3a. Both the given name and tag is empty."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3b. The given name or tag is invalid."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * 3b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC6 Find todos by description and/or tag**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1.  User requests to list todos"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2.  Lifebook shows a list of todos"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "3.  User requests to find all todos by description and/or tag"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "4.  Lifebook displays all the todos that match the searched keywords"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3a. Both the given description and tag is empty."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3b. The given description or tag is invalid."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 3b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC7 Find events by description and/or tag**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1.  User requests to list events"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2.  Lifebook shows a list of events"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "3.  User requests to find all events by description and/or tag"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "4.  Lifebook displays all the events that match the searched keywords"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3a. Both the given description and tag is empty."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3b. The given description or tag is invalid."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 3b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC8 Filter items due on a specific date/time**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1.  User requests to filter items due by/before a specified date/time"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "2.  Lifebook shows a list of items that fulfil the requirement."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 1b. The given date/time format is invalid."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 1b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Use case restarts at step 1."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC9 Adjust sorting of tasks**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. User requests to apply/remove sorting on a displayed lists of tasks."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2. LifeBook acknowledges by adjusting the sorting on the displayed list of tasks according to the option selected by the user."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 2a. The displayed list of tasks is empty."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 2a1. Lifebook removes all filtering from the list and returns a list sorted according to the option selected by the user."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 2b. The list of tasks is empty (i.e no items were added to the list to be sorted)."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 2b1. Lifebook displays an error message to prompt the user to add tasks to the list."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC10 Add or remove a collaborative link**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "kevnw"
        },
        "content": "1. User requests a task to be given a link (GitHub Repo, Google Drive, etc)."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "kevnw"
        },
        "content": "2. Lifebook acknowledges the request by showing the requested task."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kevnw"
        },
        "content": "3. User requests to bind the link with the task."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "kevnw"
        },
        "content": "4. Lifebook performs action on the task."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 3a. The task already has a link."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * 3a1. Lifebook requests permission to override the existing link."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "urieltan"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC11 Store and retrieve a meeting link**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "urieltan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "urieltan"
        },
        "content": "1. User requests a task to be given a meeting link (Teams, Zoom, etc)."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "urieltan"
        },
        "content": "2. Lifebook acknowledges the request by attaching a link to the task."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "urieltan"
        },
        "content": "3. User later requests to view meeting links associated with the task."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "urieltan"
        },
        "content": "4. Lifebook shows the links associated with the task."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "urieltan"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "urieltan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "urieltan"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 3a. The task already has a link."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * 3a1. Lifebook requests permission to override the existing link."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: UC12 Add + search a common tag to a contact and task**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1. User requests to add tag(s) to a particular contact and task."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "2. Lifebook acknowledges the request by attaching the tag(s) to the respective contact and task."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "3. User then requests to search for the tag in the contact list."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "4. Lifebook shows the contact that is associated with the tag."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "5. User also requests to search for the tag in the TaskList."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "6. Lifebook shows the task that is associated with the task."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 1a. The given person/task index is invalid."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Use case: UC13 Edit a task**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kevnw"
        },
        "content": "1. User requests to edit some fields of a task(s)."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kevnw"
        },
        "content": "2. Lifebook acknowledges the request by replacing the field(s) to the respective information."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "kevnw"
        },
        "content": "3. User then requests to search for the tag in the contact list."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "kevnw"
        },
        "content": "4. Lifebook shows the contact that is associated with the tag."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "kevnw"
        },
        "content": "5. User also requests to search for the tag in the TaskList."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kevnw"
        },
        "content": "6. Lifebook shows the task that is associated with the task."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 1a. The given person/task index is invalid."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 3a. The user does not give any additional field to be edited."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "3.  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "5.  Commands should be intuitive so that users can quickly remember the commands."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "6.  Should work without an Internet connection."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "7.  Should not require more than 100 MB of storage space."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "8.  Should be able to backup and restore data by simply copying the whole Lifebook folder."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "9.  A user should be able to switch contact/TaskList with command or by clicking on the GUI."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "10. The data saved should be in a human-readable format."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **Recurrence**: A task that is done on a fixed interval (day/week/month/year)."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   1. Prerequisites: List all persons using the `list contact` command. Multiple persons in the list."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   1. Test case: `delete contact 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   1. Test case: `delete contact 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete contact x` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Adding a task (e.g. Todo)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1. Adding on to the TaskList while all tasks are being shown"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    1. Prerequisites: List all tasks using the `list task` command."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    1. Test case: `add todo desc/test date/12-12-2020 time/2359`\u003cbr\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "       Expected: A todo with the description \"test\" and deadline \"12-12-2020, 2359\" is added to the TaskList."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    1. Test case: `add todo desc/test date/12-1-2020 time/259`\u003cbr\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "       Expected: The todo is not created as the date and time format is wrong. TaskList should remain the same."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "       A \"Parse Exception\" will be thrown."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    1. Other incorrect add commands to try: `add`, `add todo`, missing description and/or date/time \u003cbr\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "       Expected: Similar to previous."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Marking a Task as done and Task deletion"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. Marking a task as done or deleting a task while the TaskList is being shown."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Prerequisites: Have tasks in the displayed TaskList. The list may be filtered or unfiltered."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `done VALID INDEX` e.g. if there is a task with an index of 5, input the command `done 5`. \u003cbr\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: The task at the index of 5 should be marked as done."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `delete task VALID INDEX` e.g. if there is a task with an index of 5, input the command `delete task 5`. \u003cbr\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: The task at the index of 5 should be deleted."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `done INVALID INDEX` e.g. if the TaskList has 10 items, input the command `done 12`. \u003cbr\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: An error message should be provided indicating that the provided index is invalid."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `delete task INVALID INDEX` e.g. if the TaskList has 10 items, input the command `delete task 12`. \u003cbr\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "           Expected: An error message should be provided indicating that the provided index is invalid."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Listing"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. List all contacts, tasks, events, or todos."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Prerequisites: Have tasks and contacts added to LifeBook."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `list task` \u003cbr\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Expected: GUI should switch to the task tab (if previously on the contact tab) that displays a complete list of all added tasks."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `list contact` \u003cbr\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Expected: GUI should switch to the contact tab (if previously on the the task tab) that displays a complete list of all added contacts."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `list todo` \u003cbr\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Expected: GUI should switch to the task tab (if previously on the contact tab) that displays a complete list of only all added todos."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Test case: `list event` \u003cbr\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Expected: GUI should switch to the task tab (if previously on the contact tab) that displays a complete list of only all added events."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Sorting"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Sorting the contact list and TaskList with different states. There are different inputs for each sorting command."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. Command: `sort task`"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Have an unsorted displayed list of tasks. \u003cbr\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: The list of task should be sorted according to date and time in ascending order."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Have an empty displayed list of tasks due to filtering. \u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: An unfiltered list of tasks sorted according to date and time in ascending order should be displayed."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input:: Have a TaskList without added Tasks."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: An error prompting the user to add tasks should be displayed."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "   "
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. Command: `sort contact`"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Have an unsorted displayed list of contacts. \u003cbr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: The list of contacts should be sorted according to name in alphabetical order."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Have an empty displayed list of contacts due to filtering. \u003cbr\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: An unfiltered list of contacts sorted according to name in alphabetical order should be displayed."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Have a contact list without added contacts."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: An error prompting the user to add contacts should be displayed."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. Command: `sort clear`"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Sorted displayed lists of tasks and contacts."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Expected: Both lists should be restored to their natural orders."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: Empty displayed list or lists due to filtering  (i.e. both or one of the displayed lists can be empty)."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Expected: The empty displayed list or lists should now be unfiltered and restored to natural orders."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    1. Input: List or lists without added tasks or contacts (i.e. both or one of the lists can have no added tasks or contacts)."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "       Expected: An error message prompting the user to add tasks or contacts to the list or lists without added items should be displayed. If one of the list had items, that list will be restored to its natural order."
      }
    ],
    "authorContributionMap": {
      "urieltan": 40,
      "kevnw": 140,
      "luciatirta": 128,
      "lerxcl": 174,
      "caleblyx": 194,
      "-": 233
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "   We recommend you do these tutorials on the [parent codebase](https://github.com/nus-cs2103-AY2021S1/tp)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "   * [Tracing code](https://se-education.org/addressbook-level3/tutorials/TracingCode.html)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "   * [Removing fields](https://se-education.org/addressbook-level3/tutorials/RemovingFields.html)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "   * [Adding a new command](https://se-education.org/addressbook-level3/tutorials/AddRemark.html)"
      }
    ],
    "authorContributionMap": {
      "urieltan": 4,
      "-": 53
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cdiv class\u003d\"welcome-page\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  \u003cp align\u003d\"center\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cimg src\u003d\"images/lifebook-Logo.png\" alt\u003d\"Logo\" width\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Welcome to \u003ci\u003eLifebook User Guide\u003c/i\u003e! Choose a section from the table of contents below to \u003cbr\u003efind answers, step-by-step guides and know about Lifebook better."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  \u003cp align\u003d\"center\" \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Are you a developer? Make sure to check our \u003ci\u003eDeveloper Guide\u003c/i\u003e also! Go back to our \u003ca href\u003d\"https://ay2021s1-cs2103t-f12-4.github.io/tp/DeveloperGuide.html\"\u003e\u003ci\u003eLifebook Developer Guide Page\u003c/i\u003e\u003c/a\u003e to find out more resources."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Lifebook is a **desktop application intended for university students to  manage contact details, assignments, projects,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "and module details.** Lifebook supports Command Line Interface (CLI) for efficient contacts and tasks management while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "This user guide is targeted at university students who are interested in using Lifebook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003csummary align\u003d\"center\"\u003e\u003ch2\u003eTable of Contents\u003c/h2\u003e\u003c/summary\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## 1. Quick start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "1. Download the latest `Lifebook.jar` from [here](https://github.com/AY2021S1-CS2103T-F12-4/tp/releases/tag/v1.3)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Lifebook."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1. Double-click the file to start the app. You will see that the app initially contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   ![Ui](images/LifebookHomescreen.png)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`list contact`** : Lists all contacts."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`add contact`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the contact list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   * **`add todo`**`desc/homework date/12-12-2020 time/2359`: Adds a todo with a description `homework` that is due by `12 December 2020, 2359`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`link meeting`**`desc/Annual meeting url/https://nus-sg.zoom.us/j/98401234359?pwd\u003deG9HU1FJRDdsVHRaYkFUTC95L0abcedf i/2 date/20/1/2020 time/2359` : Add a zoom meeting titled \u0027annual meeting\u0027 at 2359, 20 Jan 2020 to the app."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`delete contact`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`clear contact`** : Deletes all contacts."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## 2. Features"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* Parameters for contacts and task operations can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 2.1 Contact"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.1.1 Adding a person: `add contact`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Adds a person to the contact list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `add  contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add contact n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add contact n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.1.2 Listing all persons : `list contact`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Shows a list of all persons in the contact list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list contact`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.1.3 Editing a person : `edit contact`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Edits an existing person in the contact list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `edit contact i/INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Emails should be of the format local-part@domain and adhere to the following constraints:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 1. The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses, (!#$%\u0026\u0027*+/\u003d?`{|}~^.-) ."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 2. This is followed by a \u0027@\u0027 and then a domain name. The domain name must:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "urieltan"
        },
        "content": "*    - be at least 2 characters long"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "urieltan"
        },
        "content": "*    - start and end with alphanumeric characters"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "urieltan"
        },
        "content": "*    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit contact i/1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit contact i/2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### 2.1.4 Locating person by name or tag: `find contact`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Finds people whose names contain any of the given name keywords and tag matches the given tag keyword."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `find contact [n/NAME_KEYWORD [MORE_NAME_KEYWORDS]] [t/TAG_KEYWORD]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* At least one of name keyword or tag keyword is given in the command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive for both name and tag. e.g `friends` will match `Friends`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The order of the name keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched for both name and tag e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only name keyword is given, persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  e.g. name keyword `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only tag keyword is given, persons whose one of the tag(s) matches the tag searched will be returned."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. Hans with tag `friends` and `colleagues` will be returned when tag `friends` is searched."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When both name keyword and tag keyword are given, persons matching both keywords are returned."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. `Hans Gruber` with tag `friends` and `colleagues` will be returned on command `find contact n/Hans Bo t/friends`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find contact n/John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find contact n/alex david` returns `Alex Yeoh`, `David Li`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find contact t/friends`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find contact n/John Doe t/colleagues`\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### 2.1.5 Deleting a person : `delete contact`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Deletes the specified person from the contact list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `delete contact INDEX`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `list contact` followed by `delete contact 2` deletes the 2nd person in the contact list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `find contact Betsy` followed by `delete contact 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### 2.1.6 Clearing all entries : `clear contact`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Clears all entries from the contact list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `clear contact`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 2.2 Task"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.2.1 Due soon Tasks"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![dueSoonTasks](images/dueSoonTasks.png)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "At the bottom right hand corner of Lifebook, a list of tasks is shown that are due **1 week from the current date/time**."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "For all task operations, input the task\u0027s index based from the **whole Tasklist**, NOT from \"Due soon\"."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.2.2 Removing Tasks : `delete task`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Removes a To Do or an Event from the TaskList of LifeBook."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `delete task INDEX`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Removes the To Do at the specified `INDEX`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index refers to the index number shown in the displayed TodoList."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `list todo` followed by `delete task 3`  removes the 3rd To Do from the To Do list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `list event` followed by `delete task 3`  removes the 3rd Event from the Event list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.2.3 Mark Task as complete: `done`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Marks a Task on the TaskList as complete."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Marks the Task at the specified `INDEX` as done."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index refers to the index number shown in the displayed TaskList."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* If it is a recurring todo or event, it will proceed to add a new Todo or a new Event based on the new deadline given by the recurrence."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `list todo` followed by `done 3` marks the 3rd todo on the Todo List as complete."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `list event` followed by `done 3` marks the 3rd Event on the Event list as complete."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.2.4 Listing all tasks : `list task`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Shows a list of all events and to-dos in the Lifebook."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list task`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.2.5 Filter deadlines : `itemsDue`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "User can search todos/meetings due at/before a certain date/time."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Outputs a list of results."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* Due at"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    `itemsDueAt date/DD-MM-YYYY time/HHmm`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `DD-MM-YYYY`: States the Day, Month, Year."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `HHmm`: States the time in 24 hours."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Example: `itemsDueAt date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    It will output a list of todos/meetings that are due specifically **at** 12th December 2020, 2359."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Due before"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `itemsDueBefore date/DD-MM-YYYY time/HHmm`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `DD-MM-YYYY`: States the Day, Month, Year."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `HHmm`: States the time in 24 hours."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Example: `itemsDueBefore date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    It will output a list of todos/meetings that are due specifically **before** 12th December 2020, 2359."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* It is designed to show your completed tasks as well."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.2.6 Recurrence"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "A recurring task is created when a user includes the optional `recurring/` field in adding a new todo/event."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "When a recurring task is marked as done, it will automatically generate another recurring task with the new deadline based on the recurrence field. (while the remaining details of the task remains the same)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Example: `add todo desc/CS2100 Tutorial date/04-11-2020 time/1100 recurring/1 week`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "When this task is marked as done, it will generate another todo with the deadline: `Date: 11-11-2020, Time: 1100`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kevnw"
        },
        "content": "If a task is recurring, it will be displayed in the GUI."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![recurringTask](images/ExampleOfARecurringTask.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### 2.2.7 Add common tag to contact + task: `contactTaskTag`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds a common tag to a contact and task (Todo or Event) based on the given indexes of the contact and task."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The user can choose to add as many common tags as they want, where they simply just need to input the `t/` prefix."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `contactTaskTag t/TAG... contactIndex/INDEX taskIndex/INDEX`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![contactTaskTag](images/contactTaskTag.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Upon executing the command, the contact at index 7- “James Ho” and task at index 1- “homework” will have both the tags “CS2100” and “buddy”, which helps in the ease of searching contacts that are associated with a task."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ":warning: **Warning:**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "It is a coincidence in the example that the index of the \"homework\" task is 1 for \"Due soon\" and the whole Tasklist."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Input the task\u0027s index based from the **whole Tasklist** instead."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `contactTaskTag t/CS2100 t/buddy contactIndex/7 taskIndex/1`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 2.3 Todo"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.3.1 Adding To Dos : `add todo`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Adds a To Do to the TodoList of LifeBook."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `add todo desc/DESCRIPTION date/DATE time/TIME [recurring/VALUE UNIT] [t/TAG]…`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `DATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `TIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `VALUE` must be \u003e 0"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `TAG` must be alphanumeric"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `UNIT` must be \"day\", \"week\", \"month\" or \"year\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add todo desc/cs2101 Oral Presentation reflection date/08-08-2020 time/2359`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add todo desc/user guide draft date/09-08-2020 time/2300 t/MUSTFINISHSOON`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add todo desc/tutorial date/10-10-2020 time/1130 recurring/1 week`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.3.2 Editing a todo : `edit todo`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Edits an existing todo in the task list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `edit todo i/INDEX [desc/DESCRIPTION] [date/DATE] [time/TIME]`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Edits the todo at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `DATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `TIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit todo i/1 desc/CS2101 Slides date/24-01-2020` Edits the description and date of the 1st todo to be `CS2101 Slides` and `24-01-2020` respectively."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit todo i/2 date/25-01-2020 time/2350` Edits the date and time of the 2nd todo to be `25-01-2020` and `2350` respectively."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.3.3 View all To Dos : `list todo`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Shows a list of all To Do\u0027s in the TodoList."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list todo`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.3.4 Adding a collaborative folder link: `link doc`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kevnw"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Collaborative links can only be added to a todo."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Only **one** collaborative link can be assigned to a todo."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds a collaborative link (Google Drive, GitHub, Trello, and others) for a todo."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link doc desc/DESCRIPTION url/LINK i/INDEX_OF_TODO`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link doc desc/CS2103T Team Project url/https://drive.google.com/drive/folders/1zoUz1JpAgynIkfacr0asqV9A4kh i/2`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### 2.3.5 Locating todos by description or tag: `find todo`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Finds todos whose description contain any of the given description keywords and tag matches the given tag keyword."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `find todo [desc/DESC_KEYWORD [MORE_DESC_KEYWORDS]] [t/TAG_KEYWORD]`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* At least one of description keyword or tag keyword is given in the command."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive for both description and tag. e.g `assignment` will match `Assignment`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The order of the description keywords does not matter. e.g. `Finish assignment` will match `assignment Finish`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched for both description and tag e.g. `Quiz` will not match `Quizzes`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only description keyword is given, todos matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  e.g. `Do assignment` will return `Do chores`, `Finish assignment`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only tag keyword is given, todos whose one of the tag(s) matches the tag searched will be returned."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. Finish assignment with tag `CS2100` and `Graded` will be returned when tag `CS2100` is searched."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When both description keyword and tag keyword are given, todos matching both keywords are returned."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. `Finish assignment` with tag `CS2100` and `Graded` will be returned"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "on command `find todo desc/Do assignment t/CS2100`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find todo assignment` returns `Essay assignment` and `Quiz assignment`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find todo Do assignment` returns `Do chores`, `Finish assignment`\u003cbr\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find todo t/CS3243`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find todo n/Finish assignment t/CS2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 2.4 Event"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.4.1 Adding Events : `add event`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds an Event o to the EventList of LifeBook."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `add event desc/DESCRIPTION startdate/DATE starttime/TIME enddate/DATE endtime/TIME [recurring/VALUE UNIT] [t/TAG]..`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `DATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `TIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `VALUE` must be \u003e 0"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `UNIT` must be \"day\", \"week\", \"month\" or \"year\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `TAG` must be alphanumeric"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `add event desc/Party with friends startdate/08-08-2020 starttime/2359 enddate/10-08-2020 endtime/2359 recurring/1 year`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add event desc/Singapore Fintech Festival startdate/09-08-2020 starttime/1000 enddate/12-08-2020 endtime/2359 t/important`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.4.2 Editing an event : `edit event`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Edits an existing event in the task list."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `edit event i/INDEX [desc/DESCRIPTION] [startdate/DATE] [starttime/TIME] [enddate/DATE] [endtime/TIME]`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `STARTDATE` and `ENDDATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `STARTTIME` and `ENDTIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "*  `edit event i/1 desc/CS2101 Lecture startdate/24-01-2020 endtime/2359` Edits the description, start date, and end time of the 1st event to be `CS2101 Lecture`, `24-01-2020`, and `2359` respectively."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit event i/2 starttime/1400 enddate/30-01-2020` Edits the start time and end date of the 2nd event to be `1400` and `30-01-2020` respectively."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.4.3 View all Events : `list event`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Shows a list of all Events in the EventList."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list event`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 2.4.4 Adding a zoom meeting: `link meeting`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kevnw"
        },
        "content": ":information_source: **Note:**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Meeting links can only be added to an event."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Only **one** meeting link can be assigned to an event."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds a meeting link for an event."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link meeting desc/DESCRIPTION url/MEETING LINK i/INDEX_OF_EVENT date/DD-MM-YYYY time/HHmm`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `DATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `TIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link meeting desc/Job interview url/https://nus-sg.zoom.us/j/98221234359?pwd\u003deG9HU1FJRDdsVHRaYk2UTC95L0abcedf i/2 date/22-09-2020 time/1400`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### 2.4.5 Locating events by description or tag: `find event`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Finds events whose description contain any of the given description keywords and tag matches the given tag keyword."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `find event [desc/DESC_KEYWORD [MORE_DESC_KEYWORDS]] [t/TAG_KEYWORD]`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* At least one of description keyword or tag keyword is given in the command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive for both description and tag. e.g `meeting` will match `Meeting`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The order of the description keywords does not matter. e.g. `Attend meeting` will match `meeting Attend`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched for both description and tag e.g. `Meet` will not match `Meeting`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only description keyword is given, events matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. `Attend meeting` will return `Attend workshop`, `Arrange meeting`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When only tag keyword is given, events whose one of the tag(s) matches the tag searched will be returned."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. Attend meeting with tag `CS2100` and `TeamProject` will be returned when tag `CS2100` is searched."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* When both description keyword and tag keyword are given, todos matching both keywords are returned."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. `Attend meeting` with tag `CS2100` and `TeamProject` will be returned"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "on command `find event desc/meeting t/TeamProject`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find event meeting` returns `CCA meeting` and `Team meeting`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find event Attend meeting` returns `Attend workshop`, `Arrange meeting`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find event t/CS3243`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find event n/Attend meeting t/TeamProject`\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 2.5 Others"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### 2.5.1 Sorting contacts and tasks: `sort`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Sorts the currently displayed tasks or contacts according to date or name, respectively. Sorting may also be cleared, such that the natural order of both lists are restored."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "If the currently displayed list is empty, a sorted, unfiltered list will be displayed instead."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Format: `sort OPTION`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The `OPTION` field refers to `contact`, `task`, or `clear`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![sortedTaskList](images/SortedTaskList.PNG)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Contact, task, and clear are the available options for sort and should be used individually in the `OPTION` field."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Using the clear option restores all lists (i.e. both contact list and task list) to their natural order."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* `sort task` sorts the task list."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* `sort contact` sorts the contact list."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### 2.5.2 Exiting the program : `exit`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### 2.5.3 Viewing help : `help`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## 3. FAQ"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Q**: How do I save any update I made on the Lifebook?\u003cbr\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**A**: Lifebook will automatically save any update you make upon closing the app, and the data is saved in the hard disk. There is no need to save manually.\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Lifebook home folder."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## 4. Command summary"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 4.1 General"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Sort** | `sort OPTION` \u003cbr\u003e `OPTION` refers to `contact`, `task`, or `clear`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Add common tag to Contact + Task** | `contactTaskTag t/TAG... contactIndex/INDEX taskIndex/INDEX` \u003cbr\u003e e.g., `contactTaskTag t/CS2103T t/ProjMate contactIndex/1 taskIndex/1`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 4.2 Contact Operations"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Add Contact** | `add contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add contact n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Clear Contacts** | `clear contact`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Delete Contact** | `delete contact INDEX`\u003cbr\u003e e.g., `delete contact 3`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Edit Contact** | `edit contact i/INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`\u003cbr\u003e e.g.,`edit contact i/2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Find Contact** | `find contact [n/NAME_KEYWORD [MORE_NAME_KEYWORDS]] [t/TAG_KEYWORD]`\u003cbr\u003e e.g., `find contact n/James Jake t/colleagues`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List Contacts** | `list contact`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### 4.3 Task Operations"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List Tasks** | `list task`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Remove Task (Todo and Event)** | `delete task INDEX` \u003cbr\u003e e.g., `delete task 3`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Mark To Do/Event as Complete** | `done INDEX` \u003cbr\u003e e.g., `done 5`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Find tasks due at** | `itemsDueAt date/DD-MM-YYYY time/HHmm` \u003cbr\u003e e.g. `itemsDueAt date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Find tasks due before** |  `itemsDueBefore date/DD-MM-YYYY time/HHmm` \u003cbr\u003e e.g. `itemsDueBefore date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 4.3.1 Todo-specific Operations"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Add To Do** | `add todo desc/DESCRIPTION date/DATE time/TIME [recurring/VALUE UNIT] [t/TAG]…` \u003cbr\u003e e.g., `add todo desc/update user guide date/09-08-2020 time/2300 recurring/1 week t/MUSTFINISHSOON`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List To Dos** | `list todo`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Find To Do** | `find todo [desc/DESC_KEYWORD [MORE_DESC_KEYWORDS]] [t/TAG_KEYWORD]`\u003cbr\u003e e.g., `find todo desc/Finish assignment t/CS2100`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Link doc** | `link doc desc/DESCRIPTION url/LINK i/INDEX_OF_TODO` \u003cbr\u003e e.g.,`link doc desc/CS2103T Team Project url/https://drive.google.com/drive/folders/1zoIkfacr0asqV9A4kh i/2`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### 4.3.2 Event-specific Operations"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Add Event** | `add event desc/DESCRIPTION startdate/DATE starttime/TIME enddate/DATE endtime/TIME [recurring/VALUE UNIT] [t/TAG]` \u003cbr\u003e e.g., `add event desc/meeting startdate/12-12-2020 starttime/1000 enddate/12-12-2020 endtime/1130 recurring/1 week t/IMPORTANT`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List Events** | `list event`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Find Event** | `find event [desc/DESC_KEYWORD [MORE_DESC_KEYWORDS]] [t/TAG_KEYWORD]`\u003cbr\u003e e.g., `find event desc/Attend meeting t/CS2103T`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Link meeting** | `link meeting desc/DESCRIPTION url/LINK i/INDEX_OF_EVENT date/DATE time/TIME` \u003cbr\u003e e.g.,`link meeting desc/Job interview url/https://nus-sg.zoom.us/j/98221234359?pwd\u003deG9HU1FJRDdsVHRaYk2UTC95L0abcedf i/2 date/22-09-2020 time/1400`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "urieltan": 6,
      "kevnw": 227,
      "luciatirta": 78,
      "lerxcl": 102,
      "caleblyx": 31,
      "-": 123
    }
  },
  {
    "path": "docs/assets/css/style.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Only the main Sass file needs front matter (the dashes are enough)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@import"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/skins/{{ site.minima.skin | default: \u0027classic\u0027 }}\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/initialize\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ".icon {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 21px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 21px"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ".welcome-page {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  background-color: #f2f2f2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  padding-top: 5px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  padding-bottom: 20px;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 6,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 2,
      "-": 21
    }
  },
  {
    "path": "docs/diagrams/DeleteContactSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"d:DeleteContactCommand\" as DeleteContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[-\u003e LogicManager : execute(\"delete contact 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete contact 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"contact 1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create DeleteContactCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "DeleteCommandParser -\u003e DeleteContactCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate DeleteContactCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "DeleteContactCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate DeleteContactCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e DeleteContactCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate DeleteContactCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "DeleteContactCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Model --\u003e DeleteContactCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "DeleteContactCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "CommandResult --\u003e DeleteContactCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "DeleteContactCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate DeleteContactCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 17,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/EditEventSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"e:EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"e:EditEventCommand\" as EditEventCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[-\u003e LogicManager : execute(\"edit event i/1 ...\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"edit event i/1...\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser -\u003e EditCommandParser : parse(\"event i/1...\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create EditEventCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser -\u003e EditEventCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditEventCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand --\u003e EditCommandParser : e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditEventCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e EditEventCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditEventCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand -\u003e Model : setTask(eventToEdit, editedEvent)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Model --\u003e EditEventCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "CommandResult --\u003e EditEventCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditEventCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 69
    }
  },
  {
    "path": "docs/diagrams/UpdatedBetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniquePersonList o-right-\u003e \"*\" Person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\" Email"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\" Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "TaskList *-right-\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "TaskList *--\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniqueTaskList o-right-\u003e \"*\" \"{abstract} Task\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract} Task\" -down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Todo -left-|\u003e \"{abstract} Task\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Event -down-|\u003e \"{abstract} Task\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract} Task\" *-down-\u003e \"1\" Recurrence"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract} Task\" *--\u003e \"1\" \"{abstract} Link\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "CollaborativeLink --|\u003e \"{abstract} Link\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "MeetingLink --|\u003e \"{abstract} Link\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Event *--\u003e \"1\" MeetingLink"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Todo *--\u003e \"1\" CollaborativeLink"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 36
    }
  },
  {
    "path": "docs/diagrams/UpdatedModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class ReadOnlyTaskList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class \"{abstract}\\nTask\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Todo"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Recurrence"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class UniqueTaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class Recurrence"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class \"{abstract}\\nLink\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class MeetingLink"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class CollaborativeLink"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "TaskList .up.|\u003e ReadOnlyTaskList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ModelManager -left-\u003e\"1\" UniquePersonList : sorted filtered list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ModelManager -right-\u003e\"1\" UniqueTaskList : sorted filtered list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ModelManager --\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ModelManager --\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ModelManager -left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniquePersonList --\u003e \"*\" Person"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\"Name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\"Phone"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\"Email"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Person *--\u003e \"1\"Address"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Tag \"*\"\u003c--* \"{abstract}\\nTask\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Tag \"*\"\u003c--* Person"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "TaskList *--\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Event *--\u003e \"1\" MeetingLink"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Todo *--\u003e \"1\" CollaborativeLink"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nTask\" \u003c|-- Todo"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nTask\" \u003c|-- Event"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nLink\" \u003c|-- CollaborativeLink"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nLink\" \u003c|-- MeetingLink"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "UniqueTaskList --\u003e \"*\" \"{abstract}\\nTask\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nTask\" *--\u003e \"1\" \"{abstract}\\nLink\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nTask\" *--\u003e \"1\" Recurrence"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 94
    }
  },
  {
    "path": "docs/diagrams/UpdatedUiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow *-left-\u003e\"taskListPanel\" TaskListPanel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow *-left-\u003e\"dueSoonTaskListPanel\" TaskListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow *--\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow *--\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow *--\u003e PersonListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow *--\u003e StatusBarFooter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "PersonListPanel --\u003e PersonCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TaskListPanel --\u003e TaskCard"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TaskCard --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "PersonCard .left.\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TaskCard .left.\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "PersonListPanel -[hidden]right- ResultDisplay"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TaskListPanel -[hidden]right- PersonListPanel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "CommandBox -[hidden]right- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ResultDisplay -[hidden]right- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "StatusBarFooter -[hidden]right- HelpWindow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 68
    }
  },
  {
    "path": "docs/diagrams/addTask/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"add todo ..."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"add todo ...\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "logic -[LOGIC_COLOR]\u003emodel : new Todo(\"Complete homework date\", \"12-12-2020 2359\" )"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic: todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addTodo(todo)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 33
    }
  },
  {
    "path": "docs/diagrams/addTask/AddTaskActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ":User executes an add task command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "if () then ([task is in the Task List])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    :Task will not be added;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    : Task will be added to Task List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    : Task List is updated;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 15
    }
  },
  {
    "path": "docs/diagrams/addTask/AddTaskParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class AddCommandParser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Parser \u003c|.. AddCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 2,
      "caleblyx": 11
    }
  },
  {
    "path": "docs/diagrams/addTask/AddTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \"d:AddTodoCommand\" as AddTodoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \"t:Todo\" as Todo MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "[-\u003e LogicManager : execute(\"add todo ...\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"add todo ...\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create Todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser -\u003e Todo : new Todo(\"Complete homework date\", \"12-12-2020 2359\" )"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate Todo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Todo --\u003e AddCommandParser : t"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate Todo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create AddTodoCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser -\u003e AddTodoCommand : new AddTodoCommand(t)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddTodoCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand --\u003e AddCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddTodoCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "LogicManager -\u003e AddTodoCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddTodoCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand -\u003e Model : addTodo(t)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Model --\u003e AddTodoCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "CommandResult --\u003e AddTodoCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddTodoCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 72
    }
  },
  {
    "path": "docs/diagrams/addTask/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nAddCommand\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class AddTodoCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class AddEventCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nCommand\" \u003c|-- \"{abstract}\\nAddCommand\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nAddCommand\" \u003c|-- AddTodoCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nAddCommand\" \u003c|-- AddEventCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 2,
      "caleblyx": 18
    }
  },
  {
    "path": "docs/diagrams/addTask/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 75
    }
  },
  {
    "path": "docs/diagrams/contactTaskTag/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class ContactTaskTagCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Command \u003c|-- ContactTaskTagCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 12
    }
  },
  {
    "path": "docs/diagrams/contactTaskTag/ParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "interface \"Parser \u003cContactTaskTagCommand\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class ContactTaskTagParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\"Parser \u003cContactTaskTagCommand\u003e\" \u003c|.. ContactTaskTagParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 12
    }
  },
  {
    "path": "docs/diagrams/contactTaskTag/contactTaskTagActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ":User executes contactTaskTag command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "if () then ([Task and Contact index are valid,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        and \u003e\u003d 1 tag is given])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : The selected contact and task will be updated"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    with the new common tag(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : Parse Exception will be thrown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 17
    }
  },
  {
    "path": "docs/diagrams/contactTaskTag/contactTaskTagSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "participant \":ContactTaskTagParser\" as ContactTaskTagParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "participant \"d:ContactTaskTagCommand\" as ContactTaskTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "[-\u003e LogicManager : execute(\"contactTaskTag...\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"contactTaskTag...\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "create ContactTaskTagParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "AddressBookParser -\u003e ContactTaskTagParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate ContactTaskTagParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate ContactTaskTagParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "AddressBookParser -\u003e ContactTaskTagParser : parse(\"t/CS2103T contactIndex/1 taskIndex/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate ContactTaskTagParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "create ContactTaskTagCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagParser -\u003e ContactTaskTagCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate ContactTaskTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand --\u003e ContactTaskTagParser : c"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate ContactTaskTagCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagParser --\u003e AddressBookParser : c"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate ContactTaskTagParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "destroy ContactTaskTagParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "LogicManager -\u003e ContactTaskTagCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate ContactTaskTagCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand -\u003e Model : setPerson(personToEdit, editedPerson)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Model --\u003e ContactTaskTagCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand -\u003e Model : updateFilteredPersonList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Model --\u003e ContactTaskTagCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand -\u003e Model : setTask(taskToEdit, editedTask)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Model --\u003e ContactTaskTagCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand -\u003e Model : updateFilteredTaskList()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Model --\u003e ContactTaskTagCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "CommandResult --\u003e ContactTaskTagCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ContactTaskTagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate ContactTaskTagCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 87
    }
  },
  {
    "path": "docs/diagrams/contactTaskTag/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 75
    }
  },
  {
    "path": "docs/diagrams/deleteTask/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nDeleteCommand\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class DeleteTodoCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class DeleteEventCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nCommand\" \u003c|-- \"{abstract}\\nDeleteCommand\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nDeleteCommand\" \u003c|-- DeleteTodoCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nDeleteCommand\" \u003c|-- DeleteEventCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 20
    }
  },
  {
    "path": "docs/diagrams/deleteTask/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 75
    }
  },
  {
    "path": "docs/diagrams/editTask/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "abstract class \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "abstract class \"{abstract}\\nEditCommand\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class EditContactCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class EditTodoCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class EditEventCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\"{abstract}\\nCommand\" \u003c|-- \"{abstract}\\nEditCommand\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\"{abstract}\\nEditCommand\" \u003c|-- EditContactCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\"{abstract}\\nEditCommand\" \u003c|-- EditTodoCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\"{abstract}\\nEditCommand\" \u003c|-- EditEventCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 20,
      "lerxcl": 2
    }
  },
  {
    "path": "docs/diagrams/editTask/EditTaskActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ":User executes an edit task command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "if () then ([The command is valid (valid index"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "and minimal one field is edited)])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    :Task will be edited;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    : The command will not be executed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    : Task List is updated;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 16
    }
  },
  {
    "path": "docs/diagrams/editTask/EditTaskParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class EditCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Parser \u003c|.. EditCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 11,
      "lerxcl": 2
    }
  },
  {
    "path": "docs/diagrams/editTask/EditTaskSequence.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"d:EditEventCommand\" as EditEventCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"e:Event\" as Event MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[-\u003e LogicManager : execute(\"edit event desc/Complete homework starttime/2359\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"edit event desc/Complete homework starttime/2359\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser -\u003e Event : new Event(\"Complete homework date\", \"12-12-2020 2359\" )"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Event --\u003e EditCommandParser : e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create EditEventCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser -\u003e EditEventCommand : new EditEventCommand(e)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditEventCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand --\u003e EditCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditEventCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e EditEventCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate EditEventCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand -\u003e Model : setTask(eventToEdit, editedEvent)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Model --\u003e EditEventCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "CommandResult --\u003e EditEventCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "EditEventCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate EditEventCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 72
    }
  },
  {
    "path": "docs/diagrams/editTask/EditTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"edit event desc/Complete homework starttime/2359\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"edit event desc/Complete homework starttime/2359\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "logic -[LOGIC_COLOR]\u003emodel : new Event(\"Complete homework date\", \"12-12-2020 2359\" )"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic: event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : setTask(eventToEdit, editedEvent)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 33
    }
  },
  {
    "path": "docs/diagrams/editTask/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "kevnw": 75
    }
  },
  {
    "path": "docs/diagrams/filterFunction/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueBeforeCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueAtCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Command \u003c|-- DueBeforeCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Command \u003c|-- DueAtCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 14
    }
  },
  {
    "path": "docs/diagrams/filterFunction/FilterActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ":User executes itemsDueAt / itemsDueBefore command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "if () then ([task matches predicate])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    :Task will be displayed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : Task will not be displayed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 15
    }
  },
  {
    "path": "docs/diagrams/filterFunction/FilterSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"itemsDueBefore date/12-12-2020 time/2359\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"itemsDueBefore date/12-12-2020 time/2359\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : updateFilteredTaskList(predicate)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 27
    }
  },
  {
    "path": "docs/diagrams/filterFunction/ParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueBeforeCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueAtCommandParser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Parser \u003c|.. DueBeforeCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Parser \u003c|.. DueAtCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 14
    }
  },
  {
    "path": "docs/diagrams/filterFunction/PredicateClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "abstract class \"{abstract}\\nDuePredicate\" as DuePredicate"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueBeforePredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueAtPredicate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "DuePredicate \u003c|-- DueBeforePredicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "DuePredicate \u003c|-- DueAtPredicate"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 14
    }
  },
  {
    "path": "docs/diagrams/filterFunction/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 75
    }
  },
  {
    "path": "docs/diagrams/findFunction/ContactMatchesFindKeywordPredicate.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "interface \"Predicate\u003cPerson\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class ContactMatchesFindKeywordPredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\"Predicate\u003cPerson\u003e\" \u003c|.. ContactMatchesFindKeywordPredicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "docs/diagrams/findFunction/FindCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ":User executes find contact command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "if () then ([contact matches predicate])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    :Contact will be displayed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    : Contact will not be displayed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 15
    }
  },
  {
    "path": "docs/diagrams/findFunction/FindCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "abstract class \"{abstract}\\nFindCommand\" as FindCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class FindContactCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class FindEventCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class FindTodoCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Command \u003c|-- FindCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommand \u003c|-- FindContactCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommand \u003c|-- FindEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommand \u003c|-- FindTodoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 18
    }
  },
  {
    "path": "docs/diagrams/findFunction/FindCommandParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "interface \"Parser\u003cFindCommand\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class FindCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\"Parser\u003cFindCommand\u003e\" \u003c|.. FindCommandParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "docs/diagrams/findFunction/FindCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \"s:FindContactCommand\" as FindContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"find contact n/John t/CS2100Teammate\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ui -[UI_COLOR]\u003e LogicManager : execute(\"find ...\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e AddressBookParser : parseCommand(\"find ...\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "AddressBookParser -[LOGIC_COLOR]\u003e FindCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommandParser -[LOGIC_COLOR]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "AddressBookParser -[LOGIC_COLOR]\u003e FindCommandParser : parse(\"contact n/John t/CS2100Teammate\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "create FindContactCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommandParser -[LOGIC_COLOR]\u003e FindContactCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate FindContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindContactCommand -[LOGIC_COLOR]-\u003e FindCommandParser : s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate FindContactCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommandParser -[LOGIC_COLOR]-\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "AddressBookParser -[LOGIC_COLOR]-\u003e LogicManager : s"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e FindContactCommand : execute()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate FindContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindContactCommand -[LOGIC_COLOR]\u003e Model : updateFilteredPersonList(predicate)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Model -[MODEL_COLOR]-\u003e FindContactCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "group ref save file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[hidden]-\u003e Storage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end group"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindContactCommand -[LOGIC_COLOR]\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "CommandResult -[LOGIC_COLOR]-\u003e FindContactCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "CommandResult -[hidden]-\u003e FindContactCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "destroy CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindContactCommand -[LOGIC_COLOR]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate FindContactCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "FindContactCommand -[hidden]-\u003e FindCommandParser"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "destroy FindContactCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ui \u003c-[LOGIC_COLOR]-LogicManager : result"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "user \u003c-[UI_COLOR]-ui : result"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 95
    }
  },
  {
    "path": "docs/diagrams/findFunction/SaveLifebook.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "group sd save file"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Model : getAddressBook()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Model --[MODEL_COLOR]\u003e LogicManager : ReadOnlyAddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Model : getTaskList()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Model --[MODEL_COLOR]\u003e LogicManager : ReadOnlyTaskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveTaskList(ReadOnlyTaskList)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end group"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 29
    }
  },
  {
    "path": "docs/diagrams/findFunction/TaskMatchesFindKeywordPredicate.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "interface \"Predicate\u003cTask\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class TaskMatchesFindKeywordPredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\"Predicate\u003cTask\u003e\" \u003c|.. TaskMatchesFindKeywordPredicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "docs/diagrams/linkFunction/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class LinkCollaborativeCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class LinkMeetingCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "abstract class \"{abstract}\\nLinkCommand\" as LinkCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Command \u003c|-- LinkCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCommand \u003c|-- LinkCollaborativeCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCommand \u003c|-- LinkMeetingCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 14,
      "lerxcl": 2
    }
  },
  {
    "path": "docs/diagrams/linkFunction/LinkActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ":User executes `link meeting` / `link doc` command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    if () then([command is link meeting])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        : Add or edit the link to event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        : Add or edit the link to todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    : Error message displayed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 19
    }
  },
  {
    "path": "docs/diagrams/linkFunction/LinkSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":LinkCommandParser\" as LinkCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"l:LinkCollaborativeCommand\" as LinkCollaborativeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"l:LinkMeetingCommand\" as LinkMeetingCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[-\u003e LogicManager : execute(\"link doc desc/CS2103T url/www.github.com i/1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"link ...\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create LinkCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser -\u003e LinkCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LinkCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LinkCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "alt is a collaborative link"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    AddressBookParser -\u003e LinkCommandParser : parse(\"doc desc/CS2103T url/www.github.com i/1\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    create LinkCollaborativeCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -\u003e LinkCollaborativeCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCollaborativeCommand --\u003e LinkCommandParser : l"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser --\u003e AddressBookParser : l"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    destroy LinkCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "else is a meeting link"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    AddressBookParser -\u003e LinkCommandParser : parse(\"meeting desc/CS2103T Lecture url/www.zoom.com i/1 ...\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    create LinkMeetingCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -\u003e LinkMeetingCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkMeetingCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkMeetingCommand --\u003e LinkCommandParser : l"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkMeetingCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser --\u003e AddressBookParser : l"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    destroy LinkCommandParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e LinkCollaborativeCommand : execute()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCollaborativeCommand -\u003e Model : setTask(taskToEdit, editedTask)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Model --\u003e LinkCollaborativeCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveLifeBook(LifeBook)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Storage -[STORAGE_COLOR]\u003e Storage : Save\\nto file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e Storage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCollaborativeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "CommandResult --\u003e LinkCollaborativeCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCollaborativeCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 106
    }
  },
  {
    "path": "docs/diagrams/linkFunction/ParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class LinkCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Parser \u003c|.. LinkCommandParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 10,
      "lerxcl": 2
    }
  },
  {
    "path": "docs/diagrams/linkFunction/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "kevnw": 75
    }
  },
  {
    "path": "docs/diagrams/storage/ReadFileActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": ":Lifebook reads TaskList from file;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "if () then ([hasFile])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    : Parse file;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    if () then ([hasException]);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        : Throw exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    else ([success])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        : Return TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    : Return empty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "urieltan": 18
    }
  },
  {
    "path": "docs/diagrams/storage/ReadTaskList.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "participant \":TaskListStorage\" as TaskListStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : readTaskList()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Storage -[STORAGE_COLOR]\u003e TaskListStorage : readTaskList()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "activate TaskListStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "TaskListStorage --[STORAGE_COLOR]\u003e Storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "deactivate TaskListStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "urieltan": 19
    }
  },
  {
    "path": "docs/diagrams/storage/SaveTaskList.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "participant \":TaskListStorage\" as TaskListStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveTaskList(ReadOnlyTaskList)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Storage -[STORAGE_COLOR]\u003e TaskListStorage : saveTaskList(ReadOnlyTaskList)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "activate TaskListStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "TaskListStorage --[STORAGE_COLOR]\u003e Storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "deactivate TaskListStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "urieltan": 19
    }
  },
  {
    "path": "docs/diagrams/storage/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class TaskListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class JsonTaskListStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "StorageManager o-down-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "StorageManager o-down-\u003e AddressBookStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "StorageManager o-down-\u003e TaskListStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAddressBookStorage .up.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonTaskListStorage .up.|\u003e TaskListStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "urieltan": 25
    }
  },
  {
    "path": "docs/diagrams/storage/TaskListStorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class TaskListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class JsonTaskListStorage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class JsonSerializableTaskListManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Class \"{abstract}\\nJsonAdaptedTask\" as JsonAdaptedTask"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonTaskListStorage .up.|\u003e TaskListStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonTaskListStorage ..\u003e JsonSerializableTaskListManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonSerializableTaskListManager --\u003e \" * \" JsonAdaptedTask"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAdaptedTodo .up.|\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAdaptedEvent .up.|\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAdaptedTodo --\u003e \" * \" JsonAdaptedTag"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAdaptedEvent --\u003e \" * \" JsonAdaptedTag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAdaptedTodo --\u003e \" 0,1     \" JsonAdaptedRecurrence"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "JsonAdaptedEvent --\u003e \"0,1 \" JsonAdaptedRecurrence"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "urieltan": 24
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## Lifebook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-4/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F12-4/tp)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![Ui](images/LifebookHomescreen.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Introduction**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Lifebook is a project developed for an introductory Software Engineering (SE) module (CS2103T) at the National University of Singapore."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Lifebook is a desktop application intended for University students to  manage contact details, assignments, projects, module details, etc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It is morphed from AddressBook Level 3 (AB3)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* For the detailed user documentation of this project, see [here](https://ay2021s1-cs2103t-f12-4.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* For contributing to the ongoing development of the Lifebook, do check out the [Developer Guide](https://ay2021s1-cs2103t-f12-4.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "This project is developed from an se-education.org initiative. If you would like to contribute code to the initiative, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Libraries used: JavaFX, Jackson, JUnit5"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "kevnw": 15,
      "lerxcl": 1,
      "-": 8
    }
  },
  {
    "path": "docs/team/caleblyx.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "title: Lin Yuan Xun, Caleb\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Lifebook is a desktop task management application created as an assignment for a module that teaches Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **TaskList and tasks**: Added the ability to create `Tasks`, and add or delete them to or from the `TaskList` respectively."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * What it does: allows the user create to tasks that may either be `Todos` or `Events` and keep a record of them in the `TaskList`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can now record information about tasks in addition to addresses in Lifebook for future reference and planning."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Highlights: This required an implementation of the TaskList and Tasks (along with its subclasses). This also provides an opportunity for more commands and features to be added in the future."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Credits: inspired from the creation of Bob - the personal assistant, which was my individual project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **List out Tasks, Events or Todos**: Implemented the ability for users to list out all `Tasks`, `Events`, or `Todos`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * What it does: allows the user to list out `Tasks`, `Events`, or `Todos`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Justification: allows the user to view all `Tasks`, or if needed, a filtered list of all `Events` or `Todos`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Credits: inspired from the creation of Bob - the personal assistant, which was my individual project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Mark tasks as done**: Implemented the ability for users to mark tasks as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * What it does: allows the user to mark completed tasks as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Justification: allows users to have a record of the tasks that have been completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Credits: inspired from the creation of Bob - the personal assistant, which was my individual project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Sort TaskList and AddressBook** Implemented the ability for users to sort the `TaskList` and `AddressBook`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * What it does: allows users to sort the `TaskList` and `AddressBook` by name and date respectively. Users also have the option of restoring both lists to their natural order if needed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Justification: provides users with intuitively sorted lists. Users normally prefer to look through contact details in alphabetical order, and task details in the order of imminence."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Highlights: this required a change in the model component. To implement sorting easily, the `TaskList` and `AddressBook` had to be wrapped by the JavaFX sorted list class, since the JavaFX filtered list class does not support sorting."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Basic TaskList GUI**: Created a simple GUI for the `TaskList` and `Tasks` in the first iteration, which was further enhanced and modified in proceeding iterations by other members."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * What it does: allows users to view the `TaskList` and its contents."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Justification: provides a means for users to easily access the contents of the `TaskList` via a graphical representation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Highlights: made it easier for the developing team to visualise any features that they may have implemented in regards to the `TaskList` and/or `Tasks`. Also, provides a starting point for further development of its GUI. Implementing this GUI was initially challenging due to my lack of my experience. It required a big change in my initial implementation of the TaskList so that it would be observable to the GUI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Credits: the initial GUI implementation for the `TaskList` was inspired by the GUI of the AddressBook."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Storage for TaskList**: Implemented storage for the `TaskList`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * What it does: allows users to store `TaskList` data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Justification: provides a means for users to easily access the contents of the `TaskList` in future sessions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Highlights: enables greater ease of implementing storage for data of other features pertaining to `Tasks` in the future. I had encountered some challenges due to my lack of familiarity with JSON, but implementing Storage with it had provided me with some valuable experience."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Credits: implementation inspired by the existing `Storage` component of address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dF12-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003dfunctional-code~docs~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dcaleblyx\u0026tabRepo\u003dAY2021S1-CS2103T-F12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code~docs~test-code)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Reduced coupling of `Model` and `Logic` in the implementation of the Recurrence feature. Initially, `Model` had a dependency on `Logic` in the implementation of Recurrence, since `Model` had to return a `Command`, which is a component of `Logic`. This implementation was enhanced, removing this dependency, such that only `Logic` would have a dependency on `Model`. [\\#148](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/148)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Wrote unit tests for all added storage components to support storage of the contents of `TaskList`. [\\#134](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/134)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * Added documentation for the features:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        * `add todo`, `remove todo`, `mark todo as done` and `list todo`. [#\\20](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/20)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        * `sort contact`, `sort task`, and `sort clear` [\\#110](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/110) [\\#145](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/145);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * Added implementation details of the `Add Task` feature. [#\\120](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/120)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * PRs reviewed and merged: [\\#149](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/149), [\\#216](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/216), [\\#221](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/221)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Resolve failing CI with PR: [\\#150](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/150)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/Caleblyx/ped/issues/6), [2](https://github.com/Caleblyx/ped/issues/4), [3](https://github.com/Caleblyx/ped/issues/3))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "caleblyx": 69
    }
  },
  {
    "path": "docs/team/kevnw.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "title: Kevin William\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## Project: Lifebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Lifebook is a desktop task management application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Link Feature**: Added the ability to add a link to a task. (Pull requests [\\#86](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/86), [\\#100](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/100))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * What it does: allows the user to add a meeting link or collaborative link to a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Justification: This feature improves the product significantly because finding Zoom links or Google Drive links can be tedious for the users and the app should provide a convenient way for the users to find the links easily."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Highlights: This enhancement affects the model of the task. The implementation was quite challenging as UI matters must also be taken into consideration."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Edit Task Feature**: Added the ability to edit the properties of a task. (Pull request [\\#135](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/135))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * What it does: allows the user to edit the properties of a todo or an event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistake when typing the properties of a task and the app should provide a convenient way for the users to edit them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Highlights: This enhancement does not affect other commands because it is independent from other commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkevnw\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Setting up the GitHub team organization"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Created the skeleton and morph the commands to suite Lifebook (Pull request [\\#45](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/45))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Maintaining the issue tracker for every Milestone from `v.1` - `v1.4`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Updated exception handling for list, add, and delete command to be more meaningful (Pull request [\\#79](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/79))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Added extra validation and meaningful exception handling for link (Pull request [\\#104](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/104))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Updated the GUI for Meeting Link and Collaborative Link (Pull requests [\\#86](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/86/))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 58% to 67% (Pull requests [\\#213](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/213), [\\#214](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/214), [\\#208](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/208), [\\#149](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/149))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added documentation for the features `add event`, `add todo`, `link`, and many more. [\\#57](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/57/)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `edit`, `delete`: [\\#137](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/137/)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added CodeCoverage widget to the User Guide. [\\#151](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/151)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Major User Guide fix after the PE-Dry Run. [\\#193](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/193)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added user stories and use case for the `link` feature. [\\#42](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/42/)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added implementation details of the `link` feature. [\\#116](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/116/)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added UML diagrams for `link` feature. [\\#116](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/116/)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added user stories and use case for `edit` feature. [\\#251](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/251/)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Added UML diagrams for `edit` feature. [\\#251](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/251/)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Contributions to the Developer Guide**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * LinkCommandParser Class Diagram"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ![ParserClassDiagram](../images/linkFunction/ParserClassDiagram.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * LinkCommand Class Diagram"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ![CommandClassDiagram](../images/linkFunction/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Sequence Diagram of Link Feature"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ![FilterSequenceDiagram](../images/linkFunction/LinkSequenceDiagram.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Activity Diagram of Link Feature"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ![FilterActivityDiagram](../images/linkFunction/LinkActivityDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Contributions to the User Guide**:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Table of Contents numbering"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ![TableOfContents](../images/PPP-kevnw/tableofcontents.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Link Command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ![LinkCommand](../images/PPP-kevnw/linkmeeting.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * And others"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#98](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/98), [\\#69](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/69), [\\#134](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/134), [\\#132](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/132)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-T15-3/tp/issues/231), [2](https://github.com/AY2021S1-CS2103T-T15-3/tp/issues/233), [3](https://github.com/AY2021S1-CS2103T-T15-3/tp/issues/235))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Integrated a new Github pulgin (GuardRails) to the team repo"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  * Integrated a new Github plugin (CommitCheck) to the team repo"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevnw": 85
    }
  },
  {
    "path": "docs/team/lerxcl.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "title: Chua Chen Ler\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "## Project: Lifebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Lifebook is a desktop task management application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **New Feature**: Added the ability to filter tasks due at/before a specified date/time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * What it does: It allows users to search todos/meetings due at/before a certain date/time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Justification: This feature improves the product functionality because a user may have a long task-list and it could be hard to search for specific deadlines."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Highlights: The implementation of this feature requires accessing the task-list and each task\u0027s deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **New Feature**: Added ability to view tasks that are dueing soon (within 1 week)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * What it does: At the bottom right hand corner of Lifebook, a list of tasks is shown that are due 1 week from the current date/time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Justification: This feature improves the product usefulness as the user will be more inclined to use Lifebook for the ease of looking at tasks that are due soon."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Highlights: It is a little challenging to incorporate the \"Due by\" panel into Lifebook, and I have to ensure that the \"Due soon\" panel is updated dynamically each time the user does a task operation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **New Feature**: Add a common tag to both a contact and a task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * What it does: With a single command, you can add the same tag(s) to a particular contact and task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Justification: This feature helps to speed up the process of adding a tag to a contact and a task if the user decides to have a commonn tag."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Highlights: Instead of writing all new code, I have used the \"tagging\" feature for a contact and task (individually) to reduce chance of bugs and overlaps."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **New Feature**: Added ability to add a recurring task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * What it does: A recurring task is created when a user includes the optional `recurring/` field in adding a new todo/event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                  When a recurring task is marked as done, it will automatically generate another recurring task with the new deadline based on the recurrence field. (while the remaining details of the task remains the same)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Justification: This feature improves the product functionality as the user would not have to manually add recurring tasks every time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Highlights: I have to ensure that the recurring task is generated properly after it is marked as done. We have considered whether should the \"done\" recurrence task be deleted automatically too, but we decide to leave it in case the user wants to trace back their done tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003df12\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dlerxcl\u0026tabRepo\u003dAY2021S1-CS2103T-F12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Created release `v1.3(trial)` on [GitHub](https://github.com/AY2021S1-CS2103T-F12-4/tp/releases/tag/v1.3a)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Wrote tests for the basic task operations to increase coverage from 49.89% to 56.75% (Pull requests [\\#69](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/69))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Created EventBuilder and TodoBuilder, which is adapted after PersonBuilder in AB3."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Created TypicalTodos and TypicalEvents, which is adapted after TypicalPersons in AB3."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    These stubs are useful for testing task operations."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Wrote tests for:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    - Filter function [\\#71](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/71)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    - Recurring function [\\#98](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/98)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    - Common tag for contact and task [\\#132](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/132)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Modify GUI to show \"Recurring task\" [\\#125](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/125)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Modify GUI to show \"Due soon\" panel [\\#126](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/126)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Modify delete task command [\\#129](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/129)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Improve validation of date and time input when adding a task [\\#194](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/194)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Edited initial documentation to match Lifebook description. [\\#13](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/13)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Fix commands syntax (Pull requests [\\#78](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/78), [\\#88](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/88))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Added documentation for the features:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        - Filter function [\\#16](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/16)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        - Recurring function (Pull requests [\\#98](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/98), [\\#125](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/125))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        - Common tag for contact and task [\\#132](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/132)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Did cosmetic tweaks to command summary : [\\#138](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/138)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Update release link for v1.3a [\\#121](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/121)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Added MSS + use case for filter feature [\\#19](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/19)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Added MSS + use case for recurring task feature [\\#113](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/113)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Added implementation details of the `filter` feature. (Pull requests [\\#113](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/113), [\\#114](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/114), [\\#115](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/115))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * About Us:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Fix teammate\u0027s issue of image not showing up [\\#39](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/39)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * PRs reviewed: [\\#98](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/98), [\\#107](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/107), [\\#112](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/112), [\\#116](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/116), [\\#118](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/118), [\\#120](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/120), [\\#130](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/130), [\\#145](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/145), [\\#151](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/151)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  * Contributed to forum discussions:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    - Sharing tips: [Testing your application using Windows Sandbox](https://github.com/nus-cs2103-AY2021S1/forum/issues/227), [iP .jar tip](https://github.com/nus-cs2103-AY2021S1/forum/issues/174)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    - Asking for help: [Unable to display ✓ and ✘](https://github.com/nus-cs2103-AY2021S1/forum/issues/64)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lerxcl": 81
    }
  },
  {
    "path": "docs/team/luciatirta.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "title: Lucia Tirta Gunawan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "## Project: Lifebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Lifebook is a desktop task management application created as an assignment for a module that teaches Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Tagging of task**: Added tag field to `Tasks`, and include the tags during the creation of `Task`. ([\\#107](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/107))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * What it does: allows the user to add tags to `Todos` or `Events` during object creation and keep a record of them as the attribute of `Task` in the `TaskList`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Justification: allows user to label their tasks for better task organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Credits: inspired from the tagging of contact in AddressBook 3."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Find Contacts by Name or Tag, Find Events or Todos by Description or Tag**: Implemented the ability for users to find particular `Contacts`, `Events`, or `Todos` by name/description/tag. ([\\#200](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/200), [\\#109](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/109), [\\#80](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/80), [\\#55](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/55)). Find tag was previously show tag, but  then later merged with find name feature as suggested in the mock PE [\\#180](https://github.com/AY2021S1-CS2103T-F12-4/tp/issues/180)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * What it does: allows the user to find `Contact` by name or tag, and `Events` or `Todos` by description or tag."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Justification:  allows user to easily find a specific contact or task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Highlights: this requires predicate that can handle filter by name/description only, filter by tag only, and filter by both name/description and tag depending on the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Credits: inspired from find contact by name from AddressBook 3."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Overall GUI Layout and Styling**: Change the GUI theme, style the UI components to follow the layout in the previously designed mock UI. ([\\#130](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/130), [\\#82](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/82), [\\#76](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/76), [\\#56](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/56))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * What it does: Organise contacts and task in the tab panel which can automatically navigate to the corresponding tab on command execution, organise the panels with grid for better UI, make the UI responsive"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Justification:  allows users to easily access the contact and task by displaying the UI in a nice layout and style."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Highlights: made it easier for the developing team to visualise any features that they may have implemented. Implementing this GUI was challenging at first due to my unfamiliarity with JavaFx. The auto navigation of the tab panel requires additional field in the Command Result to indicate the tab a command corresponds to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Credits: the initial GUI implementation for the `TaskList` was inspired by the GUI of the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dluciatirta\u0026tabRepo\u003dAY2021S1-CS2103T-F12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Provide more meaningful error message, add exception handling to edit command and link command. [\\#136](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/136)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * Added documentation for the features: `find contact`, `find todo`, `find event`. [\\#221](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/221), [\\#40](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/40), [\\#36](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/36)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * Added implementation details, use cases, diagram of the `find contact, todo, event` feature. [\\#223](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/223), [\\#111](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/111), [\\#41](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/41)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * PRs reviewed and merged: [\\#54](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/54), [\\#78](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/78), [\\#207](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/207)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [\\#1](https://github.com/luciatirta/ped/issues/1), [\\#2](https://github.com/Caleblyx/ped/issues/2), [\\#3](https://github.com/Caleblyx/ped/issues/3))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luciatirta": 48
    }
  },
  {
    "path": "docs/team/urieltan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "title: Uriel Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "## Project: Lifebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Lifebook is a desktop task management application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Link Feature**: Added the ability to add a link to a task. (Pull requests [\\#86](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/86), [\\#100](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/100))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * What it does: allows the user to add a meeting link or collaborative link to a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Justification: This feature improves the product significantly because finding Zoom links or Google Drive links can be tedious for the users and the app should provide a convenient way for the users to find the links easily."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Highlights: This enhancement affects the model of the task. The implementation was quite challenging as UI matters must also be taken into consideration."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkevnw\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Setting up the GitHub team repository and website"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Added \u0027all\u0027 (refactored to \u0027task\u0027) to list feature (Pull request [\\#54](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/54))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Added optional to links in tasks for defensive programming (Pull request [\\#105](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/105))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Added tests for link classes in model (Pull request [\\#155](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/155))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * Added documentation for the features `link`. [\\#18](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/18)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * Added user stories and use case for the `link` feature. [\\#43](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/43/)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Contributions to the Developer Guide**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * Storage component documentation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Contributions to the User Guide**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * Link meeting command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * PRs reviewed: [\\#17](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/17), [\\#104](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/104), [\\#224](https://github.com/AY2021S1-CS2103T-F12-4/tp/pull/224)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-F13-3/tp/issues/183), [2](https://github.com/AY2021S1-CS2103T-F13-3/tp/issues/182), [3](https://github.com/AY2021S1-CS2103T-F13-3/tp/issues/184))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "urieltan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.storage.TaskListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Lifebook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskListStorage taskListStorage \u003d new JsonTaskListStorage(userPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Optional\u003cReadOnlyTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyTaskList initialTaskData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                logger.info(\"Address Book data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            taskListOptional \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (!taskListOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                logger.info(\"Task List data file not found. Will be starting with a sample TaskList\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialTaskData \u003d taskListOptional.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialTaskData \u003d new TaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialTaskData \u003d new TaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new ModelManager(initialAddressData, userPrefs, initialTaskData);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            logger.info(\"UserPrefs successfully saved. \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        logger.info(\"Starting Lifebook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            logger.info(\"UserPrefs successfully saved. \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 2,
      "lerxcl": 3,
      "caleblyx": 26,
      "-": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_EDIT_COMMAND \u003d \"Only edit contact, todo, and event are available\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_FIND_COMMAND \u003d \"Only find contact, todo, and event are available\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_ADD_COMMAND \u003d \"Only add contact, todo, and event are available\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String UNKNOWN_SHOW_TAG_COMMAND \u003d \"Only add contact, todo, and event are available \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_CLEAR_COMMAND \u003d \"Only clear contact is available\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String UNKNOWN_DELETE_COMMAND \u003d \"Only delete contact and task are available\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The person/task index provided is invalid \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"(Cannot be 0, negative number, or greater than person/task list\u0027s index!)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_INVALID_TODO_DISPLAYED_INDEX \u003d \"The todo index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_NOT_TODO \u003d \"The task at the given index is not a todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_NOT_EVENT \u003d \"The task at the given index is not an event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Date should be in DD-MM-YYYY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"and the numbers have to be valid!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"Time should be in HHmm and the numbers have to be valid!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String EXTRA_ARGUMENT_MESSAGE \u003d \"Extra parameter found! Please remove parameter: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String EXTRA_SINGULAR_ARGUMENT_MESSAGE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            \"Extra parameter found! Please have only 1 parameter: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 4,
      "kevnw": 6,
      "luciatirta": 5,
      "lerxcl": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    ObservableList\u003cTask\u003e getDueSoonTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 2,
      "caleblyx": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 5,
      "caleblyx": 7,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an item to lifebook.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [todo|event|contact]\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + COMMAND_WORD + \" [todo|event|contact] /h to see more.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Clears the Lifebook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Lifebook has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || other instanceof ClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "luciatirta": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** The category the command belongs to */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String category) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult(String feedbackToUser, String category) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this(feedbackToUser, false, false, category);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u0026\u0026 category \u003d\u003d otherCommandResult.category;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, category);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 14,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ContactTaskTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.edit.EditContactCommand.MESSAGE_DUPLICATE_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Adds a same tag to an existing person and task in the Lifebook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class ContactTaskTagCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contactTaskTag\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a same tag for a specified Person and Task.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Parameters: \" + PREFIX_TAG + \"TAG \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"CONTACT INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TASK_INDEX + \"TASK INDEX\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"CS2103T \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TASK_INDEX + \"2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_CONTACT_TASK_TAG_SUCCESS \u003d \"Created tag for \\n Person: %1$s, \\n Task: %2$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Index contactIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Index taskIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final EditPersonTags editPersonTags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final EditTaskTags editTaskTags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates a ContactTaskTagCommand to modify a Person and a Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param contactIndex index of the Person."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param taskIndex index of the Task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param editPersonTags the tag that is to be added to the person."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param editTaskTags the tag that is to be added to the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ContactTaskTagCommand(Index contactIndex, Index taskIndex,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                 EditPersonTags editPersonTags, EditTaskTags editTaskTags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(contactIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(taskIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.contactIndex \u003d contactIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.editPersonTags \u003d new EditPersonTags(editPersonTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.editTaskTags \u003d new EditTaskTags(editTaskTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        List\u003cPerson\u003e contactList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean isContactIndexValid \u003d contactIndex.getZeroBased() \u003e\u003d contactList.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean isCheckTaskIndexValid \u003d taskIndex.getZeroBased() \u003e\u003d taskList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (isContactIndexValid \u0026\u0026 isCheckTaskIndexValid) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (isContactIndexValid) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (isCheckTaskIndexValid) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Person personToEdit \u003d contactList.get(contactIndex.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task taskToEdit \u003d taskList.get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CONTACT_TASK_TAG_SUCCESS, editedPerson, editedTask), \"CONTACT\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (!(other instanceof ContactTaskTagCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ContactTaskTagCommand e \u003d (ContactTaskTagCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return contactIndex.equals(e.contactIndex)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 editPersonTags.equals(e.editPersonTags)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 taskIndex.equals(e.taskIndex)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 editTaskTags.equals(e.editTaskTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * edited with {@code editPersonTags}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonTags editPersonTags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d mergeSet(editPersonTags.getTags()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                .orElse(personToEdit.getTags()), personToEdit.getTags());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                personToEdit.getAddress(), updatedTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * edited with {@code editTaskTags}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskTags editTaskTags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d mergeSet(editTaskTags.getTags()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                .orElse(taskToEdit.getTags()), taskToEdit.getTags());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (taskToEdit.isTodo()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new Todo(taskToEdit.getDescription(), taskToEdit.getDeadline(), taskToEdit.getRecurrence(), ("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    (Todo) taskToEdit).getCollaborativeLink(), updatedTags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (taskToEdit.isEvent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new Event(taskToEdit.getDescription(), taskToEdit.getStart(), taskToEdit.getEnd(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    taskToEdit.getRecurrence(), updatedTags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            assert false : \"task is neither a todo or event!\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static class EditPersonTags {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public EditPersonTags() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public EditPersonTags(EditPersonTags toCopy) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Returns a tag set."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(tags) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!(other instanceof EditPersonTags)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            EditPersonTags e \u003d (EditPersonTags) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static class EditTaskTags {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public EditTaskTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public EditTaskTags(EditTaskTags toCopy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Returns a tag set."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(tags) : Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!(other instanceof EditTaskTags)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            EditTaskTags e \u003d (EditTaskTags) other;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Merges two sets of tags."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param currentTags current tags of a Person/Task."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param newTags new tags to be added to Person and Task."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return a merged set."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static \u003cTag\u003e Set\u003cTag\u003e mergeSet(Set\u003cTag\u003e currentTags, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (currentTags.equals(newTags)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return currentTags;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new HashSet\u003cTag\u003e() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    addAll(currentTags);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    addAll(newTags);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            };"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 279
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Marks a task identified using it\u0027s displayed index from the task list as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_MARK_TASK_AS_DONE_SUCCESS \u003d \"Task marked as done: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \": Marks the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Task taskToMark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (taskToMark.isRecurring()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Recurrence recurrence \u003d taskToMark.getRecurrence();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Set\u003cTag\u003e tags \u003d taskToMark.getTags();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String description \u003d taskToMark.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (taskToMark.isTodo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                LocalDateTime newDateTime \u003d taskToMark.getLocalDateTime().plus(taskToMark.getRecurrence().getValue(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        taskToMark.getRecurrence().getChronoUnit());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                if (taskToMark.getLink().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    model.addTask(new Todo(description, newDateTime, recurrence, tags));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    CollaborativeLink collaborativeLink \u003d ((Todo) taskToMark).getCollaborativeLink();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    model.addTask(new Todo(description, newDateTime, recurrence, collaborativeLink, tags));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                LocalDateTime newStartDateTime \u003d taskToMark.getStart()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        .plus(taskToMark.getRecurrence().getValue(), taskToMark.getRecurrence().getChronoUnit());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                LocalDateTime newEndDateTime \u003d taskToMark.getEnd()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        .plus(taskToMark.getRecurrence().getValue(), taskToMark.getRecurrence().getChronoUnit());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                if (taskToMark.getLink().isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    model.addTask(new Event(description, newStartDateTime, newEndDateTime, recurrence, tags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    MeetingLink currentMeeting \u003d ((Event) taskToMark).getMeetingLink();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    LocalDateTime newTiming \u003d currentMeeting.getLocalDateTime()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            .plus(taskToMark.getRecurrence().getValue(), taskToMark.getRecurrence().getChronoUnit());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    String meetingDescription \u003d currentMeeting.getDescription();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    int positionOfOldTiming \u003d meetingDescription.indexOf(\"(on: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    meetingDescription \u003d meetingDescription.substring(0, positionOfOldTiming - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    MeetingLink newMeeting \u003d new MeetingLink(meetingDescription, currentMeeting.getUrl(), newTiming);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    model.addTask(new Event(description, newStartDateTime, newEndDateTime,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            recurrence, newMeeting, tags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.markAsDone(taskToMark);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_TASK_AS_DONE_SUCCESS, taskToMark), \"TASK\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 9,
      "caleblyx": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit todos, events or contacts.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [todo|contact|event]\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + COMMAND_WORD + \" [todo|event|contact] /h to see more.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, \"EXIT\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find todos, events or contacts.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [todo|contact|event]\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + COMMAND_WORD + \" [todo|event|contact] /h to see more.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, \"HELP\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public abstract class LinkCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"link\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a link to your todo or event\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [meeting|doc]\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + COMMAND_WORD + \" [meeting|doc] /h to see more.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 9,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all items in events, todos or contacts\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [todo|event|contact|task]\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" todo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort items of lifebook.\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [contact|task|clear]\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" [contact|task|clear]\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" task\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 4,
      "caleblyx": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommand extends AddCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" contact: Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" contact \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public AddContactCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), \"CONTACT\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 64,
      "luciatirta": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Adds a event to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" event: Adds a event to the TaskList. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_STARTDATE + \"STARTDATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_STARTTIME + \"STARTTIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_ENDDATE + \"ENDDATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_ENDTIME + \"ENDTIME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \" [\" + PREFIX_RECURRING + \"RECURRING] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" event \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Attend meeting \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_STARTDATE + \"10-11-2020 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_STARTTIME + \"1200 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_ENDDATE + \"10-11-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_ENDTIME + \"1400 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TAG + \"CS2103T\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String DATE_TIME_USAGE \u003d \"Date and time format should be: startdate/DD-MM-YYYY \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"starttime/HHmm (24-hour) enddate/DD-MM-YYYY endtime/HHmm (24-hour)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDescriptionDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 36,
      "luciatirta": 17,
      "lerxcl": 12,
      "caleblyx": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Adds a todo to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" todo: Adds a todo to the TodoList. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"[\" + PREFIX_RECURRING + \"RECURRING] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" todo \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Finish assignment \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DATE + \"23-11-2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TIME + \"2359 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TAG + \"CS2100\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String DATE_TIME_USAGE \u003d \"Date and time format should be: date/DD-MM-YYYY time/HHmm (24-hour)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This todo already exists in the TodoList\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Todo toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Todo}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public AddTodoCommand(Todo todo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        toAdd \u003d todo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.addTodo(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDescriptionDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof AddTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTodoCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 36,
      "luciatirta": 17,
      "lerxcl": 6,
      "caleblyx": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DeleteContactCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" contact\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" contact 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete), \"CONTACT\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 50,
      "luciatirta": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" task\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed TaskList.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" task 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.deleteTodo(taskToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete), \"TASK\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 34,
      "luciatirta": 1,
      "lerxcl": 8,
      "caleblyx": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/due/DueAtCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands.due;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueAtPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Finds all tasks (Todos and Events) that are due at a given date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueAtCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemsDueAt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \": Shows Todos/Events due at a certain date and time.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"DD-MM-YYYY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"HHmm \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"12-12-2020 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"2359\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the list of Todos/Events due at: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueAtPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueAtCommand(DueAtPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, predicate.getDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueAtCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 predicate.equals(((DueAtCommand) other).predicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/due/DueBeforeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands.due;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Finds all tasks (Todos and Events) that are due before a given date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemsDueBefore\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \": Shows Todos/Events due before a certain date and time.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"DD-MM-YYYY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"HHmm \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"12-12-2020 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"2359\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the list of Todos/Events due before: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueBeforePredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueBeforeCommand(DueBeforePredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, predicate.getDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueBeforeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 predicate.equals(((DueBeforeCommand) other).predicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Edits the details of an existing person in the Lifebook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditContactCommand extends EditCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" contact: Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" contact \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EditContactCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), \"CONTACT\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 222,
      "luciatirta": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Edits the details of an existing event in the Lifebook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditEventCommand extends EditCommand {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" event: Edits the details of the event identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"STARTDATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"STARTTIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"ENDDATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"ENDTIME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" event \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_DESCRIPTION + \"A new description \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_STARTDATE + \"20-01-2020 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_STARTTIME + \"2350 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_ENDDATE + \"23-01-2020 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_ENDTIME + \"2359\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the Lifebook.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final EditEventCommand.EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param index of the event in the filtered task list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EditEventCommand(Index index, EditEventCommand.EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventCommand.EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (lastShownList.get(index.getZeroBased()).getClass() !\u003d Event.class) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX_NOT_EVENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event eventToEdit \u003d (Event) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasTask(editedEvent)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.setTask(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent), \"TASK\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates and returns a {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * edited with {@code editEventDescriptor}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                                         EditEventCommand.EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String description \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String previousStartDateTime \u003d eventToEdit.getStartTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String startDate \u003d editEventDescriptor.getStartDate().orElse(previousStartDateTime.split(\" \")[0]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String startTime \u003d editEventDescriptor.getStartTime().orElse(previousStartDateTime.split(\" \")[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String previousEndDateTime \u003d eventToEdit.getEndTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String endDate \u003d editEventDescriptor.getEndDate().orElse(previousEndDateTime.split(\" \")[0]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String endTime \u003d editEventDescriptor.getEndTime().orElse(previousEndDateTime.split(\" \")[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(eventToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (eventToEdit.getLink().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            MeetingLink link \u003d eventToEdit.getMeetingLink();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (eventToEdit.hasRecurrence()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(eventToEdit.getStatus(), description, startDate + \" \" + startTime,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        endDate + \" \" + endTime, link, eventToEdit.getRecurrence(), updatedTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(eventToEdit.getStatus(), description,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        startDate + \" \" + startTime, endDate + \" \" + endTime, link, updatedTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (eventToEdit.hasRecurrence()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(eventToEdit.getStatus(), description, startDate + \" \" + startTime,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        endDate + \" \" + endTime, eventToEdit.getRecurrence(), updatedTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(eventToEdit.getStatus(), description,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        startDate + \" \" + startTime, endDate + \" \" + endTime, updatedTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String startDate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String startTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String endDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String endTime;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditEventDescriptor(EditEventCommand.EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, startDate, startTime, endDate, endTime, tags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setStartDate(String startDate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getStartDate() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getStartTime() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setEndDate(String endDate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getEndDate() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getEndTime() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!(other instanceof EditEventCommand.EditEventDescriptor)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditEventCommand.EditEventDescriptor e \u003d (EditEventCommand.EditEventDescriptor) other;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 245,
      "luciatirta": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Edits the details of an existing todo in the Lifebook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditTodoCommand extends EditCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" todo: Edits the details of the todo identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" todo \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_DESCRIPTION + \"A new description \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_DATE + \"20-01-2020 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_TIME + \"2350\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_EDIT_TODO_SUCCESS \u003d \"Edited Todo: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This todo already exists in the Lifebook.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final EditTodoCommand.EditTodoDescriptor editTodoDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param index of the todo in the filtered task list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param editTodoDescriptor details to edit the todo with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EditTodoCommand(Index index, EditTodoCommand.EditTodoDescriptor editTodoDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(editTodoDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.editTodoDescriptor \u003d new EditTodoCommand.EditTodoDescriptor(editTodoDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (lastShownList.get(index.getZeroBased()).getClass() !\u003d Todo.class) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX_NOT_TODO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo todoToEdit \u003d (Todo) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo editedTodo \u003d createEditedTodo(todoToEdit, editTodoDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!todoToEdit.isSameTodo(editedTodo) \u0026\u0026 model.hasTask(editedTodo)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.setTask(todoToEdit, editedTodo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TODO_SUCCESS, editedTodo), \"TASK\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates and returns a {@code Todo} with the details of {@code todoToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * edited with {@code editTodoDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static Todo createEditedTodo(Todo todoToEdit,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                                             EditTodoCommand.EditTodoDescriptor editTodoDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert todoToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String description \u003d editTodoDescriptor.getDescription().orElse(todoToEdit.getDescription());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String previousDateTime \u003d todoToEdit.getInputDate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String date \u003d editTodoDescriptor.getDate().orElse(previousDateTime.split(\" \")[0]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String time \u003d editTodoDescriptor.getTime().orElse(previousDateTime.split(\" \")[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTodoDescriptor.getTags().orElse(todoToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (todoToEdit.getLink().isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CollaborativeLink link \u003d todoToEdit.getCollaborativeLink();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (todoToEdit.hasRecurrence()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Todo(todoToEdit.getStatus(), description,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        date + \" \" + time, link, todoToEdit.getRecurrence(), updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Todo(todoToEdit.getStatus(), description, date + \" \" + time, link, updatedTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (todoToEdit.hasRecurrence()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Todo(todoToEdit.getStatus(), description,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        date + \" \" + time, todoToEdit.getRecurrence(), updatedTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Todo(todoToEdit.getStatus(), description, date + \" \" + time, updatedTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!(other instanceof EditTodoCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand e \u003d (EditTodoCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 editTodoDescriptor.equals(e.editTodoDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Stores the details to edit the todo with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * corresponding field value of the todo."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static class EditTodoDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String date;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private String time;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditTodoDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditTodoDescriptor(EditTodoCommand.EditTodoDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            System.out.print(tags \u003d\u003d null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, date, time, tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setDate(String date) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getDate() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTime(String time) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cString\u003e getTime() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!(other instanceof EditTodoCommand.EditTodoDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditTodoCommand.EditTodoDescriptor e \u003d (EditTodoCommand.EditTodoDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 220,
      "luciatirta": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the name keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * and the tag matches the given tag keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindContactCommand extends FindCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" contact\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"the specified name keywords and the tag matches the given tag keyword (case-insensitive) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Parameters: [\" + PREFIX_NAME + \"NAME_KEYWORD [MORE_NAME_KEYWORDS]...] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG_KEYWORD]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Remarks: at least one of \" + PREFIX_NAME + \" or \" + PREFIX_TAG + \" must be included in the command. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Keyword cannot be empty\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" contact \" + PREFIX_NAME + \"alice bob charlie \" + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final ContactMatchesFindKeywordPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public FindContactCommand(ContactMatchesFindKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \"CONTACT\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof FindContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 33,
      "luciatirta": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Finds and lists all events in lifebook whose description contains any of the desc keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * and the tag matches the given tag keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindEventCommand extends FindCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" event\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \": Finds all events whose descriptions contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"the specified desc keywords and the tag matches the given tag keyword (case-insensitive) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Parameters: [\" + PREFIX_DESCRIPTION + \"DESC_KEYWORD [MORE_DESC_KEYWORDS]...] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG_KEYWORD]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Remarks: at least one of \" + PREFIX_DESCRIPTION + \" or \" + PREFIX_TAG + \" must be included in the command. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Keyword cannot be empty\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" event \" + PREFIX_DESCRIPTION + \"attend meeting \" + PREFIX_TAG + \"urgent\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final TaskMatchesFindKeywordPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public FindEventCommand(TaskMatchesFindKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()), \"TASK\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 30,
      "luciatirta": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Finds and lists all todos in address book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindTodoCommand extends FindCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" todo\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \": Finds all todos whose descriptions contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"the specified desc keywords and the tag matches the given tag keyword (case-insensitive) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Parameters: [\" + PREFIX_DESCRIPTION + \"DESC_KEYWORD [MORE_DESC_KEYWORDS]...] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG_KEYWORD]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Remarks: at least one of \" + PREFIX_DESCRIPTION + \" or \" + PREFIX_TAG + \" must be included in the command. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Keyword cannot be empty\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" todo \" + PREFIX_DESCRIPTION + \"assignment \" + PREFIX_TAG + \"CS2100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final TaskMatchesFindKeywordPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public FindTodoCommand(TaskMatchesFindKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()), \"TASK\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof FindTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTodoCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 32,
      "luciatirta": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/link/LinkCollaborativeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.link;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Add a Collaborative link to a todo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class LinkCollaborativeCommand extends LinkCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" doc: Add collaborative link to todo. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_URL + \"URL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"INDEX\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"proposal \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_URL + \"https://docs.google.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New collaborative folder link added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final CollaborativeLink collaborativeLink;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates an LinkCollaborativeCommand to add collaborative link to a {@code Todo}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public LinkCollaborativeCommand(Index index, CollaborativeLink collaborativeLink) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(collaborativeLink);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d collaborativeLink;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (lastShownList.get(index.getZeroBased()).getClass() !\u003d Todo.class) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_INDEX_NOT_TODO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Todo todoToEdit \u003d (Todo) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Todo editedTodo;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (todoToEdit.getRecurrence() !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                editedTodo \u003d new Todo(todoToEdit.getDescription(), todoToEdit.getDeadline(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        todoToEdit.getRecurrence(), collaborativeLink, todoToEdit.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                editedTodo \u003d new Todo(todoToEdit.getDescription(), todoToEdit.getDeadline(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    collaborativeLink, todoToEdit.getTags());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            model.setTask(todoToEdit, editedTodo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX_NOT_TODO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, collaborativeLink.getDescription()), \"TASK\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof LinkCollaborativeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 collaborativeLink.equals(((LinkCollaborativeCommand) other).collaborativeLink));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 70,
      "luciatirta": 11,
      "lerxcl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/link/LinkMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.commands.link;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Add a meeting link to an event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class LinkMeetingCommand extends LinkCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" meeting: Add meeting link to event. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_URL + \"URL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TIME + \"TIME\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" meeting \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"workshop \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_URL + \"https://www.youtube.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DATE + \"29-10-2020 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TIME + \"1200\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final MeetingLink meetingLink;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates a LinkMeetingCommand to add the meeting link to an {@code Event}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public LinkMeetingCommand(Index index, MeetingLink meetingLink) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        requireNonNull(meetingLink);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingLink \u003d meetingLink;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (lastShownList.get(index.getZeroBased()).getClass() !\u003d Event.class) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_INDEX_NOT_EVENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Event eventToEdit \u003d (Event) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Event editedEvent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (eventToEdit.getRecurrence() !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editedEvent \u003d new Event(eventToEdit.getDescription(), eventToEdit.getStartTime(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        eventToEdit.getEndTime(), eventToEdit.getRecurrence(), meetingLink, eventToEdit.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editedEvent \u003d new Event(eventToEdit.getDescription(), eventToEdit.getStartTime(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        eventToEdit.getEndTime(), meetingLink, eventToEdit.getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            model.setTask(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX_NOT_EVENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, meetingLink.getDescriptionDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                || (other instanceof LinkMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                \u0026\u0026 meetingLink.equals(((LinkMeetingCommand) other).meetingLink));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 66,
      "kevnw": 14,
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListContactCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || other instanceof ListContactCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 22,
      "luciatirta": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskTypeMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Lists all events in the task list to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListEventCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String EVENT_KEYWORD \u003d \"Event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cString\u003e keyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        keyword.add(EVENT_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredTaskList(new TaskTypeMatchesKeywordsPredicate(keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || other instanceof ListEventCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 20,
      "luciatirta": 7,
      "caleblyx": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Lists all tasks in the task list to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ListTaskCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || other instanceof ListTaskCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 21,
      "luciatirta": 9,
      "caleblyx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskTypeMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Lists all todos in the task list to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListTodoCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String TODO_KEYWORD \u003d \"Todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cString\u003e keyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        keyword.add(TODO_KEYWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredTaskList(new TaskTypeMatchesKeywordsPredicate(keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || other instanceof ListTodoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 19,
      "luciatirta": 7,
      "caleblyx": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Clears all sorting from both displayed lists."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortClearCommand extends SortCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all sorting \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_LISTS \u003d \"Both lists are currently empty. Please add items to adjust \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"sorting.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASKLIST \u003d \"The task list is currently empty. Please add tasks to adjust \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"its sorting. Person list sorting cleared.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_ADDRESSBOOK \u003d \"The person list is currently empty. Please add contacts \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"to adjust its sorting. Task list sorting cleared.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All sorting cleared\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (model.filteredTaskListIsEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (model.filteredAddressBookIsEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (model.taskListIsEmpty() \u0026\u0026 model.addressBookIsEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_LISTS, \"CONTACT\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (model.taskListIsEmpty() \u0026\u0026 !model.addressBookIsEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_TASKLIST, \"CONTACT\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (!model.taskListIsEmpty() \u0026\u0026 model.addressBookIsEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_ADDRESSBOOK, \"CONTACT\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof SortClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.PersonNameComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Sorts contact list in alphabetical order."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortContactCommand extends SortCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts contacts by name \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted contacts by name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_FILTERED_PERSON_LIST \u003d \"The list is empty. Displaying an unfiltered\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \" sorted person\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \" list instead.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_PERSON_LIST \u003d \"The person list is empty. Please add persons to sort them.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Comparator\u003cPerson\u003e comparator \u003d new PersonNameComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (model.filteredAddressBookIsEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            model.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (model.filteredAddressBookIsEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                return new CommandResult(MESSAGE_EMPTY_PERSON_LIST, \"CONTACT\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                return new CommandResult(MESSAGE_EMPTY_FILTERED_PERSON_LIST, \"CONTACT\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof SortContactCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskDateComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Sorts task list according to date and time in ascending order."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortTaskCommand extends SortCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts tasks by date \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted tasks by date\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_FILTERED_TASK_LIST \u003d \"The list is empty. Displaying an unfiltered\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \" sorted task\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \" list instead.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_LIST \u003d \"The task list is empty. Please add tasks to sort them.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Comparator\u003cTask\u003e comparator \u003d new TaskDateComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(comparator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (model.filteredTaskListIsEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            model.updateSortedTaskList(comparator);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (model.filteredTaskListIsEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                return new CommandResult(MESSAGE_EMPTY_TASK_LIST, \"TASK\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                return new CommandResult(MESSAGE_EMPTY_FILTERED_TASK_LIST, \"TASK\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof SortTaskCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.DAY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.MONTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.WEEK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.YEAR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (splitArgs[0].trim().split(\" \")[0].trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_NAME,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddContactCommand(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            PREFIX_DATE, PREFIX_TIME, PREFIX_RECURRING, PREFIX_TAG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String date \u003d argMultimap.getValue(PREFIX_DATE).get().trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String time \u003d argMultimap.getValue(PREFIX_TIME).get().trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkDateValidity(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkTimeValidity(time);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String deadline \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Todo todo;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_RECURRING)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String recurrenceInput \u003d argMultimap.getValue(PREFIX_RECURRING).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (checkChronoUnitValidity(recurrenceTimePeriod)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            \u0026\u0026 checkRecurrenceValueValidity(recurrenceValue)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        Recurrence recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        todo \u003d new Todo(description, deadline, recurrence, tagList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                todo \u003d new Todo(description, deadline, tagList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddTodoCommand(todo);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (splitArgs[0].trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME, PREFIX_RECURRING, PREFIX_TAG);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_STARTDATE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String stDate \u003d argMultimap.getValue(PREFIX_STARTDATE).get().trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String stTime \u003d argMultimap.getValue(PREFIX_STARTTIME).get().trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String endDate \u003d argMultimap.getValue(PREFIX_ENDDATE).get().trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String endTime \u003d argMultimap.getValue(PREFIX_ENDTIME).get().trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkDateValidity(stDate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkTimeValidity(stTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkDateValidity(endDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkTimeValidity(endTime);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String stDateTime \u003d stDate + \" \" + stTime;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String endDateTime \u003d endDate + \" \" + endTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_RECURRING)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String recurrenceInput \u003d argMultimap.getValue(PREFIX_RECURRING).get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (checkChronoUnitValidity(recurrenceTimePeriod)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            \u0026\u0026 checkRecurrenceValueValidity(recurrenceValue)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        Recurrence recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        event \u003d new Event(description, stDateTime, endDateTime, recurrence, tagList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                event \u003d new Event(description, stDateTime, endDateTime, tagList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddEventCommand(event);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException(AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns true if the recurrence unit is day/week/month/year."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrenceTimePeriod input by user"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static boolean checkChronoUnitValidity(String recurrenceTimePeriod) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return recurrenceTimePeriod.equals(DAY) || recurrenceTimePeriod.equals(WEEK)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || recurrenceTimePeriod.equals(MONTH) || recurrenceTimePeriod.equals(YEAR);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns true if the recurrence value is \u003e 0."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param value input by user"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static boolean checkRecurrenceValueValidity(Integer value) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return value \u003e 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 25,
      "kevnw": 11,
      "luciatirta": 7,
      "lerxcl": 65,
      "caleblyx": 33,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueAtCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        case LinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return new LinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        case DueBeforeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new DueBeforeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        case DueAtCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new DueAtCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        case ContactTaskTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new ContactTaskTagParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 2,
      "lerxcl": 14,
      "caleblyx": 6,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_SINGULAR_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static ArgumentMultimap tokenize (String argsString, Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        List\u003cPrefixPosition\u003e allPrefixPositions \u003d findEveryPrefixPositions(argsString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // Check that there are no extra prefixes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        for (PrefixPosition prefixPosX : allPrefixPositions) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            boolean isPrefixExist \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            for (PrefixPosition prefixPosY : positions) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                if (prefixPosX.equals(prefixPosY)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    isPrefixExist \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (!isPrefixExist) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(EXTRA_ARGUMENT_MESSAGE, prefixPosX));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        List\u003cPrefix\u003e singularPrefixList \u003d positions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .map(PrefixPosition::getPrefix)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .filter(CliSyntax::isPrefixSingular)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        List\u003cPrefix\u003e checkDuplicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        for (Prefix prefix : singularPrefixList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (checkDuplicateList.stream().anyMatch(prefix::equals)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE, prefix));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                checkDuplicateList.add(prefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Finds every zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Primarily used for finding out prefixes that don\u0027t fit."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findEveryPrefixPositions(String argsString) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String regex \u003d \" [a-zA-Z]*/\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Pattern p \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        ArrayList\u003cPrefixPosition\u003e everyPrefixPosition \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Matcher m \u003d p.matcher(argsString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            everyPrefixPosition.add(new PrefixPosition(new Prefix(argsString.substring(m.start() + 1, m.end())),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    m.start() + 1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return everyPrefixPosition;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (!(obj instanceof PrefixPosition)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            PrefixPosition otherPrefix \u003d (PrefixPosition) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return otherPrefix.getPrefix().equals(getPrefix())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    \u0026\u0026 startPosition \u003d\u003d otherPrefix.getStartPosition();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return prefix.toString();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 76,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_CLEAR_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (splitArgs[0].trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(UNKNOWN_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException(UNKNOWN_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final Prefix PREFIX_URL \u003d new Prefix(\"url/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"startdate/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"starttime/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"enddate/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"endtime/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Prefix PREFIX_RECURRING \u003d new Prefix(\"recurring/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_INDEX \u003d new Prefix(\"contactIndex/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Prefix PREFIX_TASK_INDEX \u003d new Prefix(\"taskIndex/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final Prefix[] PLURAL_PREFIX_ARRAY \u003d {PREFIX_TAG};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static boolean isPrefixSingular(Prefix p) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return !Arrays.asList(PLURAL_PREFIX_ARRAY).contains(p);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 9,
      "lerxcl": 3,
      "caleblyx": 7,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ContactTaskTagParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditPersonTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditTaskTags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Parses input arguments and creates a new ContactTaskTagCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class ContactTaskTagParser implements Parser\u003cContactTaskTagCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ContactTaskTagCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * and returns an ContactTaskTagCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ContactTaskTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (splitArgs.length \u003c 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    ContactTaskTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + splitArgs[0], PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                PREFIX_CONTACT_INDEX, PREFIX_TASK_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        List\u003cString\u003e tag \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (tag.size() \u003c 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    ContactTaskTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Index contactIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Index taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            EditPersonTags editPersonTags \u003d new EditPersonTags();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            editPersonTags.setTags(ParserUtil.parseTags(tag));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            EditTaskTags editTaskTags \u003d new EditTaskTags();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            editTaskTags.setTags(ParserUtil.parseTags(tag));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new ContactTaskTagCommand(contactIndex, taskIndex, editPersonTags, editTaskTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (NoSuchElementException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    ContactTaskTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_DELETE_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(splitArgs[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (splitArgs[0].trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (splitArgs[0].trim().equals(\"task\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(UNKNOWN_DELETE_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (args.contains(\"task\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (args.contains(\"contact\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(UNKNOWN_DELETE_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 10,
      "luciatirta": 3,
      "lerxcl": 7,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DueAtCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueAtCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueAtPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Parses input arguments and creates a new DueAtCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueAtCommandParser implements Parser\u003cDueAtCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DueAtCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * and returns a DueAtCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueAtCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + splitArgs[0], PREFIX_DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            PREFIX_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String date \u003d argMultimap.getValue(PREFIX_DATE).orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueAtCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDate checkDate \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String time \u003d argMultimap.getValue(PREFIX_TIME).orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueAtCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalTime checkTime \u003d LocalTime.parse(time, timeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String deadline \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DueAtCommand(new DueAtPredicate(deadline));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DueBeforeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Parses input arguments and creates a new DueBeforeCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeCommandParser implements Parser\u003cDueBeforeCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DueBeforeCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * and returns a DueBeforeCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueBeforeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(\" \" + splitArgs[0], PREFIX_DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                PREFIX_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String date \u003d argMultimap.getValue(PREFIX_DATE).orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDate checkDate \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String time \u003d argMultimap.getValue(PREFIX_TIME).orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalTime checkTime \u003d LocalTime.parse(time, timeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String deadline \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DueBeforeCommand(new DueBeforePredicate(deadline));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_EDIT_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditEventCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditTodoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditTodoCommand.EditTodoDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (splitArgs[0].equals(\"contact\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        EditContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_INDEX, PREFIX_NAME,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    EditContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new EditContactCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    EditTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_INDEX, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    EditTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        EditTodoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditTodoDescriptor editTodoDescriptor \u003d new EditTodoDescriptor();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String date \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setDate(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String time \u003d argMultimap.getValue(PREFIX_TIME).get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setTime(time);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTodoDescriptor::setTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!editTodoDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(EditTodoCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new EditTodoCommand(index, editTodoDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    EditEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_INDEX, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!argMultimap.getValue(PREFIX_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    EditEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_STARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setStartTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ENDDATE).isPresent()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setEndDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setEndTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException(UNKNOWN_EDIT_COMMAND);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 96,
      "luciatirta": 25,
      "lerxcl": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_FIND_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindTodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (splitArgs[0].equals(\"contact\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2 || splitArgs[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (areAllPrefixesNotPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (name.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (tagKeywords.length !\u003d 1 || tagKeywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindContactCommand(new ContactMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Arrays.asList(nameKeywords), tagKeywords[0]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (name.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindContactCommand(new ContactMatchesFindKeywordPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (keywords.length !\u003d 1 || keywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindContactCommand(new ContactMatchesFindKeywordPredicate(keywords[0]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2 || splitArgs[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (areAllPrefixesNotPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TAG)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String desc \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (desc.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] descKeywords \u003d desc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (tagKeywords.length !\u003d 1 || tagKeywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindTodoCommand(new TaskMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Arrays.asList(descKeywords), tagKeywords[0]));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String desc \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (desc.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] descKeywords \u003d desc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindTodoCommand(new TaskMatchesFindKeywordPredicate(Arrays.asList(descKeywords)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (keywords.length !\u003d 1 || keywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindTodoCommand(new TaskMatchesFindKeywordPredicate(keywords[0]));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2 || splitArgs[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (areAllPrefixesNotPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TAG)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String desc \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (desc.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] descKeywords \u003d desc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (tagKeywords.length !\u003d 1 || tagKeywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindEventCommand(new TaskMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Arrays.asList(descKeywords), tagKeywords[0]));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String desc \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (desc.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] descKeywords \u003d desc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindEventCommand(new TaskMatchesFindKeywordPredicate(Arrays.asList(descKeywords)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (keywords.length !\u003d 1 || keywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new FindEventCommand(new TaskMatchesFindKeywordPredicate(keywords[0]));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException(UNKNOWN_FIND_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns true if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static boolean areAllPrefixesNotPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e !argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 20,
      "luciatirta": 142,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LinkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.link.LinkCollaborativeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.link.LinkMeetingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class LinkCommandParser implements Parser\u003cLinkCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LinkCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * and returns an LinkCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public LinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (splitArgs[0].trim().split(\" \")[0].trim().equals(\"meeting\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    LinkMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                            PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        LinkMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String date \u003d argMultimap.getValue(PREFIX_DATE).get().trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String time \u003d argMultimap.getValue(PREFIX_TIME).get().trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkDateValidity(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ParserUtil.checkTimeValidity(time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String url \u003d argMultimap.getValue(PREFIX_URL).get().trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String meetingTime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get().trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ParserUtil.validateLink(url);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            MeetingLink meetingLink \u003d ParserUtil.parseMeetingLink(description, url, meetingTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return new LinkMeetingCommand(index, meetingLink);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].trim().split(\" \")[0].trim().equals(\"doc\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    LinkCollaborativeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        LinkCollaborativeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String url \u003d argMultimap.getValue(PREFIX_URL).get().trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get().trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ParserUtil.validateLink(url);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CollaborativeLink collaborativeLink \u003d ParserUtil.parseCollaborativeLink(description, url);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new LinkCollaborativeCommand(index, collaborativeLink);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException(LinkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 63,
      "kevnw": 23,
      "luciatirta": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.list.ListTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListTodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (args.trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListContactCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (args.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListTodoCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (args.trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else if (args.trim().equals(\"task\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 6,
      "kevnw": 27,
      "luciatirta": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIME_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Link;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Validates a {@code String url} an returns a {@Code Boolean}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @throws ParseException if the given {@code String url} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static boolean validateLink(String url) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        boolean isValid \u003d Link.isValidUrl(trimmedUrl);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException((Link.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a Collaborative Link that is guaranteed to have a valid URL."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description The description of the Collaborative Link"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url The url to the Collaborative Folder"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return A Collaborative Link object with description and url"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static CollaborativeLink parseCollaborativeLink(String description, String url) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CollaborativeLink(description, trimmedUrl);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a Meeting Link that is guaranteed to have a valid URL."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description The description of the Meeting Link"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url The url to the Meeting"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param meetingTime The meeting time"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return A Meeting Link object with description, url, and meeting time"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static MeetingLink parseMeetingLink(String description, String url, String meetingTime) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(description, meetingTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new MeetingLink(description, trimmedUrl, meetingTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Checks if date input is valid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param date input by user"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void checkDateValidity(String date) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            LocalDate checkDate \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Checks if time input is valid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param time input by user"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void checkTimeValidity(String time) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            LocalTime checkTime \u003d LocalTime.parse(time, timeFormat);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 33,
      "kevnw": 46,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (args.trim().equals(\"task\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortTaskCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (args.trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortContactCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (args.trim().equals(\"clear\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortClearCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return persons.isEmpty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 3,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void addTodo(Todo todo);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Replaces the given Task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing Task in the life book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void deleteTodo(Task task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void deleteEvent(Task task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    ObservableList\u003cTask\u003e getDueSoonTaskList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void markAsDone(Task target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    boolean filteredTaskListIsEmpty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    boolean filteredAddressBookIsEmpty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    boolean taskListIsEmpty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    boolean addressBookIsEmpty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 7,
      "lerxcl": 4,
      "caleblyx": 31,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.time.temporal.ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final SortedList\u003cPerson\u003e sortedPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final SortedList\u003cTask\u003e sortedTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final FilteredList\u003cTask\u003e dueSoonTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(sortedPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedTasks \u003d new SortedList\u003c\u003e(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(sortedTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dueSoonTasks \u003d new FilteredList\u003c\u003e(sortedTasks, task -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (task.getStatus()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                LocalDateTime currentDateTimePlusOneWeek \u003d LocalDateTime.now().plus(1, WEEKS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                if (task instanceof Todo) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    deadline \u003d task.getEnd();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                assert deadline !\u003d null : \"Task\u0027s deadline is not defined properly!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return deadline.isBefore(currentDateTimePlusOneWeek) \u0026\u0026 deadline.isAfter(LocalDateTime.now());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean filteredAddressBookIsEmpty() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return filteredPersons.isEmpty();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean addressBookIsEmpty() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return addressBook.isEmpty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedPersons.setComparator(personComparator);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.addTask(event);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.addTask(task);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.removeTask(task);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.removeTask(task);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.taskList.hasTask(task);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskList.markAsDone(target);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean filteredTaskListIsEmpty() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return filteredTasks.isEmpty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean taskListIsEmpty() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskList.isEmpty();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return dueSoonTasks;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedTasks.setComparator(taskComparator);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 25,
      "caleblyx": 96,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public interface ReadOnlyTaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskList implements ReadOnlyTaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskList(ReadOnlyTaskList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void resetData(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 this.tasks.equals(((TaskList) other).tasks));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.tasks.markAsDone(target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Path taskListFilePath \u003d Paths.get(\"data\", \"tasklist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskListFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTaskListFilePath (Path taskListFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskListFilePath \u003d taskListFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 8,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactMatchesFindKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} and {@code Name} matches the tag keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ContactMatchesFindKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final List\u003cString\u003e keywordName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final String keywordTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword tag to contact\u0027s tag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordTag the keyword for the tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ContactMatchesFindKeywordPredicate(String keywordTag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // make sure keyword is only one word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert !keywordTag.contains(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordTag \u003d keywordTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword name to contact\u0027s name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordName the keyword for the name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ContactMatchesFindKeywordPredicate(List\u003cString\u003e keywordName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordName \u003d keywordName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordTag \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword name and tag to contact\u0027s name and tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordName the keyword for the name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordTag the keyword for the tag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ContactMatchesFindKeywordPredicate(List\u003cString\u003e keywordName, String keywordTag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // make sure keyword is only one word"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert !keywordTag.contains(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordTag \u003d keywordTag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordName \u003d keywordName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        boolean matchName \u003d keywordName.size() \u003d\u003d 0 || keywordName.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        boolean matchTag \u003d keywordTag \u003d\u003d \"\" || person.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .anyMatch(keyword -\u003e this.keywordTag.trim().toLowerCase().equals(keyword.tagName.trim().toLowerCase()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return matchName \u0026\u0026 matchTag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof ContactMatchesFindKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 keywordName.equals(((ContactMatchesFindKeywordPredicate) other).keywordName) // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 keywordTag.equals(((ContactMatchesFindKeywordPredicate) other).keywordTag));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonNameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class PersonNameComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return o1.getName().fullName.compareTo(o2.getName().fullName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 3,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/CollaborativeLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class CollaborativeLink extends Link {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CollaborativeLink() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this(\"No collaborative link\", \"-\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CollaborativeLink(String description, String url) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, url);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a String representation of the Collaborative Link."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * This representation includes the description and url in the format of outputFormatter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return a String representation of the Collaborative Link."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return getDescription() + \" \" + getUrl();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a boolean value indicating if the Collaborative Link is equal to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * another object by determining if descriptions and url parameters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param o an object that is compared to the Collaborative Link to determine if both are equal"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return true or false if the Collaborative Link is equal or not equal to the object respectively."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (o instanceof CollaborativeLink) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CollaborativeLink link \u003d (CollaborativeLink) o;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            boolean isEqual \u003d this.getDescription().equals(link.getDescription())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 this.getUrl().equals(link.getUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return isEqual;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueAtPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Checks for every task (To-do and event) that is due at the given date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueAtPredicate extends DuePredicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueAtPredicate(String strDeadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(strDeadline);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return task.getLocalDateTime().isEqual(deadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueAtPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 deadline.equals(((DueAtPredicate) other).deadline)); // state check"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueBeforePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Checks for every task (To-do and event) that is due before the given date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforePredicate extends DuePredicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueBeforePredicate(String strDeadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(strDeadline);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return task.getLocalDateTime().isBefore(deadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueBeforePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 deadline.equals(((DueBeforePredicate) other).deadline)); // state check"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DuePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public abstract class DuePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected final LocalDateTime deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final String strDeadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts deadline into a LocalDateTime type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param strDeadline string format of date + time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DuePredicate(String strDeadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.strDeadline \u003d strDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        LocalDateTime deadline \u003d LocalDateTime.parse(strDeadline, dateTimeFormat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.strDeadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public abstract boolean test(Task task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueBeforePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 deadline.equals(((DueBeforePredicate) other).deadline)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Encapsulates a task to be completed over a span of time (i.e period)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The format of inputted dates and times that the class can accept. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The format of outputted dates and times by the class. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**Index of the end of the first provided date and time.*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final int END_OF_FIRST_DATE_TIME_INDEX \u003d 15;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**Index of the start of the second provided date and time.*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final int START_OF_SECOND_DATE_TIME_INDEX \u003d 19;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The date and time at which the event begins. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The date and time at which the event ends. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**The meeting link url. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private MeetingLink meetingLink;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event (boolean isDone, String description, String start, String end, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event (boolean isDone, String description, String start, String end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event (boolean isDone, String description, String start, String end, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event (boolean isDone, String description, String start, String end,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                  MeetingLink link, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event (String description, String start, String end, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param meetingLink the meeting link of event."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event (String description, String start, String end, MeetingLink meetingLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingLink \u003d meetingLink;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Constructs an event that may or may not be completed with a brief"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * description and period of time and a meeting link."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param meetingLink the meeting link of event."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event (boolean isDone, String description, LocalDateTime start,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                  LocalDateTime end, MeetingLink meetingLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingLink \u003d meetingLink;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime start, LocalDateTime end, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime start,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                 LocalDateTime end, Recurrence recurrence, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Event(String description, LocalDateTime start,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                 LocalDateTime end, Recurrence recurrence, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param link        the Meeting Link of event."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, String start, String end, Recurrence recurrence, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime start,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                 LocalDateTime end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param start       the starting date and time of event (String)."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param end         the ending date and time of event (String)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, String start, String end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param start       the starting date and time of event (LocalDateTime)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param end         the ending date and time of event (LocalDateTime)."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the String representation of the period of time which the event occurred over. in the"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * form of -start- to -end-."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Dates and times are in the format of outputFormatter."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the String representation of the period of which the event occurred over."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.start.format(OUTPUT_DATE_TIME_FORMAT).toString() + \" to \""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                + this.end.format(OUTPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns the String representation of the start time which the event occurred over. In the"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * form of -start-."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Dates and times are in the format of inputFormatter."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return the String representation of the period of which the event starts."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.start.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns the String representation of the start time which the event occurred over. In the"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * form of -end-."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Dates and times are in the format of inputFormatter."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return the String representation of the period of which the event ends."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.end.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns true if both events of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 (otherEvent.getDescriptionDateTime().equals(getDescriptionDateTime()));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the event, which includes the status icon, description, and period."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the event."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription() + \" (at: \" + getPeriod() + \") \" + getTagsToString();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescriptionDateTime() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description + \" (at: \" + getPeriod() + \")\";"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a boolean value indicating if the event is equal to another object by"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * determining if isDone, start, end, and description parameters are equal."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true or false if the event is equal or not equal to the object."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Event) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Event task \u003d (Event) o;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            boolean isEqualEvents;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (this.meetingLink \u003d\u003d null \u0026\u0026 this.recurrence !\u003d null) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualEvents \u003d this.description.equals(task.description) \u0026\u0026 this.start.equals(task.start)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.end.equals(task.end) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.recurrence.equals(task.recurrence) \u0026\u0026 task.meetingLink \u003d\u003d null"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else if (this.meetingLink !\u003d null \u0026\u0026 this.recurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualEvents \u003d this.description.equals(task.description) \u0026\u0026 this.start.equals(task.start)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.end.equals(task.end) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.meetingLink.equals(task.meetingLink) \u0026\u0026 task.recurrence \u003d\u003d null"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else if (this.meetingLink \u003d\u003d null \u0026\u0026 this.recurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualEvents \u003d this.description.equals(task.description) \u0026\u0026 this.start.equals(task.start)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.end.equals(task.end) \u0026\u0026 this.isDone \u003d\u003d task.isDone \u0026\u0026 task.meetingLink \u003d\u003d null"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 task.recurrence \u003d\u003d null"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualEvents \u003d this.description.equals(task.description) \u0026\u0026 this.start.equals(task.start)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.end.equals(task.end) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.meetingLink.equals(task.meetingLink) \u0026\u0026 this.recurrence.equals(task.recurrence)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return isEqualEvents;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"E | 1 | \" + this.getDescription() + \" | \" + this.start.format(INPUT_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    + \" to \" + this.end.format(INPUT_DATE_TIME_FORMAT) + \" | \" + this.getTagsToString();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"E | 0 | \" + this.getDescription() + \" | \" + this.start.format(INPUT_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    + \" to \" + this.end.format(INPUT_DATE_TIME_FORMAT) + \" | \" + this.getTagsToString();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.getPeriod();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public MeetingLink getMeetingLink() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.meetingLink;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isTodo() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEvent() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.start;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Optional\u003cLink\u003e getLink() {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return Optional.ofNullable(this.meetingLink);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return start.format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return end.format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return \"Event\";"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence getRecurrence() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.recurrence;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean hasRecurrence() {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return getRecurrence() !\u003d null;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 59,
      "kevnw": 147,
      "luciatirta": 36,
      "lerxcl": 68,
      "caleblyx": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Link.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class Link {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Link must be in URL Format: \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"\\\"^(https?|ftp|file)://[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\\\"\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Example: \" + \"https://nus-sg.zoom.us/j/12350904475?pwd\u003dT0Jw\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            \"^(https?|ftp|file)://[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /** A brief description of the link. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /** The url for the link */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a link with description and url."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the link"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url the url of the link"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Link(String description, String url) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(description, url);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        checkArgument(isValidUrl(url), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static boolean isValidUrl(String url) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return url.matches(VALIDATION_REGEX) || url.equals(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns the description of the link as a string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return the description of the link."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns the url of the link as a string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return the url of the link."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.url;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a boolean value indicating if the link is equal to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * another object by determining if descriptions and url"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param o an object that is compared to the link to determine if both are equal"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return true or false if the object is equal or not equal to the link respectively."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (o instanceof Link) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Link link \u003d (Link) o;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            boolean isEqualLink \u003d this.description.equals(link.description) \u0026\u0026 this.url \u003d\u003d link.url;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return isEqualLink;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 5,
      "kevnw": 71,
      "luciatirta": 1,
      "caleblyx": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/MeetingLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class MeetingLink extends Link {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The deadline of the task to be completed by."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private LocalDateTime meetingTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a Meeting Link"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, url, and meeting time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the meeting link."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url    a String in a URL format which specifies the link."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param meetingTime a String which describes the meeting time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLink(String description, String url, String meetingTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, url);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingTime \u003d LocalDateTime.parse(meetingTime, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a updated Meeting Link for recurring events"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with the description, url, and new meeting time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the meeting link."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param url    a String in a URL format which specifies the link."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param newTiming a LocalDateTime of the new meeting time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public MeetingLink(String description, String url, LocalDateTime newTiming) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(description, url);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.meetingTime \u003d newTiming;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Changes meeting time of this meeting."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param meetingTime the meeting Time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void snooze(String meetingTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingTime \u003d LocalDateTime.parse(meetingTime, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns a String representation of the meeting time with the format of outputFormatter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return a String representation of the meeting time with the format of outputFormatter."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getMeetingTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.meetingTime.format(OUTPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a String representation of the Meeting link."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * This representation includes the description, meeting time, and url in the format of outputFormatter."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return a String representation of the Meeting Link."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return getDescription() + \" \" + getMeetingTime() + \"\\n\" + getUrl();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns a boolean value indicating if the task is equal to"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * another object by determining if descriptions, deadline, and isDone parameters"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return true or false if the task is equal or not equal to the object respectively."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (o instanceof MeetingLink) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            MeetingLink link \u003d (MeetingLink) o;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            boolean isEqual \u003d this.getDescription().equals(link.getDescription())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    \u0026\u0026 this.getMeetingTime().equals(link.getMeetingTime()) \u0026\u0026 this.getUrl().equals(link.getUrl());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return isEqual;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String saveTimeFormat() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.meetingTime.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.meetingTime;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (super.getDescription().equals(\"No meeting link\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return super.getDescription();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return this.getDescriptionDateTime();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.meetingTime.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getRawDescription() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return super.getDescription();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getDescriptionDateTime() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return super.getDescription() + \" (on: \" + getMeetingTime() + \")\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 94,
      "kevnw": 24,
      "lerxcl": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Recurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Contains recurring properties of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Recurrence {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String DAY \u003d \"day\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String YEAR \u003d \"year\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final ChronoUnit chronoUnit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts the unit from a String to a ChronoUnit type, which is used later"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * for LocalDateTime operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param value magnitude of the recurrence"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param timePeriod unit of the magnitude (day/week/month/year)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence(Integer value, String timePeriod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assert this.value \u003e 0 : \"recurrence should not be 0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (timePeriod.equals(DAY)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (timePeriod.equals(WEEK)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (timePeriod.equals(MONTH)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (timePeriod.equals(YEAR)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.YEARS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Integer getValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ChronoUnit getChronoUnit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.chronoUnit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String rawChronoUnitToString \u003d this.chronoUnit.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String unit \u003d rawChronoUnitToString.substring(0, rawChronoUnitToString.length() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        unit +\u003d \"(s)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals (Object o) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Recurrence) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Recurrence recur \u003d (Recurrence) o;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return this.value.equals(recur.value) \u0026\u0026 this.chronoUnit.equals(recur.chronoUnit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return \"[\" + this.value + \",\" + this.chronoUnit.toString() + \"]\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 58,
      "caleblyx": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /** A brief description of the task. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /** Tracks the completion of the task */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /** Optional link for documents and online meetings */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    protected Link link;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** Optional tag of the task**/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected Recurrence recurrence;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task that has not been completed with a description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task(String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task, which may or may not have been completed, with a description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone indicates if the task has been completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task(boolean isDone, String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task, which have not been completed, with a description."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the status icon of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns tick symbol when task is indicated as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns X symbol when task is not indicated as done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the status icon of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the description of the task as a string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Indicates that the task has been completed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getTagsToString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a boolean value indicating if the task is equal to"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * another object by determining if descriptions and isDone parameters"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true or false if the object is equal or not equal to the task respectively."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            boolean isEqualTask \u003d this.description.equals(task.description) \u0026\u0026 this.isDone \u003d\u003d task.isDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return isEqualTask;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isSameTask(Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.equals(task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /** Tracks if there is a link present in this task */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public boolean hasLink() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (this.link !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of task, which includes the status icon"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * and description."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + getDescription() + \" \" + getTagsToString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"T | 1 | \" + this.getDescription() + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"T | 0 | \" + this.getDescription() + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Indicates if task is recurring."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true if it is recurring, and false otherwise."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isRecurring() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        System.out.println(this.getRecurrence() !\u003d null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.getRecurrence() !\u003d null;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract LocalDateTime getDeadline();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract LocalDateTime getStart();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract LocalDateTime getEnd();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract String getDateTime();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public abstract Optional\u003cLink\u003e getLink();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public abstract LocalDateTime getLocalDateTime();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract boolean isTodo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract boolean isEvent();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public abstract Recurrence getRecurrence();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 13,
      "kevnw": 12,
      "luciatirta": 29,
      "lerxcl": 8,
      "caleblyx": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskDateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (o1.equals(o2)) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o1.getStart().compareTo(o2.getStart()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return o1.getStart().compareTo(o2.getStart());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskMatchesFindKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Tag} and {@code Description} matches the tag keyword given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class TaskMatchesFindKeywordPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final List\u003cString\u003e keywordDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final String keywordTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword tag to task\u0027s tag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordTag the keyword for the tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TaskMatchesFindKeywordPredicate(String keywordTag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // make sure keyword is only one word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert !keywordTag.contains(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordTag \u003d keywordTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordDescription \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword description to task\u0027s description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordDescription the keyword for the description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TaskMatchesFindKeywordPredicate(List\u003cString\u003e keywordDescription) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordDescription \u003d keywordDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordTag \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword description and tag to task\u0027s description and tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordDescription the keyword for the description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keywordTag the keyword for the tag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TaskMatchesFindKeywordPredicate(List\u003cString\u003e keywordDescription, String keywordTag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // make sure keyword is only one word"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert !keywordTag.contains(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordTag \u003d keywordTag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keywordDescription \u003d keywordDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        boolean matchName \u003d keywordDescription.size() \u003d\u003d 0 || keywordDescription.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription(), keyword));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        boolean matchTag \u003d keywordTag \u003d\u003d \"\" || task.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .anyMatch(keyword -\u003e this.keywordTag.trim().toLowerCase().equals(keyword.tagName.trim().toLowerCase()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return matchName \u0026\u0026 matchTag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof TaskMatchesFindKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 keywordDescription.equals(((TaskMatchesFindKeywordPredicate) other).keywordDescription) // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 keywordTag.equals(((TaskMatchesFindKeywordPredicate) other).keywordTag));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskTypeMatchesKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskTypeMatchesKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskTypeMatchesKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getType(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof TaskTypeMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskTypeMatchesKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Todo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The deadline of the task to be completed by."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**The collaborative link url. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private CollaborativeLink collaborativeLink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(boolean isDone, String description, String deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(boolean isDone, String description, String deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(boolean isDone, String description, String deadline, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(boolean isDone, String description, String deadline,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                CollaborativeLink link, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, String deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param collaborativeLink the collaborative link of todo."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, String deadline, CollaborativeLink collaborativeLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d collaborativeLink;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param collaborativeLink the collaborative link of todo."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, LocalDateTime deadline, CollaborativeLink collaborativeLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d collaborativeLink;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, String deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a LocalDateTime in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, LocalDateTime deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a LocalDateTime in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param link        the Collaborative Link of todo."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                Recurrence recurrence, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param deadline    a date and time specifies a deadline."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a date and time specifies a deadline."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param link        a Collaborative Link for the todo."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a date and time specifies a deadline."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param link        a Collaborative Link for the todo."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, LocalDateTime deadline,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                Recurrence recurrence, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a String representation of the deadline with the format of outputFormatter."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return a String representation of the deadline with the format of outputFormatter."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String deadlineToString() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.deadline.format(OUTPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * This representation includes the status icon, description, and deadline in the format of outputFormatter."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return a String representation of the task."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this.recurrence \u003d\u003d null \u0026\u0026 this.collaborativeLink !\u003d null) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    + \" (by: \" + deadlineToString() + \") \" + \"Link: \" + this.collaborativeLink.toString() + \" \""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    + getTagsToString();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (this.recurrence !\u003d null \u0026\u0026 this.collaborativeLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    + \" (by: \" + deadlineToString() + \") \" + \"Recurrence: \" + this.recurrence.toString() + \" \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    + getTagsToString();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (this.recurrence \u003d\u003d null \u0026\u0026 this.collaborativeLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    + \" (by: \" + deadlineToString() + \") \" + getTagsToString();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    + \" (by: \" + deadlineToString() + \") \" + \"Link: \" + this.collaborativeLink.toString() + \" \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    + \"Recurrence: \" + this.recurrence.toString() + \" \" + getTagsToString();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a boolean value indicating if the task is equal to"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * another object by determining if descriptions, deadline, and isDone parameters"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true or false if the task is equal or not equal to the object respectively."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Todo) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Todo task \u003d (Todo) o;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            boolean isEqualDeadlines;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (this.recurrence \u003d\u003d null \u0026\u0026 this.collaborativeLink !\u003d null) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualDeadlines \u003d this.description.equals(task.description)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.deadline.equals(task.deadline) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.collaborativeLink.equals(task.collaborativeLink) \u0026\u0026 task.recurrence \u003d\u003d null"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else if (this.recurrence !\u003d null \u0026\u0026 this.collaborativeLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualDeadlines \u003d this.description.equals(task.description)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.deadline.equals(task.deadline) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.recurrence.equals(task.recurrence) \u0026\u0026 task.collaborativeLink \u003d\u003d null"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else if (this.recurrence \u003d\u003d null \u0026\u0026 this.collaborativeLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                System.out.println(\"masuk else if\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                System.out.println(this);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                System.out.println(task);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualDeadlines \u003d this.description.equals(task.description)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.deadline.equals(task.deadline) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 task.recurrence \u003d\u003d null \u0026\u0026 task.collaborativeLink \u003d\u003d null"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                System.out.println(isEqualDeadlines);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                isEqualDeadlines \u003d this.description.equals(task.description)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.deadline.equals(task.deadline) \u0026\u0026 this.isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.recurrence.equals(task.recurrence)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.collaborativeLink.equals(task.collaborativeLink)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u0026\u0026 this.tags.equals(task.tags);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return isEqualDeadlines;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns true if both todos of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * This defines a weaker notion of equality between two todos."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean isSameTodo(Todo otherTodo) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (otherTodo \u003d\u003d this) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return otherTodo !\u003d null"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 otherTodo.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 (otherTodo.getDescriptionDateTime().equals(getDescriptionDateTime()));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"D | 1 | \" + this.getDescription() + \" | \""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + getInputDate()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return \"D | 0 | \" + this.getDescription() + \" | \" + getInputDate()"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return deadlineToString();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getInputDate() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.deadline.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isTodo() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEvent() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescriptionDateTime() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description + \" (by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return \"Todo\";"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Optional\u003cLink\u003e getLink() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return Optional.ofNullable(this.collaborativeLink);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public CollaborativeLink getCollaborativeLink() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.collaborativeLink;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence getRecurrence() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.recurrence;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean hasRecurrence() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return getRecurrence() !\u003d null;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 150,
      "luciatirta": 38,
      "lerxcl": 69,
      "caleblyx": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!target.isSameTask(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the person {@code target} in the list with an identical task marked as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @returns AddCommand if task is recurring."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        target.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.set(index, target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 3,
      "caleblyx": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Todo(\"Finish assignment\", \"19-11-2020 2359\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Todo(\"Finish tutorial worksheet\", \"16-11-2020 2359\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Todo(\"Complete next CS2103T team project iteration\", \"22-11-2020 2359\", getTagSet(\"CS2103T\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Event(\"Attend group meeting\", \"20-11-2020 1000\", \"20-11-2020 1200\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    new MeetingLink(\"Group meeting\", \"https://www.facebook.com\", \"20-11-2020 1000\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    getTagSet(\"CS2103T\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Event(\"Attend computer science lecture\", \"17-11-2020 1200\", \"17-11-2020 1300\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Event(\"Meet friends for lunch\", \"17-11-2020 1300\", \"17-11-2020 1400\", getTagSet(\"Friends\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Todo(\"Finish assignment\", \"19-12-2020 2359\", getTagSet(\"CS2105\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            new Event(\"Attend group meeting\", \"20-12-2020 1000\", \"20-12-2020 1200\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    new MeetingLink(\"Friends meeting\", \"https://www.example.com\", \"20-12-2020 1000\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    getTagSet(\"CS2103T\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static ReadOnlyTaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList sampleTl \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        for (Task sampleTask: getSampleTasks()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            sampleTl.addTask(sampleTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return sampleTl;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 1,
      "lerxcl": 10,
      "caleblyx": 19,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedEvent extends JsonAdaptedTask {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final LocalDateTime end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkDesc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkUrl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Recurrence recurrence;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given Event details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"description\") String description, @JsonProperty(\"isDone\") Boolean isDone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                           @JsonProperty(\"start\") LocalDateTime start, @JsonProperty(\"end\") LocalDateTime end,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            @JsonProperty(\"linkDesc\") String linkDesc, @JsonProperty(\"linkUrl\") String url,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            @JsonProperty(\"linkTime\") String linkTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            @JsonProperty(\"recurrence\") JsonAdaptedRecurrence recurrence,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkDesc \u003d linkDesc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkUrl \u003d url;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkTime \u003d linkTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (recurrence !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d recurrence.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedEvent(Task source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        start \u003d source.getStart();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        end \u003d source.getEnd();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (source.getLink().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d source.getLink().get().getDescription().split(\" \", 2)[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d source.getLink().get().getUrl();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            linkTime \u003d ((Event) source).getMeetingLink().saveTimeFormat();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            linkTime \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d source.getRecurrence();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final Set\u003cTag\u003e eventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            eventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isDone\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final boolean modelIsDone \u003d isDone;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (start \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"start date and time\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final LocalDateTime modelStart \u003d start;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"end date and time\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final LocalDateTime modelEnd \u003d end;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final Recurrence modelRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (linkUrl \u003d\u003d null || linkDesc \u003d\u003d null || linkTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Event(modelIsDone, modelDescription, modelStart, modelEnd, modelTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Event(modelIsDone, modelDescription, modelStart, modelEnd, modelRecurrence, modelTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(modelIsDone, modelDescription, modelStart,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        modelEnd, new MeetingLink(linkDesc, linkUrl, linkTime), modelTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(modelIsDone, modelDescription,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        modelStart, modelEnd, modelRecurrence, new MeetingLink(linkDesc, linkUrl, linkTime), modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "urieltan": 7,
      "kevnw": 21,
      "luciatirta": 22,
      "lerxcl": 13,
      "caleblyx": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class JsonAdaptedRecurrence {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Integer value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final ChronoUnit unit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a {code JsonAdaptedRecurrence} with the given {@code recurrence details}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedRecurrence(@JsonProperty(\"value\") Integer value, @JsonProperty(\"chronoUnit\") ChronoUnit unit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts a given {@code Recurrence} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public JsonAdaptedRecurrence(Recurrence source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        value \u003d source.getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        unit \u003d source.getChronoUnit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Recurrence} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence toModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final Integer modelValue \u003d value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final String modelUnit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (unit.equals(ChronoUnit.DAYS)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"day\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (unit.equals(ChronoUnit.WEEKS)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"week\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (unit.equals(ChronoUnit.MONTHS)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"month\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (unit.equals(ChronoUnit.YEARS)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"year\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new Recurrence(modelValue, modelUnit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 43,
      "caleblyx": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonIgnoreProperties(ignoreUnknown \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonTypeInfo(use \u003d NAME, include \u003d PROPERTY)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedTodo.class, name \u003d \"JsonAdaptedTodo\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedEvent.class, name \u003d \"JsonAdaptedEvent\") }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public abstract class JsonAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected final Boolean isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given Task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\") String description, @JsonProperty(\"isDone\") Boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        isDone \u003d source.getStatus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract Task toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTodo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Jackson-friendly version of {@link Todo}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedTodo extends JsonAdaptedTask {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final LocalDateTime deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkDesc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkUrl;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Recurrence recurrence;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final Set\u003cJsonAdaptedTag\u003e tagged \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonAdaptedTodo} with the given Todo details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTodo(@JsonProperty(\"description\") String description, @JsonProperty(\"isDone\") Boolean isDone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                           @JsonProperty(\"deadline\") LocalDateTime deadline, @JsonProperty(\"linkDesc\") String linkDesc,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                           @JsonProperty(\"linkUrl\") String url,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           @JsonProperty(\"recurrence\") JsonAdaptedRecurrence recurrence,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkDesc \u003d linkDesc;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkUrl \u003d url;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (recurrence !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d recurrence.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code Todo} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTodo(Task source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        deadline \u003d source.getDeadline();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (source.getLink().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d source.getLink().get().getDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d source.getLink().get().getUrl();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            linkDesc \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            linkUrl \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d source.getRecurrence();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts this Jackson-friendly adapted todo object into the model\u0027s {@code Todo} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Todo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isDone\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final boolean modelIsDone \u003d isDone;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"deadline\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final LocalDateTime modelDeadline \u003d deadline;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final Recurrence modelRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (linkUrl \u003d\u003d null || linkDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline, modelTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline, modelRecurrence, modelTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    new CollaborativeLink(linkDesc, linkUrl), modelTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        modelRecurrence, new CollaborativeLink(linkDesc, linkUrl), modelTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 5,
      "kevnw": 14,
      "luciatirta": 25,
      "lerxcl": 11,
      "caleblyx": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * An Immutable TaskList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonRootName(value \u003d \"tasklist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskList} with the given tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003c? extends JsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonSerializableTaskList(ReadOnlyTaskList source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(x -\u003e x.isTodo()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                ? new JsonAdaptedTodo(x) : new JsonAdaptedEvent(x)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts this Task List into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (taskList.hasTask(task)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * A class to access TaskList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonTaskListStorage implements TaskListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonTaskListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return readTaskList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Similar to {@link #readTaskList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonTaskList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!jsonTaskList.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return Optional.of(jsonTaskList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyTaskList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, TaskListStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private TaskListStorage taskListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                          TaskListStorage taskListStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskListStorage \u003d taskListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskListStorage.getTaskListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return readTaskList(taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskListStorage.readTaskList(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        saveTaskList(taskList, taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListStorage.saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 27,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public interface TaskListStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @see #getTaskListFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskList} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @see #saveTaskList(ReadOnlyTaskList)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "caleblyx": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f12-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TaskListPanel dueSoonTaskListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TabPane featuresPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private StackPane dueSoonTasksPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dueSoonTaskListPanel \u003d new TaskListPanel(logic.getDueSoonTaskList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dueSoonTasksPanelPlaceholder.getChildren().add(dueSoonTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Navigate features tab to show the correct tab"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param category the category the command belongs to"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private void handleTabNavigation(String category) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (category.equals(\"CONTACT\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            featuresPanelPlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else if (category.equals(\"TASK\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            featuresPanelPlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            handleTabNavigation(commandResult.getCategory());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 19,
      "lerxcl": 6,
      "caleblyx": 6,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label statusIcon;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private VBox additionalInfo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        type.setText(task.getType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        description.setText(task.getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        dateTime.setText(task.getDateTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        statusIcon.setText(\"Status: \" + task.getStatusIcon());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Hyperlink meetingLink \u003d new Hyperlink();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Label linkDescription \u003d new Label();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        VBox linkContainer \u003d new VBox();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        meetingLink.getStyleClass().add(\"meetingLink\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        linkDescription.getStyleClass().add(\"linkDescription\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        linkContainer.getStyleClass().add(\"linkContainer\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Recurrence recurrence \u003d task.getRecurrence();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (recurrence !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String text \u003d \"Recurring task: \" + recurrence.getValue() + \" \" + recurrence.getUnit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Label recurring \u003d new Label(text);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            recurring.getStyleClass().add(\"recurring\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            additionalInfo.getChildren().add(recurring);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (task.getLink().isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            meetingLink.setText(task.getLink().get().getUrl());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            meetingLink.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    new Thread(() -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            Desktop.getDesktop().browse(new URI(meetingLink.getText()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        } catch (IOException e1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            e1.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        } catch (URISyntaxException e1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            e1.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    }).start();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDescription.setText(task.getLink().get().getDescription());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            linkContainer.getChildren().addAll(meetingLink, linkDescription);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            additionalInfo.getChildren().add(linkContainer);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 5,
      "kevnw": 19,
      "luciatirta": 27,
      "lerxcl": 1,
      "caleblyx": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/lifebook.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cStackPane fx:id\u003d\"commandTextPanel\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    background-color: #29323C; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-tab-min-width: 3em;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-tab-min-height: 3em;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 0.0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 0 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 0 30 0 30;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane .tab:focused"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane *.tab-header-background {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323c;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane:top *.tab-header-area {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 0.416667em 0.166667em 0.0em 0.0em;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab:selected .focus-indicator {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-base: #29323C;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-control-inner-background: #29323C;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 20%);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-view .scroll-bar:vertical {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#485563;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-view .increment-button ,.list-view .decrement-button {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color:transparent;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-view .scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#6a8098;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 4;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color: #485563"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #626e7b;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #626e7b;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     -fx-background-color: derive(#29323C, 20%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     -fx-background-color: derive(#29323C, 20%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     -fx-border-color: derive(#29323C, 10%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #343f4b;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 30%);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color: derive(#29323C, 25%);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color: red;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 30%);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #343f4b;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #343f4b;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-selection-bar: #485563;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".menu:focused {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  -fx-text-fill: #29323C;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 25%);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#6a8098;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 2.5;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#root {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#commandTextPanel {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 5 10 5 10;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent #485563 transparent #485563;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#commandBoxPlaceholder {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#placeHolder {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 15 15;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#resultDisplayPlaceholder {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".text-area .scroll-pane {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".text-area .scroll-pane .viewport{"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".text-area .scroll-pane .content{"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #FFD540;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-radius: 15;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#featuresPanelPlaceholder {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323c;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding : 10 10 5 10"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#personList {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 0 15 15 15;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#taskListPanel {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 15 15;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#dueSoonTaskListPanel {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 15 15;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".linkContainer {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#6F7B89;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-cell:filled:selected .linkContainer {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #4F5B6F;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".meetingLink {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".linkDescription {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-family: \"Segoe UI\""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".recurring {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: #FFD540 !important;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#additionalInfo {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: #FFD540;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 214,
      "-": 297
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background: #485563;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/\" xmlns\u003d\"http://javafx.com/javafx/\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003cfx:root minHeight\u003d\"750\" minWidth\u003d\"950\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Lifebook\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cImage url\u003d\"@/images/lifebook.png\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u003cVBox fx:id\u003d\"root\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003cGridPane hgap\u003d\"0\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" vgap\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cTabPane fx:id\u003d\"featuresPanelPlaceholder\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                             GridPane.rowSpan\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabContacts\" closable\u003d\"false\" text\u003d\"Contacts\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cVBox fx:id\u003d\"personList\" maxHeight\u003d\"Infinity\" minWidth\u003d\"300.0\" prefWidth\u003d\"1001.0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                  styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabTasks\" closable\u003d\"false\" text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cVBox fx:id\u003d\"taskListPanel\" layoutX\u003d\"10.0\" layoutY\u003d\"157.0\" maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                  minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefWidth\u003d\"1020.0\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"NEVER\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150\" minHeight\u003d\"150\" prefHeight\u003d\"150\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\" GridPane.vgrow\u003d\"NEVER\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" GridPane.rowSpan\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cVBox alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Welcome to\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                            \u003cFont name\u003d\"System Regular\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Lifebook!\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                            \u003cFont name\u003d\"System Regular\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                       pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003cimage\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cImage url\u003d\"@/images/icon.png\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003c/image\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cInsets bottom\u003d\"25.0\" right\u003d\"10.0\" top\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cVBox fx:id\u003d\"dueSoonTaskListPanel\" prefHeight\u003d\"300.0\" prefWidth\u003d\"1000.0\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                          GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"3\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"What is due soon?\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cFont name\u003d\"Segoe UI Semibold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003c/Text\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"dueSoonTasksPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/VBox.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"0.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cColumnConstraints maxWidth\u003d\"550\" minWidth\u003d\"400\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cRowConstraints maxHeight\u003d\"300\" minHeight\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"0.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"30.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cRowConstraints maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" prefHeight\u003d\"150.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"BASELINE_CENTER\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           prefWidth\u003d\"2020.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 102,
      "lerxcl": 4,
      "caleblyx": 8,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"15\" bottom\u003d\"10\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-result-display\" xmlns\u003d\"http://javafx.com/javafx/\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"15\" right\u003d\"15\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         \u003cLabel fx:id\u003d\"type\" layoutX\u003d\"25.0\" layoutY\u003d\"72.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cLabel fx:id\u003d\"statusIcon\" layoutX\u003d\"25.0\" layoutY\u003d\"63.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$statusIcon\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      \u003cVBox fx:id\u003d\"additionalInfo\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"recurring\" styleClass\u003d\"cell_small_label\"/\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c!--        \u003cVBox fx:id\u003d\"linkContainer\"\u003e--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c!--          \u003cHyperlink fx:id\u003d\"meetingLink\" styleClass\u003d\"cell_small_label\"/\u003e--\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c!--          \u003cLabel fx:id\u003d\"linkDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"No description\" /\u003e--\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c!--        \u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "luciatirta": 10,
      "lerxcl": 1,
      "caleblyx": 36
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "caleblyx": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/duplicateEventTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"meeting\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-12-12T10:00:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-12-12T11:30:00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"meeting\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-12-12T10:00:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-12-12T11:30:00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 25
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/duplicateTodoTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"Finish assignment\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-10-19T23:59:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2100\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"Finish assignment\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-10-19T23:59:00\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2100\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 21
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/invalidEventTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"meeting\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-12-12T10:00:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-12-12T11:30:00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"hello\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : \"invaid\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : \"2020-12-12T10:00:00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/invalidTodoTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"Simple\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-05-20T09:00:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"hello\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : \"invalid\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"value\" : 1,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"chronoUnit\" : \"DAYS\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 15
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/typicalEventsTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"meeting\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-12-12T10:00:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-12-12T11:30:00\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"party\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-01-01T18:00:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-01-02T06:00:00\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"value\" : 1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"chronoUnit\" : \"YEARS\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"lecture\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-10-23T16:00:00\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-10-23T16:00:00\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"attend workshop\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"start\" : \"2020-11-12T12:00:00\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"end\" : \"2020-11-12T16:00:00\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"workshop\" ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"description\" : \"meeting2\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"start\" : \"2020-12-12T10:00:00\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"end\" : \"2020-12-12T11:30:00\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"@type\" : \"JsonAdaptedEvent\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"description\" : \"meeting3\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"start\" : \"2020-12-16T10:00:00\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"end\" : \"2020-12-18T11:30:00\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkDesc\" : null,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkTime\" : null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 22,
      "caleblyx": 50
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskListTest/typicalTodosTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"homework\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-12-12T23:59:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"do chores\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-01-01T18:00:00\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"value\" : 1,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"chronoUnit\" : \"WEEKS\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"finish assignment\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-10-01T16:00:00\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"cs2100\" ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"update user guide\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2021-10-05T20:00:00\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"update developer guide\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-11-15T23:00:00\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2103T\" ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"description\" : \"homework2\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"deadline\" : \"2020-12-14T21:59:00\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"linkUrl\" : null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 9,
      "caleblyx": 51
    }
  },
  {
    "path": "src/test/data/JsonTaskListStorageTest/TempTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"Simple\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-05-20T09:00:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : \"\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"value\" : 1,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \"chronoUnit\" : \"DAYS\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 15
    }
  },
  {
    "path": "src/test/data/JsonTaskListStorageTest/invalidAndValidTaskTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"ValidTask\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"2020-10-19T23:59:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : \"\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"Tag\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"InvalidTask\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"Invalid Date\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : \"\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"Tag\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 21
    }
  },
  {
    "path": "src/test/data/JsonTaskListStorageTest/invalidTaskTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"@type\" : \"JsonAdaptedTodo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"description\" : \"Invalid Task\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"isDone\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"deadline\" : \"Invalid Date\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkDesc\" : \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"linkUrl\" : \"\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"recurrence\" : null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \"tagged\" : [ \"CS2100\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 12
    }
  },
  {
    "path": "src/test/data/JsonTaskListStorageTest/notJsonFormatTaskList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "notJsonFormat!"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/lifebook.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(temporaryFolder.resolve(\"taskList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String deleteCommand \u003d \"delete contact 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String listCommand \u003d ListContactCommand.COMMAND_WORD + \" contact\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(listCommand, ListContactCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new JsonTaskListStorage(temporaryFolder.resolve(\"ioExceptiontaskList\" + \".json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String addCommand \u003d AddContactCommand.COMMAND_WORD + \" contact \" + NAME_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 7,
      "caleblyx": 8,
      "-": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validPerson), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(new AddContactCommand(personInList), model, AddContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 4,
      "luciatirta": 1,
      "caleblyx": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addContactCommand \u003d new AddContactCommand(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                AddContactCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addContactCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredTaskListIsEmpty() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredAddressBookIsEmpty() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean taskListIsEmpty() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean addressBookIsEmpty() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 11,
      "lerxcl": 10,
      "caleblyx": 82,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                AddEventCommand.MESSAGE_DUPLICATE_EVENT, () -\u003e addEventCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_eventWithRecurrenceAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommandTest.ModelStubAcceptingEventAdded modelStub \u003d new AddEventCommandTest"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                .ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event validEvent \u003d new EventBuilder(PARTY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event meeting \u003d new EventBuilder().withDescription(\"meeting\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event party \u003d new EventBuilder().withDescription(\"party\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addMeetingCommand \u003d new AddEventCommand(meeting);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addPartyCommand \u003d new AddEventCommand(party);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addMeetingCommandCopy \u003d new AddEventCommand(meeting);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addMeetingCommand.equals(addPartyCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // Needs to be null to update \"Due Soon\" section in GUI after adding a task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredTaskListIsEmpty() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredAddressBookIsEmpty() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean taskListIsEmpty() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean addressBookIsEmpty() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that contains a single to-do."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task event) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return this.event.isSameTask(event);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that always accept the to-do being added."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task event) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameTask);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 253,
      "caleblyx": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddTodoCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void constructor_nullTodo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTodoCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_todoAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubAcceptingTodoAdded modelStub \u003d new ModelStubAcceptingTodoAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddTodoCommand(validTodo).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(String.format(AddTodoCommand.MESSAGE_SUCCESS, validTodo.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validTodo), modelStub.todosAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_duplicateTodo_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addTodoCommand \u003d new AddTodoCommand(validTodo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTodo(validTodo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                AddTodoCommand.MESSAGE_DUPLICATE_TODO, () -\u003e addTodoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_todoWithRecurrenceAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubAcceptingTodoAdded modelStub \u003d new ModelStubAcceptingTodoAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder(CHORES).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddTodoCommand(validTodo).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(String.format(AddTodoCommand.MESSAGE_SUCCESS, validTodo.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validTodo), modelStub.todosAdded);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo homework \u003d new TodoBuilder().withDescription(\"homework\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo assignment \u003d new TodoBuilder().withDescription(\"assignment\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addHomeworkCommand \u003d new AddTodoCommand(homework);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addAssignmentCommand \u003d new AddTodoCommand(assignment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addHomeworkCommand.equals(addHomeworkCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addHomeworkCommandCopy \u003d new AddTodoCommand(homework);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addHomeworkCommand.equals(addHomeworkCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(addAssignmentCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // Needs to be null to update \"Due Soon\" section in GUI after adding a task."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredTaskListIsEmpty() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredAddressBookIsEmpty() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean taskListIsEmpty() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean addressBookIsEmpty() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that contains a single to-do."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubWithTodo extends ModelStub {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        private final Todo todo;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubWithTodo(Todo todo) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.todo \u003d todo;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task todo) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return this.todo.isSameTask(todo);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that always accept the to-do being added."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubAcceptingTodoAdded extends ModelStub {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final ArrayList\u003cTodo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task todo) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return todosAdded.stream().anyMatch(todo::isSameTask);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            todosAdded.add(todo);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 251,
      "caleblyx": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 2,
      "caleblyx": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", \"category\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", \"category\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, \"category\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", \"category\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, \"category\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, \"category\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        //different category value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", \"diff_category\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", \"category\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", \"category\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", \"category\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, \"category\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, \"category\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different category value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", \"diff_category\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 17,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditTodoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String VALID_TAG_IMPORTANT \u003d \"important\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d \"A description\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String VALID_URL \u003d \"https://www.google.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_DESCRIPTION_CLEAN \u003d \"Clean\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_DATE_TIME_CLEAN \u003d \"01-01-2021 2000\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_DESCRIPTION_TUTOR_MEETING \u003d \"Tutor meeting\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_URL_TUTOR_MEETING \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            \"https://nus-sg.zoom.us/j/85350904475?pwd\u003dT0JwTEIwNjRuMnNKUEt4L2R789JWZz09\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_DATE_TIME_TUTOR_MEETING \u003d \"10-12-2017 1445\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_DESCRIPTION_TUTORIAL_DOCUMENT \u003d \"Tutorial 1 CS2103\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String VALID_URL_TUTORIAL_DOCUMENT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            \"https://docs.google.com/document/d/1oAObtne790B1nDX123hrbAdEy1aTUtorialDOcument/edit\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditTodoCommand.EditTodoDescriptor DESC_TASK1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditTodoCommand.EditTodoDescriptor DESC_TASK2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditEventCommand.EditEventDescriptor DESC_EVENT1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditEventCommand.EditEventDescriptor DESC_EVENT2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK1 \u003d new EditTodoCommand.EditTodoDescriptor();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK1.setDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK1.setDate(\"10-12-2017\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK1.setTime(\"1445\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK2 \u003d new EditTodoCommand.EditTodoDescriptor();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK2.setDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK2.setDate(\"15-12-2018\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_TASK2.setTime(\"1945\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT1 \u003d new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT1.setDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT1.setStartTime(\"1445\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT1.setStartDate(\"10-12-2017\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT2 \u003d new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT2.setDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT2.setStartTime(\"1830\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DESC_EVENT1.setStartDate(\"12-12-2018\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage, String category,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, category);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final List\u003cString\u003e getDescription \u003d Arrays.asList(task.getDescription());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(getDescription));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 10,
      "kevnw": 28,
      "luciatirta": 2,
      "lerxcl": 16,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ContactTaskTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditPersonTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditTaskTags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EditPersonTagsBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EditTaskTagsBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class ContactTaskTagCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_filteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index personIndex \u003d ParserUtil.parseIndex(\"3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withTags(\"test\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task editedTask \u003d new TodoBuilder((Todo) taskInFilteredList).withTags(\"test\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ContactTaskTagCommand contactTaskTagCommand \u003d new ContactTaskTagCommand(personIndex, taskIndex,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                new EditPersonTagsBuilder(personInFilteredList).withTags(\"test\").build(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                new EditTaskTagsBuilder(taskInFilteredList).withTags(\"test\").build());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(ContactTaskTagCommand.MESSAGE_CONTACT_TASK_TAG_SUCCESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                editedPerson, editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(personIndex.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(taskIndex.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(contactTaskTagCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_invalidPersonIndex_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index outOfBoundIndexPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index taskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditPersonTags editPersonTags \u003d new EditPersonTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditTaskTags editTaskTags \u003d new EditTaskTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ContactTaskTagCommand contactTaskTagCommand \u003d new ContactTaskTagCommand(outOfBoundIndexPerson,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                taskIndex, editPersonTags, editTaskTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandFailure(contactTaskTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_invalidTaskIndex_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index personIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index outOfBoundIndexTask \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditPersonTags editPersonTags \u003d new EditPersonTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditTaskTags editTaskTags \u003d new EditTaskTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ContactTaskTagCommand contactTaskTagCommand \u003d new ContactTaskTagCommand(personIndex,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                outOfBoundIndexTask, editPersonTags, editTaskTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandFailure(contactTaskTagCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        List\u003cString\u003e tag \u003d Arrays.asList(\"test\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditPersonTags editPersonTags \u003d new EditPersonTags();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editPersonTags.setTags(ParserUtil.parseTags(tag));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditTaskTags editTaskTags \u003d new EditTaskTags();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editTaskTags.setTags(ParserUtil.parseTags(tag));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final ContactTaskTagCommand standardCommand \u003d new ContactTaskTagCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                INDEX_FIRST_PERSON, editPersonTags, editTaskTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditPersonTags editPersonTagsCopy \u003d new EditPersonTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditTaskTags editTaskTagsCopy \u003d new EditTaskTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ContactTaskTagCommand commandWithSameValues \u003d new ContactTaskTagCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                INDEX_FIRST_PERSON, editPersonTagsCopy, editTaskTagsCopy);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different indexes -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(standardCommand.equals(new ContactTaskTagCommand(INDEX_SECOND_PERSON, INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                editPersonTags, editTaskTags)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteFirstCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteSecondCommand \u003d new DeleteContactCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteFirstCommandCopy \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 13,
      "luciatirta": 2,
      "caleblyx": 4,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_validIndexTaskList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_invalidIndexTaskList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteFirstCommand \u003d new DeleteTaskCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteSecondCommand \u003d new DeleteTaskCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteFirstCommandCopy \u003d new DeleteTaskCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    //Task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // Implement this after implementing \"show\" command for To-do"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // 1) public void execute_validIndexFilteredTaskList_success()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // 2) public void execute_invalidIndexFilteredTaskList_throwsCommandException()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // 3) private void showNoTask(Model model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneTodo_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addTodo(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneEvent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addEvent(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addEvent(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneRecurringTodo_success() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todoRecurring \u003d new TodoBuilder(CHORES).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo todoRecurred \u003d new TodoBuilder(CHORES).withDateTime(\"08-01-2020 1800\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todoRecurring);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addTodo(todoRecurring);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        todoRecurring.markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.addTodo(todoRecurred);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, todoRecurring);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneRecurringEvent_success() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event eventRecurring \u003d new EventBuilder(PARTY).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Event eventRecurred \u003d new EventBuilder(PARTY).withStartDateTime(\"01-01-2021 1800\").withEndDateTime(\"02-01\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                + \"-2021 0600\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addEvent(eventRecurring);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addEvent(eventRecurring);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.markAsDone(eventRecurring);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.addEvent(eventRecurred);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, eventRecurring);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_invalidIndexTaskList_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneFirstCommandCopy \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 119,
      "caleblyx": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DueAtCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueAtCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueAtPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueAtCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_rightDateAndTimeInputs_todoFound() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate predicate \u003d preparePredicate(\"date/13-12-2020 time/2359\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtCommand command \u003d new DueAtCommand(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DueAtCommand.MESSAGE_SUCCESS, predicate.getDateTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate firstPredicate \u003d preparePredicate(\"date/10-10-2020 time/0000\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate secondPredicate \u003d preparePredicate(\"date/30-12-2021 time/2100\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtCommand firstCommand \u003d new DueAtCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtCommand secondCommand \u003d new DueAtCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtCommand firstCommandCopy \u003d new DueAtCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses {@code userInput} into a {@code DueAtPredicate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueAtPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String deadline \u003d userInput.replace(\"date/\", \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        deadline \u003d deadline.replace(\"time/\", \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DueAtPredicate(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DueBeforeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_rightDateAndTimeInputs_todoFound() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate predicate \u003d preparePredicate(\"date/13-12-2020 time/2359\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand command \u003d new DueBeforeCommand(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DueBeforeCommand.MESSAGE_SUCCESS, predicate.getDateTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate firstPredicate \u003d preparePredicate(\"date/10-10-2020 time/0000\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate secondPredicate \u003d preparePredicate(\"date/30-12-2021 time/2100\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand firstCommand \u003d new DueBeforeCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand secondCommand \u003d new DueBeforeCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand firstCommandCopy \u003d new DueBeforeCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses {@code userInput} into a {@code DueBeforePredicate}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueBeforePredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String deadline \u003d userInput.replace(\"date/\", \"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        deadline \u003d deadline.replace(\"time/\", \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DueBeforePredicate(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditContactCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        final EditContactCommand standardCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand commandWithSameValues \u003d new EditContactCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 23,
      "luciatirta": 4,
      "caleblyx": 10,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EVENT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EVENT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_TUTOR_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIFTH_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditEventCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditEventCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDescription(\"meeting\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setStartDate(\"12-12-2020\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setStartTime(\"1000\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setEndDate(\"12-12-2020\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setEndTime(\"1130\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIFTH_TASK, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new UserPrefs(), new TaskList(model.getTaskList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(4), editedEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event lastEvent \u003d (Event) model.getFilteredTaskList().get(indexLastEvent.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EventBuilder eventInList \u003d new EventBuilder(lastEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event editedEvent \u003d eventInList.withDescription(VALID_DESCRIPTION)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withStartDateTime(VALID_DATE_TIME_TUTOR_MEETING)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withTags(VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setStartDate(\"10-12-2017\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setStartTime(\"1445\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTags(Stream.of(VALID_TAG_IMPORTANT).map(Tag::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(indexLastEvent, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new UserPrefs(), new TaskList(model.getTaskList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(lastEvent, editedEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_duplicateTodoUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event firstEvent \u003d (Event) model.getFilteredTaskList().get(INDEX_FIFTH_TASK.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand.EditEventDescriptor descriptor \u003d new EditEventCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDescription(firstEvent.getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTags(firstEvent.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setStartDate(firstEvent.getStartDateTime().split(\" \", 2)[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setStartTime(firstEvent.getStartDateTime().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setEndDate(firstEvent.getEndDateTime().split(\" \", 2)[0]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setEndTime(firstEvent.getEndTime().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTags(firstEvent.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_SIXTH_TASK, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        final EditEventCommand standardCommand \u003d new EditEventCommand(INDEX_FIRST_TASK, DESC_EVENT1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand.EditEventDescriptor copyDescriptor \u003d new EditEventCommand.EditEventDescriptor(DESC_EVENT1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand commandWithSameValues \u003d new EditEventCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_TASK, DESC_EVENT1)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_TASK, DESC_EVENT2)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_TUTOR_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_IMPORTANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIFTH_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditTodoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditTodoCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo editedTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand.EditTodoDescriptor descriptor \u003d new EditTodoCommand.EditTodoDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDescription(\"homework\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        descriptor.setDate(\"14-12-2020\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTime(\"2359\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand editTodoCommand \u003d new EditTodoCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditTodoCommand.MESSAGE_EDIT_TODO_SUCCESS, editedTodo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new UserPrefs(), new TaskList(model.getTaskList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTodo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(editTodoCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index indexLastTodo \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo lastTodo \u003d (Todo) model.getFilteredTaskList().get(indexLastTodo.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        TodoBuilder todoInList \u003d new TodoBuilder(lastTodo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo editedTodo \u003d todoInList.withDescription(VALID_DESCRIPTION).withDateTime(VALID_DATE_TIME_TUTOR_MEETING)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withTags(VALID_TAG_IMPORTANT).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand.EditTodoDescriptor descriptor \u003d new EditTodoCommand.EditTodoDescriptor();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDescription(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDate(\"10-12-2017\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTime(\"1445\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTags(Stream.of(VALID_TAG_IMPORTANT).map(Tag::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand editTodoCommand \u003d new EditTodoCommand(indexLastTodo, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditTodoCommand.MESSAGE_EDIT_TODO_SUCCESS, editedTodo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new UserPrefs(), new TaskList(model.getTaskList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(lastTodo, editedTodo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(editTodoCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_duplicateTodoUnfilteredList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo firstTodo \u003d (Todo) model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand.EditTodoDescriptor descriptor \u003d new EditTodoCommand.EditTodoDescriptor();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDescription(firstTodo.getDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTags(firstTodo.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setDate(firstTodo.getInputDate().split(\" \", 2)[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        descriptor.setTime(firstTodo.getInputDate().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand editTodoCommand \u003d new EditTodoCommand(INDEX_FIFTH_TASK, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editTodoCommand, model, EditTodoCommand.MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        final EditTodoCommand standardCommand \u003d new EditTodoCommand(INDEX_FIRST_TASK, DESC_TASK1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand.EditTodoDescriptor copyDescriptor \u003d new EditTodoCommand.EditTodoDescriptor(DESC_TASK1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand commandWithSameValues \u003d new EditTodoCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTodoCommand(INDEX_SECOND_TASK, DESC_TASK1)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditTodoCommand(INDEX_FIRST_TASK, DESC_TASK2)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 118,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, \"EXIT\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindContactCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                new ContactMatchesFindKeywordPredicate(Collections.singletonList(\"first\"), \"first\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                new ContactMatchesFindKeywordPredicate(Collections.singletonList(\"second\"), \"second\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand findFirstCommand \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand findSecondCommand \u003d new FindContactCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand findFirstCommandCopy \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingName_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d preparePredicateName(\"Joseph Zayn\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d preparePredicateName(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingTag_noPersonFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d preparePredicateTag(\"clown\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_existingTag_multiplePersonsFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d preparePredicateTag(\"friends\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_matchNameAndTag_multiplePersonsFound() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d preparePredicate(\"pauline elle carl benson\", \"friends\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notMatchNameAndTag_noPersonsFound() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d preparePredicate(\"elle carl\", \"friends\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses nameInput into a {@code ContactMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ContactMatchesFindKeywordPredicate preparePredicateName(String nameInput) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new ContactMatchesFindKeywordPredicate(Arrays.asList(nameInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses nameInput and tagInput into a {@code ContactMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ContactMatchesFindKeywordPredicate preparePredicate(String nameInput, String tagInput) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new ContactMatchesFindKeywordPredicate(Arrays.asList(nameInput.split(\"\\\\s+\")), tagInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses tagInput into a {@code ContactMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ContactMatchesFindKeywordPredicate preparePredicateTag(String tagInput) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new ContactMatchesFindKeywordPredicate(tagInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 7,
      "luciatirta": 73,
      "caleblyx": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.WORKSHOP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class FindEventCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskMatchesFindKeywordPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskMatchesFindKeywordPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingDescription_noEventFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateDesc(\"hangout\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_multipleKeywords_multipleEventsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateDesc(\"meeting workshop\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(MEETING, WORKSHOP), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingTag_noEventFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateTag(\"Clown\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_existingTag_multipleEventsFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateTag(\"cs2103t\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(MEETING, LECTURE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_matchNameAndTag_multipleEventsFound() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicate(\"meeting party lecture workshop\", \"cs2103T\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(MEETING, LECTURE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notMatchNameAndTag_noEventsFound() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicate(\"lecture party\", \"workshop\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses descInput into a {@code TaskMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskMatchesFindKeywordPredicate preparePredicateDesc(String descInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskMatchesFindKeywordPredicate(Arrays.asList(descInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses descInput and tagInput into a {@code TaskMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskMatchesFindKeywordPredicate preparePredicate(String descInput, String tagInput) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskMatchesFindKeywordPredicate(Arrays.asList(descInput.split(\"\\\\s+\")), tagInput);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses tagInput into a {@code TaskMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskMatchesFindKeywordPredicate preparePredicateTag(String tagInput) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskMatchesFindKeywordPredicate(tagInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.DEVELOPER_GUIDE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.USER_GUIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindTodoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class FindTodoCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskMatchesFindKeywordPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskMatchesFindKeywordPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand findFirstCommand \u003d new FindTodoCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand findSecondCommand \u003d new FindTodoCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand findFirstCommandCopy \u003d new FindTodoCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingDescription_noTodoFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateDesc(\"watch netflix\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand command \u003d new FindTodoCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_multipleKeywords_multipleTodosFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateDesc(\"update assignment\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand command \u003d new FindTodoCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(ASSIGNMENT, USER_GUIDE, DEVELOPER_GUIDE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingTag_noTodoFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateTag(\"Clown\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand command \u003d new FindTodoCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_existingTag_multipleTodosFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicateTag(\"cs2103t\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand command \u003d new FindTodoCommand(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(USER_GUIDE, DEVELOPER_GUIDE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_matchNameAndTag_multipleTodosFound() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicate(\"homework assignment guide\", \"cs2103T\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(USER_GUIDE, DEVELOPER_GUIDE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notMatchNameAndTag_noTodosFound() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d preparePredicate(\"homeweork chores\", \"cs2100\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses descInput into a {@code TaskMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskMatchesFindKeywordPredicate preparePredicateDesc(String descInput) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskMatchesFindKeywordPredicate(Arrays.asList(descInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses descInput and tagInput into a {@code TaskMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskMatchesFindKeywordPredicate preparePredicate(String descInput, String tagInput) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskMatchesFindKeywordPredicate(Arrays.asList(descInput.split(\"\\\\s+\")), tagInput);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses tagInput into a {@code TaskMatchesFindKeywordPredicate}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskMatchesFindKeywordPredicate preparePredicateTag(String tagInput) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskMatchesFindKeywordPredicate(tagInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, \"HELP\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LinkCollaborativeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.link.LinkCollaborativeCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.link.LinkCollaborativeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class LinkCollaborativeCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void constructor_nullMeetingLink_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LinkCollaborativeCommand(index, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ModelStubAcceptingTodoAdded modelStub \u003d new ModelStubAcceptingTodoAdded();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index index \u003d Index.fromOneBased(100);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink link \u003d new CollaborativeLink(\"Google Meet\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CommandResult commandResult \u003d new LinkCollaborativeCommand(index, link).execute(modelStub);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertEquals(new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_todoNotRecurring_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink link \u003d new CollaborativeLink(\"Google Meet\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo targetTodo \u003d (Todo) model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo editedTodo \u003d new TodoBuilder().withDescription(targetTodo.getDescription())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withDateTime(\"12-12-2020 2359\").withLink(link).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        System.out.println(editedTodo.getCollaborativeLink() \u003d\u003d null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        LinkCollaborativeCommand linkCollaborativeCommand \u003d new LinkCollaborativeCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                link);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, link.getDescription());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(targetTodo, editedTodo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(linkCollaborativeCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_todoRecurring_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink link \u003d new CollaborativeLink(\"Google Meet\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo targetTodo \u003d (Todo) model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo editedTodo \u003d new TodoBuilder().withDescription(\"do chores\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withDateTime(\"01-01-2020 1800\").withRecurrence(\"1 week\").withLink(link).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkCollaborativeCommand linkCollaborativeCommand \u003d new LinkCollaborativeCommand(INDEX_SECOND_TASK, link);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, link.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(targetTodo, editedTodo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(linkCollaborativeCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_indexNotTodo_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink link \u003d new CollaborativeLink(\"Google Meet\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkCollaborativeCommand linkCollaborativeCommand \u003d new LinkCollaborativeCommand(INDEX_SECOND_TASK, link);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_INDEX_NOT_TODO);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model todoModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(linkCollaborativeCommand, todoModel, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink googleLink \u003d new CollaborativeLink(\"Google Meet\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink zoomLink \u003d new CollaborativeLink(\"Zoom Meeting\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.zoom.com\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkCollaborativeCommand linkGoogle \u003d new LinkCollaborativeCommand(index, googleLink);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkCollaborativeCommand linkZoom \u003d new LinkCollaborativeCommand(index, zoomLink);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(linkGoogle.equals(linkGoogle));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkCollaborativeCommand linkZoomCopy \u003d new LinkCollaborativeCommand(index, zoomLink);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(linkZoom.equals(linkZoomCopy));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(linkGoogle.equals(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(linkGoogle.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(linkGoogle.equals(linkZoom));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // Needs to be null to update \"Due Soon\" section in GUI after adding a task."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredTaskListIsEmpty() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredAddressBookIsEmpty() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean taskListIsEmpty() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean addressBookIsEmpty() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * A Model stub that always accept the to-do being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private class ModelStubAcceptingTodoAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        final ArrayList\u003cTodo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean hasTask(Task todo) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return todosAdded.stream().anyMatch(todo::isSameTask);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            todosAdded.add(todo);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 306,
      "caleblyx": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LinkMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.link.LinkMeetingCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.link.LinkMeetingCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class LinkMeetingCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void constructor_nullMeetingLink_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LinkMeetingCommand(index, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ModelStubAcceptingLinkAdded modelStub \u003d new ModelStubAcceptingLinkAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index index \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink link \u003d new MeetingLink(\"Google Meet\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\", \"20-01-2020 2359\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CommandResult commandResult \u003d new LinkMeetingCommand(index, link).execute(modelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertEquals(new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX).toString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_eventNotRecurring_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink link \u003d new MeetingLink(\"Google Meet\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\", \"20-01-2020 2359\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event targetEvent \u003d (Event) model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().withDescription(\"meeting\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withStartDateTime(\"12-12-2020 1000\").withEndDateTime(\"12-12-2020 1130\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withTags(\"CS2103T\").withLink(link).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand linkMeetingCommand \u003d new LinkMeetingCommand(INDEX_FIRST_TASK, link);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, link.getDescriptionDateTime());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(targetEvent, editedEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(linkMeetingCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_eventRecurring_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink link \u003d new MeetingLink(\"Google Meet\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\", \"20-01-2020 2359\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event targetEvent \u003d (Event) model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Event editedEvent \u003d new EventBuilder().withDescription(\"party\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withStartDateTime(\"01-01-2020 1800\").withEndDateTime(\"02-01-2020 0600\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                .withRecurrence(\"1 year\").withLink(link).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand linkMeetingCommand \u003d new LinkMeetingCommand(INDEX_SECOND_TASK, link);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, link.getDescriptionDateTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedModel.setTask(targetEvent, editedEvent);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(linkMeetingCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_indexNotEvent_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink link \u003d new MeetingLink(\"Google Meet\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\", \"20-01-2020 2359\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand linkMeetingCommand \u003d new LinkMeetingCommand(INDEX_SECOND_TASK, link);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_INDEX_NOT_EVENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Model todoModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(linkMeetingCommand, todoModel, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink googleMeet \u003d new MeetingLink(\"Google Meet\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.google.com\", \"20-01-2020 2359\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink zoomLink \u003d new MeetingLink(\"Zoom Link\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"https://www.zoom.com\", \"20-01-2020 2359\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand linkGoogle \u003d new LinkMeetingCommand(index, googleMeet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand linkZoom \u003d new LinkMeetingCommand(index, zoomLink);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(linkGoogle.equals(linkGoogle));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand linkZoomCopy \u003d new LinkMeetingCommand(index, zoomLink);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(linkZoom.equals(linkZoomCopy));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(linkGoogle.equals(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(linkGoogle.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(linkGoogle.equals(linkZoom));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // Needs to be null to update \"Due Soon\" section in GUI after adding a task."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void markAsDone(Task target) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredTaskListIsEmpty() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean filteredAddressBookIsEmpty() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean taskListIsEmpty() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public boolean addressBookIsEmpty() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * A Model stub that always accept the to-do being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private class ModelStubAcceptingLinkAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        final ArrayList\u003cTodo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean hasTask(Task todo) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return todosAdded.stream().anyMatch(todo::isSameTask);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            todosAdded.add(todo);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 310,
      "caleblyx": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 2,
      "luciatirta": 4,
      "caleblyx": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListEventCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, ListEventCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, ListEventCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 39,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListTaskCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new ListTaskCommand(), model, ListTaskCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new ListTaskCommand(), model, ListTaskCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 40,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListTodoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new ListTodoCommand(), model, ListTodoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new ListTodoCommand(), model, ListTodoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 39,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.PersonNameComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskDateComparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortClearCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_SHOW_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_SHOW_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final TaskDateComparator TASKCOMPARATOR \u003d new TaskDateComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final PersonNameComparator PERSONCOMPARATOR \u003d new PersonNameComparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_sortedUnfilteredLists_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Sort lists using comparators to use it as an input for the test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortClearCommand sortClearCommand \u003d new SortClearCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortClearCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_sortedEmptyFilteredLists_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Sort lists using comparators to use it as an input for the test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Filter list using predicates to use it as an input for the test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_NO_TASKS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_NO_PERSONS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortClearCommand sortClearCommand \u003d new SortClearCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortClearCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyTaskList_successWithPrompt() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Sort lists using comparators to use it as an input for the test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortClearCommand sortClearCommand \u003d new SortClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortClearCommand.MESSAGE_EMPTY_TASKLIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortClearCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyAddressBook_successWithPrompt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Sort lists using comparators to use it as an input for the test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortClearCommand sortClearCommand \u003d new SortClearCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortClearCommand.MESSAGE_EMPTY_ADDRESSBOOK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortClearCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyLifeBook_successWithPrompt() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Sort lists using comparators to use it as an input for the test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortClearCommand sortClearCommand \u003d new SortClearCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortClearCommand.MESSAGE_EMPTY_LISTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortClearCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.PersonNameComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortContactCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_SHOW_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final PersonNameComparator PERSONCOMPARATOR \u003d new PersonNameComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_unsortedAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortContactCommand sortContactCommand \u003d new SortContactCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortContactCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortContactCommand sortContactCommand \u003d new SortContactCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortContactCommand.MESSAGE_EMPTY_PERSON_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyFilteredAddressBook_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Filter list using predicate to use it as an input for the test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_NO_PERSONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortContactCommand sortContactCommand \u003d new SortContactCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortContactCommand.MESSAGE_EMPTY_FILTERED_PERSON_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.updateSortedPersonList(PERSONCOMPARATOR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskDateComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortTaskCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_SHOW_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final TaskDateComparator TASKCOMPARATOR \u003d new TaskDateComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_unsortedTaskList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortTaskCommand sortTaskCommand \u003d new SortTaskCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortTaskCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyTaskList_successWithPrompt() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortTaskCommand sortTaskCommand \u003d new SortTaskCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortTaskCommand.MESSAGE_EMPTY_TASK_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void execute_emptyFilteredTaskList_successWithPrompt() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //Filter list using predicate to use it as an input for the test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_NO_TASKS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        SortTaskCommand sortTaskCommand \u003d new SortTaskCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        String expectedMessage \u003d String.format(SortTaskCommand.MESSAGE_EMPTY_FILTERED_TASK_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel.updateSortedTaskList(TASKCOMPARATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertCommandSuccess(sortTaskCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_SINGULAR_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_unknownCommand_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"randominput\", AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void parse_multipleFieldsPresent_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // multiple names - not accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE , PREFIX_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // multiple phones - not accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE , PREFIX_PHONE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // multiple emails - not accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE , PREFIX_EMAIL));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // multiple addresses - not accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE , PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddContactCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no command details"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact \", expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 30,
      "kevnw": 22,
      "luciatirta": 7,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_DESC \u003d \"desc/meeting \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_START_DATE \u003d \"startdate/12-12-2020 \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_START_TIME \u003d \"starttime/1000 \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_END_DATE \u003d \"enddate/12-12-2020 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_END_TIME \u003d \"endtime/1130\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_DESC \u003d \"desc/party \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_START_DATE \u003d \"startdate/01-01-2020 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_START_TIME \u003d \"starttime/1800 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_END_DATE \u003d \"enddate/02-01-2020 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_END_TIME \u003d \"endtime/0600 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_RECURRENCE \u003d \"recurring/1 year\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"startdate/1-15-2020 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"starttime/2500 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"enddate/1-15-2020 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"endtime/2500\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String INVALID_RECURRENCE_NUMBER \u003d \"recurring/0 day\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String INVALID_RECURRENCE_VALUE \u003d \"recurring/xxx\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_RECURRENCE_UNIT \u003d \"recurring/1 sleep\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder().withDescription(\"meeting\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                .withStartDateTime(\"12-12-2020 1000\").withEndDateTime(\"12-12-2020 1130\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_TIME"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_TIME"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing start date and time"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_END_DATE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing end date and time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_START_TIME, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no command details"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \", expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedDateMessage \u003d Messages.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedTimeMessage \u003d Messages.MESSAGE_INVALID_TIME_FORMAT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid startDate"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + INVALID_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, expectedDateMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid endDate"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + INVALID_END_DATE + MEETING_END_TIME, expectedDateMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid startTime"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + INVALID_START_TIME"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, expectedTimeMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid endTime"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + INVALID_END_TIME, expectedTimeMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithRecurrence() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(PARTY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + PARTY_END_DATE + PARTY_END_TIME + PARTY_RECURRENCE, new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithWrongRecurrenceInput() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // invalid recurrence number"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + PARTY_END_DATE + PARTY_END_TIME + INVALID_RECURRENCE_NUMBER, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid recurrence unit"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + PARTY_END_DATE + PARTY_END_TIME + INVALID_RECURRENCE_UNIT, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // invalid recurrence value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PARTY_END_DATE + PARTY_END_TIME + INVALID_RECURRENCE_VALUE, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 11,
      "lerxcl": 108,
      "caleblyx": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTodoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddTodoCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String HOMEWORK_DESC \u003d \"desc/homework \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String HOMEWORK_DATE \u003d \"date/12-12-2020 \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String HOMEWORK_TIME \u003d \"time/2359\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_DESC \u003d \"desc/do chores \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_DATE \u003d \"date/01-01-2020 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_TIME \u003d \"time/1800 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_RECURRENCE \u003d \"recurring/1 week\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_DATE \u003d \"date/1-15-2020 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_TIME \u003d \"time/2500\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String INVALID_RECURRENCE_NUMBER \u003d \"recurring/0 day\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String INVALID_RECURRENCE_VALUE \u003d \"recurring/xxx\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_RECURRENCE_UNIT \u003d \"recurring/1 sleep\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo expectedTodo \u003d new TodoBuilder(HOMEWORK).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_DATE + HOMEWORK_TIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DATE + HOMEWORK_TIME, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_TIME, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_DATE, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no command details"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \", expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedDateMessage \u003d Messages.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedTimeMessage \u003d Messages.MESSAGE_INVALID_TIME_FORMAT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + INVALID_DATE + HOMEWORK_TIME,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                expectedDateMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_DATE + INVALID_TIME,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                expectedTimeMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithRecurrence() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo expectedTodo \u003d new TodoBuilder(CHORES).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME + CHORES_RECURRENCE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithWrongRecurrenceInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // invalid recurrence number"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + INVALID_RECURRENCE_NUMBER, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid recurrence unit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + INVALID_RECURRENCE_UNIT, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // invalid recurrence value"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + INVALID_RECURRENCE_VALUE, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 11,
      "lerxcl": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.due.DueAtCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.link.LinkCollaborativeCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parseCommand_addContact() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new AddContactCommand(person), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parseCommand_addTodo() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand command \u003d (AddTodoCommand) parser.parseCommand(AddTodoCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                + \" todo desc/homework date/14-12-2020 time/2359\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(new AddTodoCommand(todo), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(AddEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + \" event desc/meeting startdate/12-12-2020 starttime/1000 enddate/12-12-2020 endtime/1130\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" contact \") instanceof ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" contact 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                DeleteContactCommand.COMMAND_WORD + \" contact \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new DeleteContactCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand command \u003d (EditContactCommand) parser.parseCommand(EditContactCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" contact i/\" + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new EditContactCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        List\u003cString\u003e keywordsName \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String keywordTag \u003d \"tag\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand command \u003d (FindContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                FindContactCommand.COMMAND_WORD + \" contact n/\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        + keywordsName.stream().collect(Collectors.joining(\" \")) + \" t/\" + keywordTag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(new FindContactCommand(new ContactMatchesFindKeywordPredicate(keywordsName, keywordTag)), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" contact \") instanceof ListContactCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void parseCommand_list_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            -\u003e parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseCommand_link() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        LinkCollaborativeCommand command \u003d (LinkCollaborativeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            LinkCommand.COMMAND_WORD + \" doc desc/proposal url/https://www.google.com i/1\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(new LinkCollaborativeCommand(ParserUtil.parseIndex(\"1\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new CollaborativeLink(\"proposal\", \"https://www.google.com\")), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseCommand_dueBefore() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(parser.parseCommand(DueBeforeCommand.COMMAND_WORD + \" date/12-10-2020 time/2359\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            instanceof DueBeforeCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseCommand_dueAt() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(parser.parseCommand(DueAtCommand.COMMAND_WORD + \" date/12-10-2020 time/2359\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            instanceof DueAtCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD + \" 1\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" contact\") instanceof SortCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseCommand_contactTaskTag() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(parser.parseCommand(ContactTaskTagCommand.COMMAND_WORD + \" t/CS2100 contactIndex/1 taskIndex/2\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            instanceof ContactTaskTagCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 6,
      "kevnw": 19,
      "luciatirta": 48,
      "lerxcl": 22,
      "caleblyx": 1,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            // Test should pass because a Prefix \"/\" was found,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            // but no list of prefix was given to tokenizer containing \"/\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            // No preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            // Only two arguments are present"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // All three arguments are present"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            // Arguments are no longer allowed to be repeated unless they are tags"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            // success"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            // This test should pass as only 1 argument is detected"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 32,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_CLEAR_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ClearCommandParser parser \u003d new ClearCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"random \", UNKNOWN_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \" \", UNKNOWN_CLEAR_COMMAND);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"contact\" , new ClearCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ContactTaskTagParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditPersonTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditTaskTags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EditPersonTagsBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EditTaskTagsBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class ContactTaskTagParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ContactTaskTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private ContactTaskTagParser parser \u003d new ContactTaskTagParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"t/test contactIndex/1 taskIndex/a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no args"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // no contactIndex"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"t/test taskIndex/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // no taskIndex"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"t/test contactIndex/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // no Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"contactIndex/1 taskIndex/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String userInput \u003d \"t/test contactIndex/1 taskIndex/1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index contactIndex \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        List\u003cString\u003e tag \u003d Arrays.asList(\"test\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditPersonTags editPersonTags \u003d new EditPersonTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        EditTaskTags editTaskTags \u003d new EditTaskTagsBuilder().withTags(\"test\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ContactTaskTagCommand expectedCommand \u003d new ContactTaskTagCommand(contactIndex, taskIndex,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                editPersonTags, editTaskTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 11,
      "lerxcl": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_DELETE_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DeleteContactCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event 1\", String.format(UNKNOWN_DELETE_COMMAND));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event a\", String.format(UNKNOWN_DELETE_COMMAND));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact 1\", new DeleteContactCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact a\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 5,
      "luciatirta": 8,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"task 1\", new DeleteTaskCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"task a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DoneParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DueAtParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueAtCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueAtPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueAtParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueAtCommandParser parser \u003d new DueAtCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueAtCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"date/12-12-20 time/2359\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"date/12-12-2020\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueAtCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"date/12-12-2020 time/5000\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_TIME_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDueAtCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtCommand expectedCommand \u003d new DueAtCommand(new DueAtPredicate(\"12-12-2020 2359\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"date/12-12-2020 time/2359\", expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 13,
      "lerxcl": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DueBeforeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueBeforeCommandParser parser \u003d new DueBeforeCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"date/12-12-20 time/2359\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"date/12-12-2020\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"date/12-12-2020 time/5000\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_TIME_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDueBeforeCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand expectedCommand \u003d new DueBeforeCommand(new DueBeforePredicate(\"12-12-2020 2359\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"date/12-12-2020 time/2359\", expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 13,
      "lerxcl": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_SINGULAR_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditContactCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\", EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"contact i/1 s/ string\", String.format(EXTRA_ARGUMENT_MESSAGE, \"s/\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE, PREFIX_PHONE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + TAG_EMPTY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact i/1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact i/\" + targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact i/\" + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact i/\" + targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact i/\" + targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact i/\" + targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact i/\" + targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact i/\" + targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void parse_multipleRepeatedFields_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact i/\" + targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE, PREFIX_PHONE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_failure() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact i/\" + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE, PREFIX_PHONE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact i/\" + targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(EXTRA_SINGULAR_ARGUMENT_MESSAGE, PREFIX_PHONE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact i/\" + targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 11,
      "kevnw": 47,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_FIND_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindContactCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(UNKNOWN_FIND_COMMAND));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact i/2\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String.format(EXTRA_ARGUMENT_MESSAGE, \"i/\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no tag keyword given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREFIX_TAG,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // more than one tag keyword given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREFIX_TAG + \"tag1 tag2\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no name keyword given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREFIX_NAME + \"  \" + PREFIX_TAG + \"tag\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no name keyword given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREFIX_NAME + \"  \","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no tag keyword given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREFIX_NAME + \"Nancy \" + PREFIX_TAG + \"tag1 tag2\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindContactCommand expectedFindContactCommandWithName \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindContactCommand(new ContactMatchesFindKeywordPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindContactCommand expectedFindContactCommandWithTag \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindContactCommand(new ContactMatchesFindKeywordPredicate(\"friends\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindContactCommand(new ContactMatchesFindKeywordPredicate(Arrays.asList(\"Alice\", \"Bob\"), \"friends\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no leading and trailing whitespaces name keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + PREFIX_NAME + \"Alice Bob\", expectedFindContactCommandWithName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"contact \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_NAME + \"\\n Alice \\n \\t Bob  \\t\", expectedFindContactCommandWithName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // tag keyword given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + PREFIX_TAG + \"friends\", expectedFindContactCommandWithTag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // both name and tag keyword given"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"contact \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_NAME + \"Alice Bob \" + PREFIX_TAG + \"friends\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "kevnw": 5,
      "luciatirta": 50,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class FindEventCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no prefix"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event     \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"event i/2\", String.format(EXTRA_ARGUMENT_MESSAGE, \"i/\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no tag keyword given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \" + PREFIX_TAG,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // more than one tag keyword given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \" + PREFIX_TAG + \"tag1 tag2\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no desc keyword given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \" + PREFIX_DESCRIPTION + \"  \" + PREFIX_TAG + \"tag\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no desc keyword given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \" + PREFIX_DESCRIPTION + \"  \","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no tag keyword given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"event \" + PREFIX_DESCRIPTION + \"desc \" + PREFIX_TAG + \"tag1 tag2\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand expectedFindEventCommandWithDesc \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindEventCommand(new TaskMatchesFindKeywordPredicate(Arrays.asList(\"workshop\", \"meeting\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand expectedFindEventCommandWithTag \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindEventCommand(new TaskMatchesFindKeywordPredicate(\"urgent\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand expectedFindEventCommand \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindEventCommand(new TaskMatchesFindKeywordPredicate(Arrays.asList(\"workshop\", \"meeting\"), \"urgent\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no leading and trailing whitespaces desc keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"event \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"workshop meeting\", expectedFindEventCommandWithDesc);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"event \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"\\n workshop \\n \\t meeting  \\t\", expectedFindEventCommandWithDesc);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // tag keyword given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"event \" + PREFIX_TAG + \"urgent\", expectedFindEventCommandWithTag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // both desc and tag keyword given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"event \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"workshop meeting \" + PREFIX_TAG + \"urgent\", expectedFindEventCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "luciatirta": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindTodoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindTodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskMatchesFindKeywordPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class FindTodoCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no prefix"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo     \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"todo i/2\", String.format(EXTRA_ARGUMENT_MESSAGE, \"i/\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no tag keyword given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \" + PREFIX_TAG,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // more than one tag keyword given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \" + PREFIX_TAG + \"tag1 tag2\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no desc keyword given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \" + PREFIX_DESCRIPTION + \"  \" + PREFIX_TAG + \"tag\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no desc keyword given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \" + PREFIX_DESCRIPTION + \"  \","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no tag keyword given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"todo \" + PREFIX_DESCRIPTION + \"desc \" + PREFIX_TAG + \"tag1 tag2\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand expectedFindTodoCommandWithDesc \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindTodoCommand(new TaskMatchesFindKeywordPredicate(Arrays.asList(\"homework\", \"quiz\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand expectedFindTodoCommandWithTag \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindTodoCommand(new TaskMatchesFindKeywordPredicate(\"cs2100\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand expectedFindTodoCommand \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new FindTodoCommand(new TaskMatchesFindKeywordPredicate(Arrays.asList(\"homework\", \"quiz\"), \"cs2100\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // no leading and trailing whitespaces desc keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"todo \" + PREFIX_DESCRIPTION + \"homework quiz\", expectedFindTodoCommandWithDesc);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"todo \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"\\n homework \\n \\t quiz  \\t\", expectedFindTodoCommandWithDesc);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // tag keyword given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"todo \" + PREFIX_TAG + \"cs2100\", expectedFindTodoCommandWithTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // both desc and tag keyword given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"todo \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"homework quiz \" + PREFIX_TAG + \"cs2100\", expectedFindTodoCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "luciatirta": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LinkCollaborativeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.link.LinkCollaborativeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class LinkCollaborativeCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            LinkCollaborativeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private LinkCommandParser parser \u003d new LinkCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"idontknow \", LinkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"doc \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no description specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"doc i/1 url/https://www.google.com\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no url specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"doc i/1 desc/test\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"doc i/-5 \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + VALID_DESCRIPTION + \" \" + PREFIX_URL + VALID_URL, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"doc i/0\" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + VALID_DESCRIPTION + \" \" + PREFIX_URL + VALID_URL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"doc i/1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // invalid prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"doc i/1 s/ string\", String.format(EXTRA_ARGUMENT_MESSAGE, \"s/\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CollaborativeLink link \u003d new CollaborativeLink(VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                VALID_URL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"doc i/\" + targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_DESCRIPTION + VALID_DESCRIPTION + \" \" + PREFIX_URL + VALID_URL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkCollaborativeCommand expectedCommand \u003d new LinkCollaborativeCommand(targetIndex, link);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LinkMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.EXTRA_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_TUTOR_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.link.LinkMeetingCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class LinkMeetingCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            LinkMeetingCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private LinkCommandParser parser \u003d new LinkCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"idontknow \", LinkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"meeting \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no description specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"meeting i/1 url/https://www.google.com\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no url specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"meeting i/1 desc/test\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"meeting i/1 desc/test url/https://www.google.com time/2359\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // no time specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \"meeting i/1 desc/test url/https://www.google.com date/29-10-2020\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"meeting i/-5 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_DESCRIPTION + VALID_DESCRIPTION + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_URL + VALID_URL + \" \" + PREFIX_DATE + \"20-01-2020 \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_TIME + \"2359\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"meeting i/0\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_DESCRIPTION + VALID_DESCRIPTION + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_URL + VALID_URL + \" \" + PREFIX_DATE + \"20-01-2020 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_TIME + \"2359\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"meeting i/1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // invalid prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertParseFailure(parser, \"meeting i/1 s/ string\", String.format(EXTRA_ARGUMENT_MESSAGE, \"s/\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        MeetingLink link \u003d new MeetingLink(VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                VALID_URL, VALID_DATE_TIME_TUTOR_MEETING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"meeting i/\" + targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PREFIX_DESCRIPTION + VALID_DESCRIPTION + \" \" + PREFIX_URL"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + VALID_URL + \" \" + PREFIX_DATE + \"10-12-2017 \" + PREFIX_TIME + \"1445\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        LinkMeetingCommand expectedCommand \u003d new LinkMeetingCommand(targetIndex, link);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.list.ListEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.list.ListTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.list.ListTodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_invalidCommand_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseFailure(parser, \"random \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"contact\" , new ListContactCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"event\" , new ListEventCommand());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"todo\" , new ListTodoCommand());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertParseSuccess(parser, \"task\" , new ListTaskCommand());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String INVALID_LINK \u003d \"thisisalink\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void parseLink_invalidLink_failure() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.validateLink(INVALID_LINK));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 6,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //\"clear\" is a valid option for sorting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertParseSuccess(parser, \"clear\", new SortClearCommand());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //\"contact is a valid option for sorting"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertParseSuccess(parser, \"contact\", new SortContactCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        //\"task\" is a valid option for sorting"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertParseSuccess(parser, \"task\", new SortTaskCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.time.temporal.ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.HOMEWORK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void hasTask_taskNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(modelManager.hasTask(HOMEWORK));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void hasTask_taskInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        modelManager.addTask(HOMEWORK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(modelManager.hasTask(HOMEWORK));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void notADueSoonTask_taskInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        LocalDateTime currentDateTimePlusOneMonth \u003d LocalDateTime.now().plus(1, MONTHS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().withDateTime(currentDateTimePlusOneMonth).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        modelManager.addTask(todo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(modelManager.getDueSoonTaskList().size() \u003e 0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void notADueSoonTask_taskBeforeCurrentDateTimeInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        LocalDateTime currentDateTimePlusOneMonth \u003d LocalDateTime.now().minus(1, MONTHS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().withDateTime(currentDateTimePlusOneMonth).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        modelManager.addTask(todo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(modelManager.getDueSoonTaskList().size() \u003e 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void hasDueSoonTask_taskInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        LocalDateTime currentDateTimePlusAlmostAWeek \u003d LocalDateTime.now().plus(6, DAYS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().withDateTime(currentDateTimePlusAlmostAWeek).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        modelManager.addTask(todo);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(modelManager.getDueSoonTaskList().get(0).equals(todo));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, new TaskList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, new TaskList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, new TaskList())));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different filteredPersonList -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, new TaskList())));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, new TaskList())));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 52,
      "caleblyx": 5,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ContactMatchesFindKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ContactMatchesFindKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        List\u003cString\u003e firstPredicateNameKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String firstPredicateTagKeyword \u003d \"first\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        List\u003cString\u003e secondPredicateNameKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String secondPredicateTagKeyword \u003d \"second\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate firstPredicate \u003d new ContactMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            firstPredicateNameKeywordList, firstPredicateTagKeyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate secondPredicate \u003d new ContactMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            secondPredicateNameKeywordList, firstPredicateTagKeyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate thirdPredicate \u003d new ContactMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            firstPredicateNameKeywordList, secondPredicateTagKeyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate firstPredicateCopy \u003d new ContactMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            firstPredicateNameKeywordList, firstPredicateTagKeyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different name keyword -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different tag keyword -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void test_contactMatchesKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // One name keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new ContactMatchesFindKeywordPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Multiple name keywords matching tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new ContactMatchesFindKeywordPredicate(Arrays.asList(\"Alice\", \"Bob\"), \"friends\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"colleagues\", \"friends\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Only one matching name keyword matching tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new ContactMatchesFindKeywordPredicate(Arrays.asList(\"Bob\", \"Carol\"), \"classmate\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").withTags(\"classmate\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Mixed-case name keywords mixed-case matching tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new ContactMatchesFindKeywordPredicate(Arrays.asList(\"aLIce\", \"bOB\"), \"fRiENds\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"friends\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void test_contactDoesNotMatch_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactMatchesFindKeywordPredicate predicate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Non-matching name keyword"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new ContactMatchesFindKeywordPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Non-matching tag keyword"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new ContactMatchesFindKeywordPredicate(Arrays.asList(\"Alice\"), \"friends\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withTags(\"colleagues\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new ContactMatchesFindKeywordPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/CollaborativeLinkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL_DOCUMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_TUTORIAL_DOCUMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalLinks.PROJECT_DOCUMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalLinks.PROJECT_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalLinks.TUTORIAL_DOCUMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.testutil.CollaborativeLinkBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class CollaborativeLinkTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CollaborativeLink(null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void constructor_invalidUrl_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String invalidUrl \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CollaborativeLink(VALID_DESCRIPTION_TUTORIAL_DOCUMENT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                invalidUrl));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        CollaborativeLink projectMeetingCopy \u003d new CollaborativeLinkBuilder(PROJECT_DOCUMENT).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(PROJECT_DOCUMENT.equals(projectMeetingCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(PROJECT_DOCUMENT.equals(PROJECT_DOCUMENT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_DOCUMENT.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_DOCUMENT.equals(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_DOCUMENT.equals(PROJECT_MEETING));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_DOCUMENT.equals(TUTORIAL_DOCUMENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        CollaborativeLink editedProjectMeeting \u003d new CollaborativeLinkBuilder(PROJECT_DOCUMENT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTORIAL_DOCUMENT).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_DOCUMENT.equals(editedProjectMeeting));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different URL -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedProjectMeeting \u003d new CollaborativeLinkBuilder(PROJECT_DOCUMENT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withUrl(VALID_URL_TUTORIAL_DOCUMENT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_DOCUMENT.equals(editedProjectMeeting));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DueAtPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueAtPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_tasksDueAt_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        DueAtPredicate predicate \u003d new DueAtPredicate(\"14-12-2020 2359\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do (homework)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event (meeting)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        predicate \u003d new DueAtPredicate(\"12-12-2020 1130\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_noTasksDueAt_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate predicate \u003d new DueAtPredicate(\"15-12-2020 2359\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String firstDateTime \u003d \"10-10-2010 1010\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String secondDateTime \u003d \"20-12-2020 2359\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate firstPredicate \u003d new DueAtPredicate(firstDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate secondPredicate \u003d new DueAtPredicate(secondDateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueAtPredicate firstPredicateCopy \u003d new DueAtPredicate(firstDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 58,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DueBeforePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforePredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_tasksDueBefore_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate predicate \u003d new DueBeforePredicate(\"20-12-2020 2359\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do (homework)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event (meeting)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_noTasksDueBefore_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate predicate \u003d new DueBeforePredicate(\"01-01-2020 2359\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String firstDateTime \u003d \"10-10-2010 1010\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String secondDateTime \u003d \"20-12-2020 2359\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate firstPredicate \u003d new DueBeforePredicate(firstDateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate secondPredicate \u003d new DueBeforePredicate(secondDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate firstPredicateCopy \u003d new DueBeforePredicate(firstDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_CLEAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CLEAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e event.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void isSameTodo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(LECTURE.isSameEvent(LECTURE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.isSameEvent(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description and start datetime -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Event editedLecture \u003d new EventBuilder(LECTURE).withDescription(VALID_DESCRIPTION_CLEAN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withStartDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.isSameEvent(editedLecture));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedLecture \u003d new EventBuilder(LECTURE).withDescription(VALID_DESCRIPTION_CLEAN).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.isSameEvent(editedLecture));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different start datetime -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedLecture \u003d new EventBuilder(LECTURE).withStartDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.isSameEvent(editedLecture));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different end datetime -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedLecture \u003d new EventBuilder(LECTURE).withEndDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.isSameEvent(editedLecture));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // exact same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(LECTURE.equals(LECTURE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different todo -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(MEETING));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description and datetime -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Event editedLecture \u003d new EventBuilder(LECTURE).withDescription(VALID_DESCRIPTION_CLEAN)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withStartDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedLecture \u003d new EventBuilder(LECTURE).withDescription(VALID_DESCRIPTION_CLEAN).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different start date time -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedLecture \u003d new EventBuilder(LECTURE).withStartDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different end date time -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedLecture \u003d new EventBuilder(LECTURE).withEndDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/LinkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class LinkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void isValidLink() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null url"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Link.isValidUrl(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // invalid url"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(Link.isValidUrl(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(Link.isValidUrl(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(Link.isValidUrl(\"zoom\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(Link.isValidUrl(\"zoom.com\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(Link.isValidUrl(\"98112031234\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(Link.isValidUrl(\"https://.\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // valid url"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(Link.isValidUrl(\"https://nus-sg.zoom.us/j/85350904475?pwd\u003dT0JwTEIwNjRuMnNKUEt4L2RBMFJWZz09\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(Link.isValidUrl(\"https://www.example.com\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/MeetingLinkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_TUTOR_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTOR_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_TUTOR_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalLinks.PROJECT_DOCUMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalLinks.PROJECT_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalLinks.TUTOR_MEETING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.testutil.MeetingLinkBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class MeetingLinkTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MeetingLink(null, null, (String) null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MeetingLink(null, null, (LocalDateTime) null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void constructor_invalidUrl_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String invalidUrl \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MeetingLink(VALID_DESCRIPTION_TUTOR_MEETING,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                invalidUrl, VALID_DATE_TIME_TUTOR_MEETING));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        MeetingLink projectMeetingCopy \u003d new MeetingLinkBuilder(PROJECT_MEETING).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String snoozeTime \u003d \"12-12-3030 2359\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // Test bad input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e projectMeetingCopy.snooze(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e projectMeetingCopy.snooze(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e projectMeetingCopy.snooze(\"abc\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e projectMeetingCopy.snooze(\"123\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e projectMeetingCopy.snooze(\"22-22-2222 2222\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        MeetingLink projectMeetingSnooze \u003d new MeetingLinkBuilder(PROJECT_MEETING).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        projectMeetingSnooze.snooze(snoozeTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(projectMeetingSnooze.getDateTime().equals(PROJECT_MEETING.getDateTime()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        MeetingLink editedProjectMeeting \u003d new MeetingLinkBuilder(PROJECT_MEETING).withDatetime(snoozeTime).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(projectMeetingSnooze.getDateTime().equals(editedProjectMeeting.getDateTime()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        MeetingLink projectMeetingCopy \u003d new MeetingLinkBuilder(PROJECT_MEETING).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(PROJECT_MEETING.equals(projectMeetingCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(PROJECT_MEETING.equals(PROJECT_MEETING));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(PROJECT_DOCUMENT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(TUTOR_MEETING));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        MeetingLink editedProjectMeeting \u003d new MeetingLinkBuilder(PROJECT_MEETING)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTOR_MEETING).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(editedProjectMeeting));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different datetime -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedProjectMeeting \u003d new MeetingLinkBuilder(PROJECT_MEETING)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withDatetime(VALID_DATE_TIME_TUTOR_MEETING).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(editedProjectMeeting));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different URL -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedProjectMeeting \u003d new MeetingLinkBuilder(PROJECT_MEETING)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withUrl(VALID_URL_TUTOR_MEETING).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(PROJECT_MEETING.equals(editedProjectMeeting));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskMatchesFindKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class TaskMatchesFindKeywordPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        List\u003cString\u003e firstPredicateNameKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String firstPredicateTagKeyword \u003d \"first\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        List\u003cString\u003e secondPredicateNameKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String secondPredicateTagKeyword \u003d \"second\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate firstPredicate \u003d new TaskMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            firstPredicateNameKeywordList, firstPredicateTagKeyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate secondPredicate \u003d new TaskMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            secondPredicateNameKeywordList, firstPredicateTagKeyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate thirdPredicate \u003d new TaskMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            firstPredicateNameKeywordList, secondPredicateTagKeyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate firstPredicateCopy \u003d new TaskMatchesFindKeywordPredicate("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            firstPredicateNameKeywordList, firstPredicateTagKeyword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different desc keyword -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different tag keyword -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void test_eventMatchesKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // One desc keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskMatchesFindKeywordPredicate(Collections.singletonList(\"meeting\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withDescription(\"Attend meeting\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Multiple name keywords matching tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"Attend\", \"meeting\"), \"important\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withDescription(\"Attend meeting\").withTags(\"urgent\", \"important\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Only one matching name keyword matching tag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"Homework\", \"meeting\"), \"important\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withDescription(\"Attend meeting\").withTags(\"important\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Mixed-case name keywords mixed-case matching tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"atteND\", \"meEtinG\"), \"imPORtanT\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().withDescription(\"Attend meeting\").withTags(\"important\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void test_todoMatchesKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // One desc keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskMatchesFindKeywordPredicate(Collections.singletonList(\"quiz\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().withDescription(\"Do quiz\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Multiple name keywords matching tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"Do\", \"quiz\"), \"cs2100\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().withDescription(\"Do quiz\").withTags(\"urgent\", \"cs2100\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Only one matching name keyword matching tag"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"Do\", \"quiz\"), \"cs2100\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().withDescription(\"Do quiz\").withTags(\"cs2100\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Mixed-case name keywords mixed-case matching tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"DO\", \"qUiZ\"), \"cS2100\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().withDescription(\"Do quiz\").withTags(\"cs2100\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void test_eventDoesNotMatchKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Non-matching desc keyword"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"party\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withDescription(\"Attend meeting\").build()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Non-matching tag keyword"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"meeting\"), \"unimportant\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().withDescription(\"Attend meeting\").withTags(\"important\").build()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void test_todoDoesNotMatchKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskMatchesFindKeywordPredicate predicate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Non-matching desc keyword"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"party\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new TodoBuilder().withDescription(\"Do quiz\").build()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // Non-matching tag keyword"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        predicate \u003d new TaskMatchesFindKeywordPredicate(Arrays.asList(\"quiz\"), \"unimportant\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(predicate.test(new TodoBuilder().withDescription(\"Do quiz\").withTags(\"important\").build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TodoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_CLEAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CLEAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e todo.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void isSameTodo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTodo(ASSIGNMENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTodo(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description and datetime -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Todo editedAssignment \u003d new TodoBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_CLEAN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTodo(editedAssignment));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedAssignment \u003d new TodoBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_CLEAN).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTodo(editedAssignment));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different date an timed -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedAssignment \u003d new TodoBuilder(ASSIGNMENT).withDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTodo(editedAssignment));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // exact same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertTrue(ASSIGNMENT.equals(ASSIGNMENT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different todo -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.equals(CHORES));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description and datetime -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Todo editedAssignment \u003d new TodoBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_CLEAN)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                .withDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.equals(editedAssignment));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedAssignment \u003d new TodoBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_CLEAN).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.equals(editedAssignment));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        editedAssignment \u003d new TodoBuilder(ASSIGNMENT).withDateTime(VALID_DATE_TIME_CLEAN).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertFalse(ASSIGNMENT.equals(editedAssignment));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 71,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.WORKSHOP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedEventTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String INVALID_LINK_TIME \u003d \"05-20-2020 0900\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String INVALID_LINK_URL \u003d \"invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String INVALID_TAG \u003d \"#CS2100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d WORKSHOP.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final LocalDateTime VALID_START_DATE_TIME \u003d WORKSHOP.getStart();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final LocalDateTime VALID_END_DATE_TIME \u003d WORKSHOP.getEnd();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Boolean VALID_IS_DONE \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_LINK_DESCRIPTION \u003d \"Workshop meeting link\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_LINK_URL \u003d \"https://www.isvalidlink.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_LINK_TIME \u003d \"20-05-2020 0900\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final MeetingLink VALID_MEETING_LINK \u003d new MeetingLink(VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            VALID_LINK_URL, VALID_LINK_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Recurrence VALID_RECURRENCE \u003d new Recurrence(1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \"day\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final JsonAdaptedRecurrence VALID_JSON_ADAPTED_RECURRENCE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new JsonAdaptedRecurrence(VALID_RECURRENCE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d WORKSHOP.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(WORKSHOP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(WORKSHOP, event.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(null, VALID_IS_DONE, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullIsDone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, null, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullStartDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, null,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullEndDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullLinkDescription_returnsEvent() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Event modelEvent \u003d new Event(VALID_IS_DONE, VALID_DESCRIPTION, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_RECURRENCE, WORKSHOP.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelEvent, event.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullLinkUrl_returnsEvent() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Event modelEvent \u003d new Event(VALID_IS_DONE, VALID_DESCRIPTION, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_RECURRENCE, WORKSHOP.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                null, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelEvent, event.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_blankLinkUrl_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                BLANK, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, event::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidLinkUrl_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                INVALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, event::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidLinkTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                INVALID_LINK_URL, INVALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, event::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullRecurrence_returnsEvent() throws IllegalValueException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Event modelEvent \u003d new Event(VALID_IS_DONE, VALID_DESCRIPTION, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_MEETING_LINK, WORKSHOP.getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelEvent, event.toModelType());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullRecurrenceNullLink_returnsEvent() throws IllegalValueException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Event modelEvent \u003d new Event(VALID_IS_DONE, VALID_DESCRIPTION, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                WORKSHOP.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                null, VALID_LINK_TIME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelEvent, event.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, VALID_IS_DONE, VALID_START_DATE_TIME,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_LINK_TIME, VALID_JSON_ADAPTED_RECURRENCE, invalidTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRecurrenceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedRecurrenceTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Recurrence VALID_RECURRENCE \u003d new Recurrence(1,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \"day\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final int INVALID_INTEGER_INPUT \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final ChronoUnit VALID_UNIT_INPUT \u003d ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_validRecurrenceDetails_returnsRecurrence() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedRecurrence recurrence \u003d new JsonAdaptedRecurrence(VALID_RECURRENCE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(VALID_RECURRENCE, recurrence.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidRecurrenceDetails_returnsRecurrence() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedRecurrence recurrence \u003d new JsonAdaptedRecurrence(INVALID_INTEGER_INPUT, VALID_UNIT_INPUT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(AssertionError.class , recurrence::toModelType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTodoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.HOMEWORK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.USER_GUIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedTodoTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String INVALID_LINK_URL \u003d \"invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String INVALID_TAG \u003d \"#CS2100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d HOMEWORK.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final LocalDateTime VALID_DEADLINE \u003d LocalDateTime.of(2020, 05, 15, 20, 00);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Boolean VALID_IS_DONE \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_LINK_DESCRIPTION \u003d \"Project google document\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String VALID_LINK_URL \u003d \"https://www.isvalidlink.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final CollaborativeLink VALID_COLLABORATIVE_LINK \u003d new CollaborativeLink(VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            VALID_LINK_URL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Recurrence VALID_RECURRENCE \u003d new Recurrence(1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \"day\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final JsonAdaptedRecurrence VALID_JSON_ADAPTED_RECURRENCE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new JsonAdaptedRecurrence(VALID_RECURRENCE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d USER_GUIDE.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_validTodoDetails_returnsTodo() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(HOMEWORK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(HOMEWORK, todo.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(null, VALID_IS_DONE, VALID_DEADLINE, VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, todo::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullIsDone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, null, VALID_DEADLINE, VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, todo::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, null, VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, todo::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullLinkDescription_throwsNullPointerException() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo modelTodo \u003d new Todo(VALID_IS_DONE, VALID_DESCRIPTION, VALID_DEADLINE, VALID_RECURRENCE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        USER_GUIDE.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE, null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelTodo, todo.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_blankLinkDescription_returnsTodo() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo modelTodo \u003d new Todo(VALID_IS_DONE, VALID_DESCRIPTION, VALID_DEADLINE, VALID_RECURRENCE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new CollaborativeLink(BLANK, VALID_LINK_URL),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                USER_GUIDE.getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE, BLANK,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelTodo, todo.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullLinkUrl_returnsTodo() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo modelTodo \u003d new Todo(VALID_IS_DONE, VALID_DESCRIPTION, VALID_DEADLINE, VALID_RECURRENCE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                USER_GUIDE.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION, null, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelTodo, todo.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_blankLinkUrl_throwsIllegalArgumentException() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION, BLANK, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, todo::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidLinkUrl_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo modelTodo \u003d new Todo(VALID_IS_DONE, VALID_DESCRIPTION, VALID_DEADLINE, VALID_RECURRENCE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                USER_GUIDE.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                INVALID_LINK_URL, VALID_JSON_ADAPTED_RECURRENCE, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, todo::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_nullRecurrence_returnsTodo() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo modelTodo \u003d new Todo(VALID_IS_DONE, VALID_DESCRIPTION, VALID_DEADLINE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_COLLABORATIVE_LINK,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                USER_GUIDE.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION, VALID_LINK_URL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelTodo, todo.toModelType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_blankLinkDescriptionNullRecurrence_returnsTodo()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Todo modelTodo \u003d new Todo(VALID_IS_DONE, VALID_DESCRIPTION, VALID_DEADLINE, new CollaborativeLink(BLANK,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_URL),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                USER_GUIDE.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \"\", VALID_LINK_URL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(modelTodo, todo.toModelType());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_blankLinkUrlNullRecurrence_throwsIllegalArgumentException()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION, BLANK, null, VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, todo::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonAdaptedTodo todo \u003d new JsonAdaptedTodo(VALID_DESCRIPTION, VALID_IS_DONE, VALID_DEADLINE,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                VALID_LINK_DESCRIPTION, VALID_LINK_URL, null, invalidTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, todo::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.testutil.TypicalTodos;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonSerializableTaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path TYPICAL_TODOS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTodosTaskList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsTaskList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path INVALID_TODOS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTodoTaskList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path INVALID_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventTaskList.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path DUPLICATE_TODOS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTodoTaskList.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path DUPLICATE_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventTaskList.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_typicalTodosFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TODOS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList taskListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList typicalTasksTaskList \u003d TypicalTodos.getTypicalTodosTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(taskListFromFile, typicalTasksTaskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidTodoFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TODOS_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_duplicateTodos_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TODOS_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTaskList.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_typicalEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EVENTS_FILE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList taskListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList typicalTasksTaskList \u003d TypicalEvents.getTypicalEventsTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(taskListFromFile, typicalTasksTaskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENTS_FILE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EVENTS_FILE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTaskList.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTaskListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.WORKSHOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.HOMEWORK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonTaskListStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaskListStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void readTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaskList(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskList\u003e readTaskList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new JsonTaskListStorage(Paths.get(filePath)).readTaskList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(readTaskList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskList(\"notJsonFormatTaskList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void readTaskList_invalidTaskTaskList_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskList(\"invalidTaskTaskList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void readTaskList_invalidAndValidTaskTaskList_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskList(\"invalidAndValidTaskTaskList.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void readAndSaveTodoTaskList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTaskList.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList original \u003d getTypicalTodosTaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage jsonTaskListStorage \u003d new JsonTaskListStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyTaskList readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        original.addTask(WORKSHOP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        original.removeTask(HOMEWORK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        original.addTask(LECTURE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void readAndSaveEventTaskList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTaskList.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList original \u003d getTypicalEventsTaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage jsonTaskListStorage \u003d new JsonTaskListStorage(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyTaskList readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        original.addTask(CHORES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        original.removeTask(PARTY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        original.addTask(HOMEWORK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original); // file path not specified"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList().get(); // file path not specified"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Saves {@code taskList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private void saveTaskList(ReadOnlyTaskList taskList, String filePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new JsonTaskListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    .saveTaskList(taskList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(new TaskList(), null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(getTempFilePath(\"tl\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void taskListReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList original \u003d getTypicalTodosTaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        storageManager.saveTaskList(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyTaskList retrieved \u003d storageManager.readTaskList().get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(original, new TaskList(retrieved));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void getTaskListFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertNotNull(storageManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 21,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CollaborativeLinkBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * A utility class to help with building MeetingLink objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class CollaborativeLinkBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Project Document\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String DEFAULT_URL \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            \"https://docs.google.com/document/d/1oAObtne793B1nDX123hrbAdEy1aoeua5cTuabc326L4c/edit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Creates a {@code MeetingLink} with the default details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CollaborativeLinkBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        url \u003d DEFAULT_URL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Initializes the MeetingLinkBuilder with the data of {@code meetingToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CollaborativeLinkBuilder(CollaborativeLink meetingToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        description \u003d meetingToCopy.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        url \u003d meetingToCopy.getUrl();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Sets the {@code Description} of the {@code MeetingLink} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CollaborativeLinkBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Sets the {@code URL} of the {@code MeetingLink} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CollaborativeLinkBuilder withUrl(String url) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CollaborativeLink build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return new CollaborativeLink(description, url);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonTagsBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditPersonTags;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class to help with building EditPersonTags objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class EditPersonTagsBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private EditPersonTags editPersonTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditPersonTagsBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editPersonTags \u003d new EditPersonTags();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditPersonTagsBuilder(EditPersonTags editPersonTags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.editPersonTags \u003d new EditPersonTags(editPersonTags);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns a {@code EditPersonTags} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditPersonTagsBuilder(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editPersonTags \u003d new EditPersonTags();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editPersonTags.setTags(person.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonTags}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditPersonTagsBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editPersonTags.setTags(tagSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditPersonTags build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return editPersonTags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskTagsBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.ContactTaskTagCommand.EditTaskTags;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class to help with building EditTaskTags objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class EditTaskTagsBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private EditTaskTags editTaskTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditTaskTagsBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editTaskTags \u003d new EditTaskTags();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditTaskTagsBuilder(EditTaskTags editTaskTags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.editTaskTags \u003d new EditTaskTags(editTaskTags);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns a {@code EditTaskTags} with fields containing {@code Task}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditTaskTagsBuilder(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editTaskTags \u003d new EditTaskTags();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editTaskTags.setTags(task.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskTags}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditTaskTagsBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        editTaskTags.setTags(tagSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EditTaskTags build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return editTaskTags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class to help with building To-do objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_DESC \u003d \"meeting\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_STARTDATETIME \u003d \"12-12-2020 1000\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_ENDDATETIME \u003d \"12-12-2020 1130\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String startDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String endDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private MeetingLink link;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates a {@code EventBuilder} with the default details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d DEFAULT_DESC;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        startDateTime \u003d DEFAULT_STARTDATETIME;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        endDateTime \u003d DEFAULT_ENDDATETIME;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code EventToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        startDateTime \u003d eventToCopy.getStartDateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        endDateTime \u003d eventToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d eventToCopy.getRecurrence();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        link \u003d eventToCopy.getMeetingLink();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Description} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code startDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withStartDateTime(String startDateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code endDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Recurrence} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withRecurrence(String recurrenceInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Sets the {@code MeetingLink} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EventBuilder withLink(MeetingLink link) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new Event(description, startDateTime, endDateTime, recurrence, link, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 11,
      "luciatirta": 15,
      "lerxcl": 88,
      "caleblyx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingLinkBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * A utility class to help with building MeetingLink objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class MeetingLinkBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Project Meeting\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"03-03-2020 1411\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String DEFAULT_URL \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            \"https://nus-sg.zoom.us/j/85350904475?pwd\u003dT0JwTEIwNjRuMnNKUEt4L2RBMFJWZz09\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String datetime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Initializes the MeetingLinkBuilder with default data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLinkBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        datetime \u003d DEFAULT_DATETIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        url \u003d DEFAULT_URL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Initializes the MeetingLinkBuilder with the data of {@code meetingToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLinkBuilder(MeetingLink meetingToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        description \u003d meetingToCopy.getRawDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        datetime \u003d meetingToCopy.getDateTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        url \u003d meetingToCopy.getUrl();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Sets the {@code Description} of the {@code MeetingLink} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLinkBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Sets the {@code DateTime} of the {@code MeetingLink} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLinkBuilder withDatetime(String datetime) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Sets the {@code URL} of the {@code MeetingLink} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLinkBuilder withUrl(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLink build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return new MeetingLink(description, url, datetime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" contact \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TodoBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class to help with building To-do objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class TodoBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_DESC \u003d \"homework\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final String DEFAULT_DATETIME \u003d \"14-12-2020 2359\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private CollaborativeLink link;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates a {@code TodoBuilder} with the default details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d DEFAULT_DESC;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        dateTime \u003d LocalDateTime.parse(DEFAULT_DATETIME, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Initializes the TodoBuilder with the data of {@code TodoToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder(Todo todoToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d todoToCopy.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        dateTime \u003d todoToCopy.getDeadline();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d todoToCopy.getRecurrence();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        link \u003d todoToCopy.getCollaborativeLink();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(todoToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Description} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code DateTime} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code DateTime} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Recurrence} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withRecurrence(String recurrenceInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Sets the {@code CollaborativeLink} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public TodoBuilder withLink(CollaborativeLink link) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Todo} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TodoBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Todo build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new Todo(description, dateTime, recurrence, link, tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 11,
      "luciatirta": 15,
      "lerxcl": 79,
      "caleblyx": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class containing a list of {@code Events} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Event MEETING \u003d new EventBuilder().withDescription(\"meeting\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withStartDateTime(\"12-12-2020 1000\").withEndDateTime(\"12-12-2020 1130\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Event PARTY \u003d new EventBuilder().withDescription(\"party\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withStartDateTime(\"01-01-2020 1800\").withEndDateTime(\"02-01-2020 0600\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withRecurrence(\"1 year\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Event LECTURE \u003d new EventBuilder().withDescription(\"lecture\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withStartDateTime(\"23-10-2020 1600\").withEndDateTime(\"23-10-2020 1600\").withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Event WORKSHOP \u003d new EventBuilder().withDescription(\"attend workshop\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withStartDateTime(\"12-11-2020 1200\").withEndDateTime(\"12-11-2020 1600\").withTags(\"workshop\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Event MEETING2 \u003d new EventBuilder().withDescription(\"meeting2\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            .withStartDateTime(\"12-12-2020 1000\").withEndDateTime(\"12-12-2020 1130\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Event MEETING3 \u003d new EventBuilder().withDescription(\"meeting3\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            .withStartDateTime(\"16-12-2020 1000\").withEndDateTime(\"18-12-2020 1130\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns an {@code TaskList} with all the typical Events."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static TaskList getTypicalEventsTaskList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskList ab \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        for (Event event: getTypicalEvents()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ab.addTask(event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, PARTY, LECTURE, WORKSHOP, MEETING2, MEETING3));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 5,
      "luciatirta": 11,
      "lerxcl": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Index INDEX_FIFTH_TASK \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Index INDEX_SIXTH_TASK \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 5,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLinks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_TUTOR_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL_DOCUMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTOR_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_TUTORIAL_DOCUMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_URL_TUTOR_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.Link;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class TypicalLinks {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final MeetingLink PROJECT_MEETING \u003d new MeetingLinkBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withDescription(\"Project meeting\").withDatetime(\"02-02-2018 1900\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withUrl(\"https://nus-sg.zoom.us/j/12350904475?pwd\u003dT0JwTEIwNjRuMnNKUEt4L2RBMFJWZz09\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final CollaborativeLink PROJECT_DOCUMENT \u003d new CollaborativeLinkBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withDescription(\"Project Document\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withUrl(\"https://docs.google.com/document/d/1oAObtne793B1nDX123hrbAdEy1aoeua5cTuabc326L4c/edit\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final MeetingLink TUTOR_MEETING \u003d new MeetingLinkBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TUTOR_MEETING).withDatetime(VALID_DATE_TIME_TUTOR_MEETING)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withUrl(VALID_URL_TUTOR_MEETING).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final CollaborativeLink TUTORIAL_DOCUMENT \u003d new CollaborativeLinkBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TUTORIAL_DOCUMENT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            .withUrl(VALID_URL_TUTORIAL_DOCUMENT).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static List\u003cLink\u003e getTypicalLinks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PROJECT_MEETING, PROJECT_DOCUMENT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTodos.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class containing a list of {@code To-dos} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class TypicalTodos {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Todo HOMEWORK \u003d new TodoBuilder().withDescription(\"homework\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withDateTime(\"12-12-2020 2359\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Todo CHORES \u003d new TodoBuilder().withDescription(\"do chores\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withDateTime(\"01-01-2020 1800\").withRecurrence(\"1 week\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Todo ASSIGNMENT \u003d new TodoBuilder().withDescription(\"finish assignment\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withDateTime(\"01-10-2020 1600\").withTags(\"cs2100\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Todo USER_GUIDE \u003d new TodoBuilder().withDescription(\"update user guide\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        .withDateTime(\"05-10-2021 2000\").withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Todo DEVELOPER_GUIDE \u003d new TodoBuilder().withDescription(\"update developer guide\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        .withDateTime(\"15-11-2020 2300\").withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final Todo HOMEWORK2 \u003d new TodoBuilder().withDescription(\"homework2\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            .withDateTime(\"14-12-2020 2159\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TypicalTodos() {} // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns an {@code TaskList} with all the typical todos."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static TaskList getTypicalTodosTaskList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskList ab \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        for (Todo todo: getTypicalTodos()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ab.addTask(todo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static List\u003cTodo\u003e getTypicalTodos() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HOMEWORK, CHORES, ASSIGNMENT, USER_GUIDE, DEVELOPER_GUIDE, HOMEWORK2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 3,
      "luciatirta": 11,
      "lerxcl": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 1,
      "-": 113
    }
  }
]
