[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# About Warenager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Warenager** is an **inventory application** to help tech-savvy warehouse managers"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "to keep track of items in their warehouse. It **optimizes management tasks for warehouse"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "managers** including but not exhaustive of updating, searching and ordering supplies,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## User interface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * as an inventory manager (as opposed to physical tracking of your stocks on paper)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * as a locator for items in inventory"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* adding stocks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* deleting stocks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* searching for stocks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* updating stocks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "If you are interested in using Warenager, head over to the Quick Start section of the [User Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "If you are interested in developing Warenager, head over to our [Developer Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/DeveloperGuide.html) for a start."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "amylzting": 15,
      "AudreyFelicio": 1,
      "Ashley-Lau": 6,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "mainClassName \u003d \u0027seedu.stock.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    archiveName \u003d \u0027stockbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "run {}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 2,
      "kc-98": 1,
      "Ashley-Lau": 1,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "### Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003cimg src\u003d\"images/amylzting.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[github](https://github.com/amylzting)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[portfolio](team/amy.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* Responsibilities: Documentation manager - Responsible for the quality of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "project documents, Coding standards, format of deliverables"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Ang Kai Chao"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "\u003cimg src\u003d\"images/kc-98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "[[github](https://github.com/kc-98)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "[[portfolio](team/kaichao.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Responsibilities: Team Leader, Overall code quality, Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "### Audrey Felicio Anwar"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "\u003cimg src\u003d\"images/audreyfelicio.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[github](https://github.com/AudreyFelicio)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[portfolio](team/audrey.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* Responsibilities: Team repository manager, main PR reviewer, Overall program structure."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "### Lau Jun Hao Ashley"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cimg src\u003d\"images/ashley-lau.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "[[github](https://github.com/ashley-lau)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "[[portfolio](team/ashley.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* Responsibilities: Scheduling and tracking manager - In charge of defining, assigning, and tracking project tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "### Lim Ze Wei Dennis"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cimg src\u003d\"images/limzeweidennis.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[github](https://github.com/LimZeWeiDennis)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "[[portfolio](team/dennis.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* Responsibilities: Deadline and Deliverables manager - in charge of making sure that "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "members completes tasks and submit deliverables on time"
      }
    ],
    "authorContributionMap": {
      "kc-98": 6,
      "Ashley-Lau": 8,
      "-": 32,
      "LimZeWeiDennis": 16
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 78
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a stock)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* stores the stock book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/stock/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* can save the stock book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current stock book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous stock book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone stock book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial stock book state, and the `currentStatePointer` pointing to that single stock book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th stock in the stock book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the stock book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted stock book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new stock. The `add` command also calls `Model#commitAddressBook()`, causing another modified stock book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the stock book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Step 4. The user now decides that adding the stock was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous stock book state, and restores the stock book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the stock book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest stock book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the stock book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all stock book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire stock book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the stock being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* has a need to manage a significant number of stocks"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**Value proposition**: Allows users to manage stocks faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Includes higher level features such as ability to bookmark mostly used products and highlights stocks"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "that are low in quantity to improve user experience."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| Priority | As a …​                                                     | I want…​                                                                             | So that…​                                                              |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| -------- | ----------------------------------------------------------- | ------------------------------------------------------------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | delivery assistant                                          | to be able to edit the stocks in the inventory in bulk                               | I can save time and do deliveries more efficiently                     |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to be able to add my stock to the application                                        | I can record new stocks                                                |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager who can type fast              | to be able to delete my stock in the application                                     | I can remove unwanted stock                                            |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to be able to search for stocks easily                                               | I can refer to them quickly                                            |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | admin                                                       | to print out all the stocks in the inventory                                         | I can keep records of the inventory                                    |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to be able to view all the stocks there are in the warehouse clearly                 | I can make decisions better                                            |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | forgetful manager                                           | to list the features and the way to use them                                         | I can refer to this feature when I forget how to use certain features  |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | multi-device user                                           | to transport data from one device to another                                         | I will not have to key in items one by one again                       |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech-savvy warehouse manager                                | to easily type shorter commands                                                      | I am able to execute functions quickly                                 |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | collaborative user                                          | my inventory to be able to be shared with my collaborators                           | my collaborators can only read and find data                           |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to be able to change the information of my existing stock in the application         | I can keep my existing inventories updated                             |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | major shareholder                                           | to easily understand how inventory count works                                       | I can determine if the investment is worthy                            |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | manager                                                     | to be able to gather the statistics (eg. profit) of the items in inventory           | I can report the profitability of products                             |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "| `* *`    | forgetful stock                                            | to add optional notes at certain stocks                                              | I can be reminded of important information                             |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | busy manager                                                | to be able to see or highlight low stocks at a glance                                | I can replenish them in time                                           |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | busy manager                                                | to automate the calculation of how much stock to restock based on the current stocks | I do not need to spend time manually calculating                       |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* *`    | tech savvy warehouse manager                                | to be able to bookmark certain items in the warehouse                                | I can access and augment their information easily                      |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | beginner user                                               | have an easy-to-understand interface                                                 |                                                                        |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | multi-OS user                                               | to run the application on popular operating systems in the market                    |                                                                        |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to have a smooth flowing platform                                                    | I can track my inventories easily (Good UX)                            |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | new user                                                    | to read the documentation                                                            | I will be able to know how to use the program                          |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | offline user                                                | to run the application offline without the need to connect to the internet           |                                                                        |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to store my data in a digitalised platform                                           | I do not have to fear for data loss                                    |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | impatient user                                              | to run the appli cation and execute commands without lag                             |                                                                        |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to have the capacity to store all my inventory data                                  | I am able to expand my range of inventory                              |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager that can type fast             | to have a platform                                                                   | I can track my stocks through typing                                   |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | tech savvy warehouse manager                                | to digitalize my inventory                                                           | I do not have to find a physical space to store my inventory details   |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "| `* * *`  | warehouse manager                                           | to be able to easily teach my subordinates how to use the software                   | they can cover my role when I am not around                            |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "(For all use cases below, the **System** is the `Warenager` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#### Use case: Adding a stock"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1.  User requests to add a stock"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "2.  Warenager adds the stock into the inventory"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1a. The given format is missing any field header."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1b. The given input to the field header is empty."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* 1c. The given input to the field header is invalid."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * 1c1. Warenager shows an error message."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kc-98"
        },
        "content": "#### Use case: Deleting stocks"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kc-98"
        },
        "content": "2.  Warenager shows a list of stocks."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kc-98"
        },
        "content": "3.  User requests to delete stocks in the list."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kc-98"
        },
        "content": "4.  Warenager deletes the stock."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 3a1. Warenager shows an error message and tells user to use the proper format."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 3b. All inputted serial numbers are not found."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * 3b1. Warenager shows an error message and tells user which serial numbers are not found."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* 3c. Some inputted serial numbers are not found."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * 3c1. Warenager deletes the found stocks and tells user which serial numbers are not found."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "       Use case resumes at step 2."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "amylzting"
        },
        "content": "#### Use case: Find a stock by name"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock with name \"umbrella\"."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows a list of stocks with names that "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    contain the keyword \"umbrella\"."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header n/."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "amylzting"
        },
        "content": " "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given command is invalid (wrong find command). "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with name that matches keyword."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "amylzting"
        },
        "content": "#### Use case: Find a stock by serial number"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock with serial number 111111."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows the stock with serial number 111111."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header sn/."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "amylzting"
        },
        "content": " "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 1b. The given command is invalid (wrong find command). "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with serial number that matches keyword."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "amylzting"
        },
        "content": "#### Use case: Find a stock by location stored"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock stored at location \"Section 312\"."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows all stocks stored at location \"Section 312\"."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header l/."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "amylzting"
        },
        "content": " "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given command is invalid (wrong find command). "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with storage location that matches keyword."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "amylzting"
        },
        "content": "#### Use case: Find a stock by source of stock"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1.  User requests to find a stock which source is \"Company ABC\"."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "amylzting"
        },
        "content": "2.  Warenager shows all stocks with source \"Company ABC\"."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "amylzting"
        },
        "content": "3.  User views desired stock."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1a. The given format is missing field header s/."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "amylzting"
        },
        "content": " "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 1b. The given command is invalid (wrong find command). "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * 1b1. Warenager shows an error message."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* 2a. There is no stock with source that matches keyword."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Use case: Increment or decrement a stock\u0027s quantity"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to increment or decrement a specific stock\u0027s quantity."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s quantity."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header q/."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3d. The given increment or decrement value is not an integer."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3d1. Warenager shows an error message."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3e. The given increment or decrement value exceeds the integer limit."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3e1. Warenager shows an error message."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3f. The given increment value plus the stock\u0027s current quantity exceeds the integer limit."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3f1. Warenager shows an error message."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3g. The stock\u0027s current quantity minus the given decrement value results in a negative value."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3g1. Warenager shows an error message."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Use case: Rewrite a stock\u0027s quantity"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s quantity."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s quantity."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header nq/."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3d. The given quantity value is not an integer."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3d1. Warenager shows an error message."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3e. The given quantity value exceeds the integer limit."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3e1. Warenager shows an error message."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3f. The given quantity value is negative."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3f1. Warenager shows an error message."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Use case: Update the name of a stock."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s name."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s name."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header n/."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Use case: Update the location of a stock"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s location."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s location."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header l/."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "#### Use case: Update the source of a stock"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1.  User requests to list stocks."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "2.  Warenager lists all stocks including their serial number."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "3.  User requests to change a specific stock\u0027s source."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "4.  Warenager updates the stock\u0027s source."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 2a. The list of all stocks is empty."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3a. The given format is missing the field header sn/."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3a1. Warenager shows an error message."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3b. The stock with the given serial number is not found."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3b1. Warenager shows an error message."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* 3c. The given format is missing the field header s/."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * 3c1. Warenager shows an error message."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "#### Use case: Using the help command"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "1.  User requests helps from Warenager."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "2.  Warenager shows the user guide as a pop up."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "3.  User views the user guide."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* 1a. The given format has an additional header."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": " "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "#### Use case: Exit Warenager"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "1.  User requests to exit Warenager."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "2.  Warenager shows exit message."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "3.  User exits Warenager."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* 1a. The given format has an additional header."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": " "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * 1a1. Warenager shows an error message."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     Use case resumes at step 1."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "     "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kc-98"
        },
        "content": "2.  Should be able to hold up to 1000 stocks without a noticeable sluggishness in performance for smooth typical usage."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kc-98"
        },
        "content": "4.  A user without online connection should still be able to run the application."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kc-98"
        },
        "content": "5.  Should be easy to pickup so that a user of managerial role can quickly teach their employees should he/she be absent."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "amylzting"
        },
        "content": "6.  Should have an easy-to-understand interface, for beginner users to use the application comfortably."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Stock**: Item in the inventory."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Field**: (name, serial number, quantity, location stored, source) of the stock in inventory "
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "### Adding a stock"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Adding a stock into the inventory."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Test case: `n/Banana s/NUS q/9999 l/Fruit Section`\u003cbr\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: New stock added: Banana SerialNumber: 12 Source: NUS Quantity: 9999 Location: Fruit Section."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Details of the added stock shown in the status message."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Test case: `add n/Banana s/NUS q/9999 l/`\u003cbr\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: Locations can take any values, and it should not be blank."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      "
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Test case: ` add n/Banana s/NUS q/9999`\u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: Invalid command format! "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      add: Adds a stock to the stock book. Parameters: n/NAME s/SOURCE q/QUANTITY l/LOCATION "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Example: add n/Umbrella s/Kc company q/100 l/section B,"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Other incorrect delete commands to try: `add`, `add sn/absdsa` \u003cbr\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Deleting stocks"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Deleting stocks from a given list."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Prerequisites: List all stocks by default or use the `find` command. Multiple stocks in the list."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: Stock with the serial number 1111111 is deleted from the inventory. "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Details of the deleted stock shown in the status message."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111 sn/11111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: Stock with the serial number 1111111 is deleted from the inventory. "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Duplicate serial number(s) is/are ignored. Details of the deleted stock shown in the status message."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111 sn/22222222`\u003cbr\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kc-98"
        },
        "content": "      Expected: Both stocks with the serial numbers 1111111 and 22222222 are deleted from the inventory. "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Details of the deleted stock shown in the status message."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete sn/1111111 sn/33333333` (no stock has the serial number `33333333`) \u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Expected: Only the existing stock with the serial number 1111111 is deleted. "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Details of this deleted stock shown in the status message.  "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Serial number `33333333` which does not belong to any stock will be shown in status message as well."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        "
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   1. Test case: `delete 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock deleted due to invalid format from missing sn/. "
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete sn/absdsa` "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      (where serial number is not an integer or is a negative integer)\u003cbr\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "amylzting"
        },
        "content": "### Finding a stock"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "amylzting"
        },
        "content": "1. Finding a stock from the inventory."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Prerequisites: Multiple stocks in the list. Stock exists in inventory."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find sn/1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: Stock of the serial number 1111111 is displayed from the inventory. "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find n/umbrella`\u003cbr\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with name containing \"umbrella\" are displayed from the inventory. "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command.  "
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         "
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find l/section 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with storage location containing \"section 3\" are displayed from the inventory. "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command.  "
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find s/company abc`\u003cbr\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: All stocks with field source containing \"company abc\" are displayed from the inventory. "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Status message shows success of command.  "
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            "
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Test case: `find 1111111`\u003cbr\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Expected: No stock deleted due to invalid format from missing field header"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      either n/, sn/, l/ or s/. "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "amylzting"
        },
        "content": "   1. Other incorrect find commands to try: `find`, `find sn/absdsa` "
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "amylzting"
        },
        "content": "      (where serial number is not an integer or is a negative integer)\u003cbr\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Updating a stock"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1. Updating a stock from the inventory."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Prerequisites: Multiple stocks in the list. Stocks exists in inventory."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 iq/+50`\u003cbr\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have an increase of quantity by 50."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 iq/-50`\u003cbr\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a decrease of quantity by 50."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/Flower11 nq/2103`\u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new quantity 2103."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/Flower11 n/Rose`"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new name Rose."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/Flower11 l/Vase 3`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new location Vase 3."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/2103 s/Flower Distributor Association`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have a new source Flower Distributor Association."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       "
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 iq/+50 n/Rose l/Vase 3 s/Flower Distributor Association`"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 will have an increase of quantity by 50, a new name Rose,"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       a new location Vase3, a new source Flower Distributor Association."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    "
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    1. Test case: `update sn/FLower11 sn/Flower12 iq/+50 n/Rose l/Vase 3 s/Flower Distributor Association`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Expected: The stock with serial number Flower11 and Flower12 will have an increase of quantity by 50, a new name Rose,"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       a new location Vase3, a new source Flower Distributor Association."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       Details of the updated stock is shown in the status message."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "       "
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "amylzting": 146,
      "AudreyFelicio": 287,
      "kc-98": 41,
      "Ashley-Lau": 78,
      "-": 313,
      "LimZeWeiDennis": 38
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   1. Run the `seed.stock.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   e.g. `seedu.stock.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   e.g. `seedu.stock.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   e.g. `seedu.stock.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "in their warehouse. It **optimizes management tasks** for warehouse managers including but not"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "exhaustive of updating, searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Download the latest `warenager.jar` from [here](https://github.com/se-edu/addressbook-level3/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Warenager."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "1. Double-click the file to start the app. The commands available in the current version of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Warenager are listed below:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**:information_source: Brief summary of features:**\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Items contain location, quantities, etc. Item Details presented in a drop down"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Sorting and searching by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * name of stock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * serial number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * source of stock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * location stored in warehouse"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Startup default sorted by quantity, highlight item with short quantity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Commands, e.g. save, load, form filling."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Storage into a csv file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Adding/Deleting items: Unique serial number generation per item per company"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Setting up: Personalized GUI. i.e company name displayed in the GUI, predefined color presets"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Bookmark feature e.g. often used stocks, search bookmark \u003citem\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Displays the list of command instructions for features in Warenager and how to use the command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Adding new stock: `add`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Adds a new stock into the inventory. Serial number for the new stock will be generated by the program."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Name of item"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    2. Source of stock (eg. from what company)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    3. Quantity (default 0)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    4. Location in warehouse"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Format: `add n/\u003cname\u003e s/\u003csource of stock\u003e q/\u003cquantity\u003e l/\u003clocation in warehouse\u003e`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Deleting of stock: `delete`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Deletes the stock(s) using the stock\u0027s serial number from the inventory. Multiple stocks can be deleted simultaneously."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Required fields:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    1. Serial number of product"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Format (single): `delete sn/\u003cserial number\u003e`  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Format (multiple): `delete sn/\u003cserial number\u003e sn/\u003cserial number 2\u003e...`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Find stocks from inventory: `find`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Displays a list of stocks found in the inventory that match/contain the following keywords in their details."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Fields that can be searched:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Serial Number"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Location stored"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Source of the stock"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Format (any combination of 1,2,3 or 4 of the fields): \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "`find n/\u003cname\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "`find sn/\u003cserial number\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "`find l/\u003clocation\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "`find s/\u003csource of the stock\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "`find n/\u003cname\u003e l/\u003clocation\u003e s/\u003csource of stock\u003e`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Search criteria: \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Only stocks that fully match/contain the search keyword will be displayed. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* e.g. find n/KaiChao will not match Kai."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* e.g. find n/KaiChao will match AngKaiChao. \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Search is case-insensitive."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* e.g. find n/ashLey will match Ashley."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Any stock with any field that matches/contains any of the search fields will be displayed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* e.g."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Stock | Details"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Stock 1** | Name: banana\u003cbr\u003e Serial Number: NTUC1111\u003cbr\u003e Source: ntuc\u003cbr\u003e Quantity: 5\u003cbr\u003e Location in warehouse: Fruits Section"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Stock 2** | Name: chicken\u003cbr\u003e Serial Number: SHENGSIONG1111\u003cbr\u003e Source: sheng siong\u003cbr\u003e Quantity: 100\u003cbr\u003e Location in warehouse: Poultry Section\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "find n/banana sn/SHENGSIONG will match both Stock 1 and Stock 2 \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "find l/section will match both Stock 1 and Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "find n/chicken l/poultry will match only Stock 2. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "find s/ntuc l/singapore will match only Stock 1."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Update inventory: `update`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Updates the details of the desired stock, requires the serial number of products."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* Fields that can be updated:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Quantity"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Location stored"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Source of the stock"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Format (either):"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "*`update sn/\u003cSerial Number of product\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "q/\u003c+/-\u003e\u003cquantity to increment/decrement\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "n/\u003cnew name\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "l/\u003cnew location in warehouse\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "s/\u003cnew source of stock\u003e`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "*`update sn/\u003cSerial Number of product\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "nq/\u003cnew quantity\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "n/\u003cnew name\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "l/\u003cnew location in warehouse\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "s/\u003cnew source of stock\u003e`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "User may pass in more than one serial number to update all at once."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "⚠ If more than one serial number is passed and one of them are wrong (not found in the inventory list), then the command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "will not update anything and shows an error message."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Data (all stocks in inventory in csv) is automatically saved to"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "`[root directory]/data/inventory.csv` when any of these commands is executed:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* add"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* delete"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* update"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Exiting Warenager: `exit`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Terminates the program."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `exit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Sorting `[coming in v2.0]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Personalized GUI `[coming in v2.0]`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "### Bookmark `[coming in v2.0]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Q**: Question\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**A**: Answer."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Add** | `add n/\u003cname\u003e s/\u003csource of stock\u003e q/\u003cquantity\u003e l/\u003clocation in warehouse\u003e`\u003cbr\u003e e.g. `eg. add n/Banana s/NUS q/9999 l/Fruit Section`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Delete** | `delete sn/\u003cserial number\u003e`\u003cbr\u003e eg. `delete sn/100`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**Find** | Any combination of 1, 2, 3 or 4 different fields: \u003cbr\u003e `find n/\u003cname\u003e`\u003cbr\u003e`find sn/\u003cserial number\u003e`\u003cbr\u003e`find l/\u003clocation\u003e`\u003cbr\u003e`find s/\u003csource of stock\u003e`\u003cbr\u003e `find n/\u003cname\u003e l/\u003clocation\u003e s/\u003csource of stock\u003e` \u003cbr\u003e e.g. `find n/umbrella s/ntuc`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amylzting"
        },
        "content": "**FindExact** | Any combination of 1, 2, 3 or 4 different fields: \u003cbr\u003e `findexact n/\u003cname\u003e l/\u003clocation\u003e` \u003cbr\u003e `findexact n/\u003cname\u003e l/\u003clocation\u003e s/\u003csource of stock\u003e sn/\u003cserial number\u003e` \u003cbr\u003e e.g. `find n/umbrella s/ntuc`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Update** | `update sn/\u003cSerial Number of product\u003e q/\u003c+/-\u003e\u003cquantity to increment/decrement\u003en/\u003cnew name\u003e l/\u003cnew location in warehouse\u003e s/\u003cnew source of stock\u003e` \u003cbr\u003e `update sn/\u003cSerial Number of product\u003e nq/\u003cnew quantity\u003e n/\u003cnew name\u003e l/\u003cnew location in warehouse\u003e s/\u003cnew source of stock\u003e`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kc-98"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "amylzting": 27,
      "AudreyFelicio": 21,
      "kc-98": 68,
      "-": 63
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "title: Warenager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T15-3/tp//branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T15-3/tp/actions)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "**Warenager** is an **inventory application** to help tech-savvy warehouse managers"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "to keep track of items in their warehouse. It **optimizes management tasks for warehouse"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "managers** including but not exhaustive of updating, searching and ordering supplies,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "## User interface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * as an inventory manager (as opposed to physical tracking of your stocks on paper)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * as a locator for items in inventory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* adding stocks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* deleting stocks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* searching for stocks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* updating stocks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "If you are interested in using Warenager, head over to the Quick Start section of the [User Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "If you are interested in developing Warenager, head over to our [Developer Guide](https://ay2021s1-cs2103t-t15-3.github.io/tp/DeveloperGuide.html) for a start."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 20,
      "-": 13
    }
  },
  {
    "path": "docs/team/amy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "title: Amy\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **New Feature**: Added the ability to find existing items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * What it does: Allows the user to search for desired stock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Justification: This feature improves the user experience as user can easily search for the details of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  existing items. Users can now search for their desired stocks quickly and conveniently,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  by using any of the fields (name, serial number, location stored, source of stock) to find"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  their desired stock. Users have the convenience of searching for a whole list of stocks that are related,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  instead of only being able to search for one stock (via name)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Highlights: This enhancement comes with the ability to find stocks from not just the name of the stock"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  but also other related fields such as serial number, location stored and source of stock."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  Search is also case-insensitive and any stock that contains the search term will be shown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Helped to review pull requests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Helped to merge approved pull requests after thorough review and GitHub action checks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Responsible for managing documentation quality and content."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `find`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Checked team members\u0027 documentation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for the feature `find`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added use cases for feature `find`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Added documentation for `non-functional requirements` and `glossary`sections."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    * Checked team members\u0027 documentation."
      }
    ],
    "authorContributionMap": {
      "amylzting": 41
    }
  },
  {
    "path": "docs/team/ashley.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "title: Ashley\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **New Feature**: Added the ability to add items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * What it does: Allows the user to add new stock into the storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Justification: This is a necessary feature as it would allow users to add their new stocks into the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  database and subsequently manage their stock from there."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Highlights: A unique serial number will be generated for the stock."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   There are plans to incorporate the company name into the serial number after we implement a feature which"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   allows first time user to input their company name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Helped team members with git and GitHub functionalities."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added documentation for the feature `add`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added implementation details of the `add` feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    * Added documentation for `product scope` section."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 31
    }
  },
  {
    "path": "docs/team/audrey.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "title: Audrey\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **New Feature**: Added the ability to update existing items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * What it does: Allows the user to update the details of the desired stock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Justification: This feature improves the user experience as user can easily edit the details of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  existing items. Users now do not need to remove the item and then add them back in order to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  edit the details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "   It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "   The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Created the team repository by forking from `nus-cs2103-AY2021S1/tp`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Set up the team repository as specified by the `CS2103T` module requirements."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Managed the repository in general and helped team members with git and GitHub functionalities."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Head reviewer for Pull Requests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Split review tasks to team members."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Ensured no pull requests was merged before thorough review was conducted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Ensured every merge pass the GitHub action checks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Head merger for Pull Requests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Added documentation for the feature `update`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    * Added implementation details of the `update` feature."
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 40
    }
  },
  {
    "path": "docs/team/dennis.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "title: Dennis\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **New Feature**: Added the ability to find existing items in the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * What it does: Allows the user to search for desired stock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Justification: This feature improves the user experience as user can easily search for the details of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  existing items. Users can now search for their desired stocks quickly and conveniently,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  by using any of the fields (name, serial number, location stored, source of stock) to find"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  their desired stock. Users have the convenience of searching for a whole list of stocks that are related,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  instead of only being able to search for one stock (via name)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Highlights: This enhancement comes with the ability to find stocks from not just the name of the stock"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  but also other related fields such as serial number, location stored and source of stock."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  Search is also case-insensitive and any stock that contains the search term will be shown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **Git \u0026 Repository**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Used GitHub Projects feature to create kanban boards to track user stories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Helped to review pull requests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Helped to merge approved pull requests after thorough review and GitHub action checks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Responsible for managing documentation quality and content."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added documentation for the feature `help`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Checked team members\u0027 documentation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added documentation for the feature `help`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added use cases for feature `help`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Added documentation for `help` sections."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LimZeWeiDennis"
        },
        "content": "    * Checked team members\u0027 documentation."
      }
    ],
    "authorContributionMap": {
      "LimZeWeiDennis": 41
    }
  },
  {
    "path": "docs/team/kaichao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "title: Kai Chao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "## Project: Warenager"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Warenager is an **inventory application** to help tech-savvy warehouse managers to keep track of items in their warehouse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "It **optimizes management tasks** for warehouse managers including but not exhaustive of updating,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "searching and ordering supplies, via Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **New Feature**: Added the ability to delete existing stock(s) from the inventory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * What it does: Allows the user to delete the chosen stock(s)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Justification: This feature enables the user to delete any unwanted or unused stock, so that"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    the storage will not be clogged up with outdated stock."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **New Feature**: Added the ability to generate a unique serial number for each newly added stock."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * What it does: Allows the user to perform commands using serial numbers."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Justification: This feature eliminates any confusion that can arise when users reuse field attributes when"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "   adding a new stock. Users can then differentiate field inputs clearly when using Warenager commands.    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Reviews \u0026 Merging**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Ensured code quality when reviewing pull requests, before approving merge."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Ensured team meetings cover the requirements for the week."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Converted the draft user guide content to markdown file format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Updated the documentation for `delete` feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Updated NFR and Appendix section for Warenager."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Added MSS for delete feature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    * Added implementation details of the `delete` feature."
      }
    ],
    "authorContributionMap": {
      "kc-98": 37
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their stock book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/stock/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Changes the remark of an existing stock in the stock book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the stock identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"by the index number used in the last stock listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param index of the stock in the filtered stock list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param remark of the stock to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.stock.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of stock data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the stock’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a stock."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Create a new `Remark` in `seedu.stock.model.stock`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each stock."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Simply add the following to [`seedu.stock.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "StockBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ":exclamation: You must delete StockBook’s storage file located at `/data/stockbook.json` before running it! Not doing so will cause AddressBook to default to an empty stock book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public PersonCard(Person stock, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    remark.setText(stock.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Person stockToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Person editedStock \u003d new Person(stockToEdit.getName(), stockToEdit.getPhone(), stockToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                stockToEdit.getAddress(), remark, stockToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.setPerson(stockToEdit, editedStock);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStock));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code stockToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private String generateSuccessMessage(Person stockToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return String.format(message, stockToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 27,
      "-": 367
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `location` field from `Stock`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "## Safely deleting `Location`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "The `location` field in `Stock` is actually an instance of the `seedu.stock.model.stock.Locations` class. Since removing the `Location` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Safe delete the field `location` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. Remove the usages of `location` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `location` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `location` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$location` in each `StockCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "![$location](../images/remove/$location.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "**`StockCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "private Label location;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cLabel fx:id\u003d\"location\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `location` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  \"stocks\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \"quantity\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \"source\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \"location\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "You can go through each individual `json` file and manually remove the `location` field."
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 20,
      "-": 83
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.stock.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       Person stockToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       Person editedStock \u003d createEditedPerson(stockToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       if (!stockToEdit.isSamePerson(editedStock) \u0026\u0026 model.hasPerson(editedStock)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       model.setPerson(stockToEdit, editedStock);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStock));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       stocks.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    3.  Save the stock book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    5.  Add a new field to `Stock`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    6.  Add a new entity to the stock book"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 10,
      "-": 240
    }
  },
  {
    "path": "src/main/java/seedu/stock/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/stock/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/stock/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.JsonSerialNumberSetsBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.JsonStockBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.SerialNumberSetsBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.StockBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing StockBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockBookStorage stockBookStorage \u003d new JsonStockBookStorage(userPrefs.getStockBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSetsBookStorage serialNumberSetsBookStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                new JsonSerialNumberSetsBookStorage(userPrefs.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        storage \u003d new StorageManager(stockBookStorage, userPrefsStorage, serialNumberSetsBookStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s stock book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The data from the sample stock book will be used instead if {@code storage}\u0027s stock book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * or an empty stock book will be used instead if errors occur when reading {@code storage}\u0027s stock book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Optional\u003cReadOnlyStockBook\u003e stockBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cReadOnlySerialNumberSetsBook\u003e serialNumberSetsBookOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ReadOnlyStockBook initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ReadOnlySerialNumberSetsBook initialSerialNumberSetsBookData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stockBookOptional \u003d storage.readStockBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumberSetsBookOptional \u003d storage.readSerialNumberSetsBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (!stockBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample StockBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!serialNumberSetsBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SerialNumberSetsBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            initialData \u003d stockBookOptional.orElseGet(SampleDataUtil::getSampleStockBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            initialSerialNumberSetsBookData \u003d serialNumberSetsBookOptional"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                .orElseGet(SampleDataUtil::getSampleSerialNumberSetsBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty StockBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            initialData \u003d new StockBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            initialSerialNumberSetsBookData \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StockBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            initialData \u003d new StockBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            initialSerialNumberSetsBookData \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialSerialNumberSetsBookData);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty StockBook\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.info(\"Starting StockBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Stock Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 30,
      "Ashley-Lau": 30,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String LOG_FILE \u003d \"stockbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HEADER_FIELD \u003d \"Invalid command format! \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + \"Duplicate header field found in command! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_SERIAL_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"No stocks are deleted. The stock serial number(s) provided are not found: \" + \"%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_SOME_SERIAL_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"The stock serial number(s) provided are not found: \" + \"%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d stock listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 4,
      "Ashley-Lau": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/stock/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the StockBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see seedu.stock.model.Model#getStockBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ReadOnlyStockBook getStockBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of stocks */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ObservableList\u003cStock\u003e getFilteredStockList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the user prefs\u0027 stock book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.StockBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final StockBookParser stockBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBookParser \u003d new StockBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Command command \u003d stockBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            storage.saveStockBook(model.getStockBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            storage.saveSerialNumberSetsBook(model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getStockBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e getFilteredStockList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getFilteredStockList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getStockBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 22,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Adds a stock to the stock book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a stock to the stock book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SOURCE + \"SOURCE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_NAME + \"Umbrella \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SOURCE + \"Kc company \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_QUANTITY + \"100 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_LOCATION + \"section B \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New stock added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STOCK \u003d \"This stock already exists in the stock book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final Stock toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Stock}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public AddCommand(Stock stock) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stock);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        toAdd \u003d stock;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        toAdd.setSerialNumber(model.generateNextSerialNumber(toAdd.getSource()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (model.hasStock(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.addStock(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 29,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Stock book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.setStockBook(new StockBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Deletes a stock identified using it\u0027s displayed serial number from the stock book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \": Deletes the stock identified by the EXACT serial number used in the displayed.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"Parameters: SERIAL NUMBER (must be a valid serial number)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sn/Kc company1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_DELETE_STOCK_SUCCESS \u003d \"All serial number(s) are found.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                    + \"Deleted Stock(s): %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_DELETE_STOCK_SOME_SUCCESS \u003d \"Some serial number(s) are not found.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                    + \"Deleted Stock(s): %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final Set\u003cSerialNumber\u003e targetSerialNumbers;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructor for a new delete command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param targetSerialNumbers The list of target serial numbers to delete."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public DeleteCommand(Set\u003cSerialNumber\u003e targetSerialNumbers) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assert(targetSerialNumbers.size() \u003e 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.targetSerialNumbers \u003d targetSerialNumbers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cStock\u003e lastShownList \u003d model.getFilteredStockList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cStock\u003e stocksDeleted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cSerialNumber\u003e unknownSerialNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        List\u003cSerialNumber\u003e setToListSerialNumbers \u003d targetSerialNumbers.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int j \u003d 0; j \u003c setToListSerialNumbers.size(); j++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumber targetSerialNumber \u003d setToListSerialNumbers.get(j);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String targetSerialNumberInString \u003d targetSerialNumber.getSerialNumberAsString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            boolean isStockDeleted \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //attempts to map serial number to stock and delete the related stock."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                Stock currentStock \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                String currentStockSerialNumberInString \u003d currentStock.getSerialNumber()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                                        .getSerialNumberAsString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (currentStockSerialNumberInString.equals(targetSerialNumberInString)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    isStockDeleted \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    stocksDeleted.add(currentStock);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    model.deleteStock(currentStock);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //if given serial number does not map to any stock, it does not exist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!isStockDeleted) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                unknownSerialNumbers.add(targetSerialNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //deletion of multiple stocks is only successful if the number of deleted stocks is equals"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //to number of serial numbers provided, ensuring all given serial numbers are used."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (stocksDeleted.size() \u003d\u003d targetSerialNumbers.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_STOCK_SUCCESS, stocksAsString(stocksDeleted)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (stocksDeleted.size() \u003e 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String serialNumbersNotFound \u003d String.format(Messages.MESSAGE_SOME_SERIAL_NUMBER_NOT_FOUND,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    serialNumberListAsString(unknownSerialNumbers));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_STOCK_SOME_SUCCESS, stocksAsString(stocksDeleted))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                            + \"\\n\" + serialNumbersNotFound);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String serialNumbersNotFound \u003d String.format(Messages.MESSAGE_SERIAL_NUMBER_NOT_FOUND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    serialNumberListAsString(unknownSerialNumbers));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new CommandException(serialNumbersNotFound);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Displays the list of stocks in a clearer view, with each subsequent stock moved to the next line."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param stockList The list of stocks to convert to String."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The String depicting each stock in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String stocksAsString(List\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String stocksAsString \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c stockList.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            stocksAsString +\u003d \"\\n\" + stockList.get(i).toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return stockList.size() \u003d\u003d 0 ? \"No stocks deleted\" : stocksAsString;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Displays the list of serial numbers in a clearer view, with each subsequent serial number moved"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * to the next line."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberList The list of serial numbers to convert to String."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The String depicting each serial number in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String serialNumberListAsString(List\u003cSerialNumber\u003e serialNumberList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String serialNumbersAsString \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c serialNumberList.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumbersAsString +\u003d \"\\n\" + serialNumberList.get(i).toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumbersAsString;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 targetSerialNumbers.equals(((DeleteCommand) other).targetSerialNumbers)); // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 89,
      "Ashley-Lau": 6,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all stocks whose fields contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Parameters (any combination, in any order, of the following four fields):\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_NAME + \" KEYWORD [more KEYWORDS which will be matched with Name field of stock]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_SOURCE + \" KEYWORD [more KEYWORDS which will be matched with Source field of stock]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \" KEYWORD [more KEYWORDS which will be matched with SerialNumber field of stock]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + PREFIX_LOCATION + \" KEYWORD [more KEYWORDS which will be matched with Location field of stock]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/ pork 100grams  s/ farm\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cPredicate\u003cStock\u003e\u003e predicates; // list of predicates to filter stocks by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final Predicate\u003cStock\u003e combinedPredicates; // combined predicates to filter stocks by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Constructs a FindCommand object initialised with"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * a list of predicates to filter and find stocks by"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param predicates list of predicates to filter stocks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cStock\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.combinedPredicates \u003d predicates.stream().reduce(x -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // status message to show what user has searched for"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String statusMessage \u003d \"Searching for:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + predicates.stream().map(Object::toString)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .reduce((predicate, next) -\u003e predicate + \", \" + next).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // updates the filtered stock list based on the combined predicates to test and filter stocks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // based on all of user\u0027s search fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        model.updateFilteredStockList(combinedPredicates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new CommandResult(statusMessage + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredStockList().size()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 39,
      "Ashley-Lau": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        model.updateFilteredStockList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Updates an existing stock in the stock book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the stock with \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"the given serial number. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"SERIAL NUMBER \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_INCREMENT_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_NEW_QUANTITY + \"NEW QUANTITY \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SOURCE + \"SOURCE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Note that only one of \" + PREFIX_INCREMENT_QUANTITY"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"and \" + PREFIX_NEW_QUANTITY"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"can be specified. \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"You may provide more than one serial number \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER + \"CS2103 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_INCREMENT_QUANTITY + \"2103 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_NAME + \"CS2103 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_SOURCE + \"National University of Singapore \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            + PREFIX_LOCATION + \"Group 3 \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_UPDATE_STOCK_SUCCESS \u003d \"Updated Stock: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STOCK \u003d \"This stock already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_SERIAL_NUMBER_NOT_FOUND \u003d \"Stock with given serial number does not exists\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_QUANTITY_PREFIXES \u003d \"You can only use one of the prefix iq/ or nq/\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private final UpdateStockDescriptor updateStockDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructs a new update command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param updateStockDescriptor Details to be updated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateCommand(UpdateStockDescriptor updateStockDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(updateStockDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.updateStockDescriptor \u003d updateStockDescriptor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes the update command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The result of successful execution."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws CommandException If there are any errors."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e lastShownStocks \u003d model.getFilteredStockList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumber\u003e indexes \u003d updateStockDescriptor.getSerialNumbers();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cString\u003e serials \u003d indexes.stream().map((serial) -\u003e serial.getSerialNumberAsString().trim())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e stocksToUpdate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e updatedStocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // FInd stocks to be updated"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock currentStock : lastShownStocks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String currentStockSerialNumber \u003d currentStock.getSerialNumber().getSerialNumberAsString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            boolean anyMatches \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            for (String currentSerialNumber : serials) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                if (currentSerialNumber.equals(currentStockSerialNumber)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    anyMatches \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (anyMatches) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                stocksToUpdate.add(currentStock);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Some serial numbers do not exist"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (serials.size() !\u003d stocksToUpdate.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new CommandException(MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update stocks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock stockToUpdate: stocksToUpdate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Stock updatedStock \u003d createUpdatedStock(stockToUpdate, updateStockDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (!stockToUpdate.isSameStock(updatedStock) \u0026\u0026 model.hasStock(updatedStock)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            model.setStock(stockToUpdate, updatedStock);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updatedStocks.add(updatedStock);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        model.updateFilteredStockList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_STOCK_SUCCESS, stocksAsString(updatedStocks)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Displays the list of stocks in a clearer view, with each subsequent stock moved to the next line."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param stockList The list of stocks to be converted to String."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The String listing all stocks in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private String stocksAsString(List\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String stocksAsString \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (int i \u003d 0; i \u003c stockList.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            stocksAsString +\u003d \"\\n\" + stockList.get(i).toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return stockList.size() \u003d\u003d 0 ? \"No stocks updated\" : stocksAsString;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Creates the stock with updated attributes."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param stockToUpdate The stock in the list to be updated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param updateStockDescriptor The collection of values to be updated."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The stock with updated attributes."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static Stock createUpdatedStock(Stock stockToUpdate, UpdateStockDescriptor updateStockDescriptor)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assert stockToUpdate !\u003d null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Quantity updatedQuantity \u003d updateStockDescriptor.getQuantity().orElse(stockToUpdate.getQuantity());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Name updatedName \u003d updateStockDescriptor.getName().orElse(stockToUpdate.getName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Source updatedSource \u003d updateStockDescriptor.getSource().orElse(stockToUpdate.getSource());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Location updatedLocation \u003d updateStockDescriptor.getLocation().orElse(stockToUpdate.getLocation());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        SerialNumber stockSerialNumber \u003d stockToUpdate.getSerialNumber();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Optional\u003cQuantityAdder\u003e quantityAdder \u003d updateStockDescriptor.getQuantityAdder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!quantityAdder.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            QuantityAdder valueToBeAdded \u003d quantityAdder.get();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            Optional\u003cQuantity\u003e result \u003d valueToBeAdded.incrementQuantity(updatedQuantity);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updatedQuantity \u003d result.orElseThrow(() -\u003e new CommandException(Quantity.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new Stock(updatedName, stockSerialNumber, updatedSource, updatedQuantity, updatedLocation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand castedOther \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return updateStockDescriptor.equals(((UpdateCommand) other).updateStockDescriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static class UpdateStockDescriptor {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Identity fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private List\u003cSerialNumber\u003e serialNumbers;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Data fields"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Source source;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        private QuantityAdder quantityAdder;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public UpdateStockDescriptor() { }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * @param toCopy Object to be copied."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public UpdateStockDescriptor(UpdateStockDescriptor toCopy) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setSerialNumbers(toCopy.serialNumbers);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setSource(toCopy.source);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            setQuantityAdder(toCopy.quantityAdder);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * Checks if any updates exists."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         * @return A boolean value indicating if an update exists."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, serialNumbers, source, quantity, location);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setSerialNumbers(List\u003cSerialNumber\u003e serialNumbers) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.serialNumbers \u003d serialNumbers;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public List\u003cSerialNumber\u003e getSerialNumbers() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            assert serialNumbers !\u003d null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return serialNumbers;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setSource(Source source) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.source \u003d source;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cSource\u003e getSource() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(source);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setQuantityAdder(QuantityAdder quantityAdder) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.quantityAdder \u003d quantityAdder;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cQuantityAdder\u003e getQuantityAdder() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(quantityAdder);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            if (!(other instanceof UpdateStockDescriptor)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            UpdateStockDescriptor castedOther \u003d (UpdateStockDescriptor) other;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return getName().equals(castedOther.getName())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getSerialNumbers().equals(castedOther.getSerialNumbers())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getSource().equals(castedOther.getSource())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(castedOther.getQuantity())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getLocation().equals(castedOther.getLocation())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    \u0026\u0026 getQuantityAdder().equals(castedOther.getQuantityAdder());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 295,
      "Ashley-Lau": 3
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SOURCE, PREFIX_QUANTITY, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // Checks if all the prefixes only appear once in the given command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!doesPrefixesAppearOnce(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_QUANTITY)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_HEADER_FIELD, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumber serialNumber \u003d SerialNumber.generateDefaultSerialNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Source source \u003d ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock stock \u003d new Stock(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new AddCommand(stock);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if all of the prefixes appears only once in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static boolean doesPrefixesAppearOnce(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 35,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_SOURCE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Prefix PREFIX_SERIAL_NUMBER \u003d new Prefix(\"sn/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Prefix PREFIX_NEW_QUANTITY \u003d new Prefix(\"nq/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Prefix PREFIX_INCREMENT_QUANTITY \u003d new Prefix(\"iq/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns a list containing all possible prefixes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A list containing all possible prefixes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static List\u003cPrefix\u003e getAllPossiblePrefixes() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allPrefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_SOURCE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_LOCATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        allPrefixes.add(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_NEW_QUANTITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        allPrefixes.add(PREFIX_INCREMENT_QUANTITY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return allPrefixes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 21,
      "Ashley-Lau": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Set\u003cSerialNumber\u003e serialNumberSet \u003d ParserUtil.parseSerialNumber(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new DeleteCommand(serialNumberSet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 5,
      "Ashley-Lau": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.LocationContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SerialNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.predicates.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Used for initial separation of prefix and keywords to find."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static final Pattern BASIC_FIND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            .compile(\"(?\u003ccommandPrefix\u003e.*/)(?\u003ckeyWordsToFind\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SOURCE, PREFIX_SERIAL_NUMBER, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!isAPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_SERIAL_NUMBER)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cPredicate\u003cStock\u003e\u003e getPredicates \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                parsePrefixAndKeywords(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_SOURCE, PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new FindCommand(getPredicates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if any one of the prefixes does not contain an empty {@code Optional} value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static boolean isAPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a list of predicates to filter stocks based on user\u0027s search fields and terms."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param argumentMultimap map of prefix to keywords entered by user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefixes prefixes to parse"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return list of predicates to filter stocks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static List\u003cPredicate\u003cStock\u003e\u003e parsePrefixAndKeywords(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                                                                 Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .map(prefix -\u003e getPredicate(prefix, argumentMultimap.getValue(prefix).get()))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns a field predicate to test whether a {@code Stock}\u0027s {@code field} matches or contains"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * any of the keywords given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param prefix prefix for field"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param keywordsToFind keywords to match with the stock\u0027s field"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return predicate filter stocks based on field"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static Predicate\u003cStock\u003e getPredicate(Prefix prefix, String keywordsToFind) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        final Predicate\u003cStock\u003e fieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedKeywordsToFind \u003d keywordsToFind.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] keywords \u003d trimmedKeywordsToFind.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch(prefix.getPrefix()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new NameContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"sn/\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new SerialNumberContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"s/\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new SourceContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"l/\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fieldContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    new LocationContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + prefix);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return fieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 86,
      "Ashley-Lau": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Parses a {@code String source} into an {@code Source}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws ParseException if the given {@code source} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Source parseSource(String source) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String trimmedSource \u003d source.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Source.isValidSource(trimmedSource)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new ParseException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Source(trimmedSource);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Parses a {@code String serialNumber} into an {@code SerialNumber}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws ParseException if the given {@code serialNumber} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static Set\u003cSerialNumber\u003e parseSerialNumber(String serialNumber) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String trimmedSerialNumber \u003d serialNumber.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] withoutPrefix \u003d trimmedSerialNumber.split(\"sn/\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //a valid array after splitting should be at length 2, index 0 being an empty string and 1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //being the actual serial number."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (withoutPrefix.length \u003c 2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cSerialNumber\u003e serialNumberSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 1; i \u003c withoutPrefix.length; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String currentSerialNumberInString \u003d withoutPrefix[i];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (!SerialNumber.isValidSerialNumber(currentSerialNumberInString)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new ParseException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumberSet.add(new SerialNumber(currentSerialNumberInString.trim()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Parses {@code valueToBeAdded} into a {@code QuantityAdder}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param valueToBeAdded The value to be added into a certain quantity."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new quantity adder containing the value to be added."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws ParseException If there are parsing errors."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static QuantityAdder parseQuantityAdder(String valueToBeAdded) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(valueToBeAdded);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String trimmedValue \u003d valueToBeAdded.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!QuantityAdder.isValidValue(trimmedValue)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(QuantityAdder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new QuantityAdder(trimmedValue);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 17,
      "kc-98": 33,
      "Ashley-Lau": 31,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/StockBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBookParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String trimmedUserInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(trimmedUserInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //            return new ListCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 3,
      "AudreyFelicio": 4,
      "kc-98": 1,
      "Ashley-Lau": 20,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/UpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.UpdateCommand.MESSAGE_TOO_MANY_QUANTITY_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Parses user input and creates a new update command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Parses {@code args} into an update command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param args The user input to be parsed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new update command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @throws ParseException If a parsing error occurs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        args, PREFIX_SERIAL_NUMBER, PREFIX_INCREMENT_QUANTITY, PREFIX_NEW_QUANTITY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                        PREFIX_NAME, PREFIX_SOURCE, PREFIX_LOCATION, PREFIX_QUANTITY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cPrefix\u003e allPrefixes \u003d CliSyntax.getAllPossiblePrefixes();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // If unallowed prefixes are provided"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // If serial number is not provided"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SERIAL_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Check if there are unallowed duplicate prefixes"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Prefix prefix: allPrefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (argMultimap.getAllValues(prefix).size() \u003e\u003d 2 \u0026\u0026 !prefix.equals(PREFIX_SERIAL_NUMBER)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // If both increment and new quantity prefix provided"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).isPresent()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_NEW_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(MESSAGE_TOO_MANY_QUANTITY_PREFIXES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor updateStockDescriptor \u003d new UpdateStockDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Store the serial number provided"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cString\u003e keywords \u003d argMultimap.getAllValues(PREFIX_SERIAL_NUMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        ArrayList\u003cSerialNumber\u003e serialNumbers \u003d keywords.stream().map((keyword) -\u003e new SerialNumber(keyword))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        updateStockDescriptor.setSerialNumbers(serialNumbers);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update name with new name provided"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update source with new source provided"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setSource(ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update quantity with new quantity provided"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NEW_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setQuantity("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_NEW_QUANTITY).get()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Increment quantity with increment value provided"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setQuantityAdder("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                    ParserUtil.parseQuantityAdder(argMultimap.getValue(PREFIX_INCREMENT_QUANTITY).get()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // Update location with new location provided"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            updateStockDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!updateStockDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new UpdateCommand(updateStockDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 104,
      "Ashley-Lau": 5
    }
  },
  {
    "path": "src/main/java/seedu/stock/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Predicate\u003cStock\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the user prefs\u0027 stock book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the user prefs\u0027 stock book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void setStockBookFilePath(Path stockBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Replaces stock book data with the data in {@code stockBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void setStockBook(ReadOnlyStockBook stockBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /** Returns the StockBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ReadOnlyStockBook getStockBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a stock with the same identity as {@code person} exists in the stock book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    boolean hasStock(Stock stock);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The person must exist in the stock book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void deleteStock(Stock target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adds the given stock."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code stock} must not already exist in the stock book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void addStock(Stock stock);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Replaces the given stock {@code target} with {@code updatedStock}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code target} must exist in the stock book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * The {@code updatedStock} must not be the same as another existing stock in the stock book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    void setStock(Stock target, Stock updatedStock);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /** Returns an unmodifiable view of the filtered stock list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ObservableList\u003cStock\u003e getFilteredStockList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Updates the filter of the filtered stock list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void updateFilteredStockList(Predicate\u003cStock\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void setSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ReadOnlySerialNumberSetsBook getSerialNumberSetsBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    boolean hasSerialNumberSet(SerialNumberSet serialNumberSet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void deleteSerialNumberSet(SerialNumberSet target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void updateSerialNumberSet(Source source);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void addSerialNumberSet(SerialNumberSet serialNumberSet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ObservableList\u003cSerialNumberSet\u003e getFilteredSerialNumberSetList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void updateFilteredSerialNumberSetList(Predicate\u003cSerialNumberSet\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    String generateNextSerialNumber(Source source);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 3,
      "kc-98": 23,
      "Ashley-Lau": 23,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents the in-memory model of the stock book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final StockBook stockBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final SerialNumberSetsBook serialNumberSetsBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final FilteredList\u003cStock\u003e filteredStocks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final FilteredList\u003cSerialNumberSet\u003e filteredSerialNumberSets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Initializes a ModelManager with the given stockBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ModelManager(ReadOnlyStockBook stockBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        ReadOnlySerialNumberSetsBook serialNumberSetsBook) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireAllNonNull(stockBook, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        logger.fine(\"Initializing with stock book: \" + stockBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBook \u003d new StockBook(stockBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBook \u003d new SerialNumberSetsBook(serialNumberSetsBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        filteredStocks \u003d new FilteredList\u003c\u003e(this.stockBook.getStockList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        filteredSerialNumberSets \u003d new FilteredList\u003c\u003e(this.serialNumberSetsBook.getSerialNumberSetsList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this(new StockBook(), new UserPrefs(), new SerialNumberSetsBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return userPrefs.getStockBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStockBookFilePath(Path stockBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stockBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        userPrefs.setStockBookFilePath(stockBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StockBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStockBook(ReadOnlyStockBook stockBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBook.resetData(stockBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stock);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook.hasStock(stock);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void deleteStock(Stock target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBook.removeStock(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void addStock(Stock stock) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBook.addStock(stock);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        updateFilteredStockList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void setStock(Stock target, Stock updatedStock) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireAllNonNull(target, updatedStock);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        stockBook.setStock(target, updatedStock);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SerialNumberSetsBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBook.resetData(serialNumberSetsBook);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ReadOnlySerialNumberSetsBook getSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBook;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSet);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBook.hasSerialNumberSet(serialNumberSet);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void deleteSerialNumberSet(SerialNumberSet target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.removeSerialNumberSet(target);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.incrementSerialNumberSet(source);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String generateNextSerialNumber(Source source) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String serialNumber \u003d serialNumberSetsBook.generateNextSerialNumber(source);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.incrementSerialNumberSet(source);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.addSerialNumberSet(serialNumberSet);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //updateFilteredSerialNumberSetsList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireAllNonNull(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBook.setSerialNumberSet(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Stock List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Stock} backed by the internal list of"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code versionedStockBook}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e getFilteredStockList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return filteredStocks;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void updateFilteredStockList(Predicate\u003cStock\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        filteredStocks.setPredicate(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ObservableList\u003cSerialNumberSet\u003e getFilteredSerialNumberSetList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return filteredSerialNumberSets;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateFilteredSerialNumberSetList(Predicate\u003cSerialNumberSet\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        filteredSerialNumberSets.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook.equals(other.stockBook)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 filteredStocks.equals(other.filteredStocks);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 4,
      "kc-98": 69,
      "Ashley-Lau": 38,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ReadOnlySerialNumberSetsBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Unmodifiable view of a SerialNumberSetsBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public interface ReadOnlySerialNumberSetsBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns an unmodifiable view of the serial number sets list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * This list will not contain any duplicate serial number set."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ObservableList\u003cSerialNumberSet\u003e getSerialNumberSetsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 17
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ReadOnlyStockBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Unmodifiable view of an stock book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public interface ReadOnlyStockBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    ObservableList\u003cStock\u003e getStockList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Path getSerialNumberSetsBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/SerialNumberSetsBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.AccumulatedQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.UniqueSerialNumberSetList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Wraps all data at the SerialNumberSetsBook level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Duplicates are not allowed (by .isSameSerialNumberSet comparison)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SerialNumberSetsBook implements ReadOnlySerialNumberSetsBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final UniqueSerialNumberSetList serialNumberSets;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets \u003d new UniqueSerialNumberSetList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSetsBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Creates a SerialNumberSetsBook using the SerialNumberSets in the {@code toBeCopied}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSetsBook(ReadOnlySerialNumberSetsBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the contents of the SerialNumberSet list with {@code serialNumberSetList}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code serialNumberSets} must not contain duplicate SerialNumberSet."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSets(List\u003cSerialNumberSet\u003e serialNumberSetList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSets.setSerialNumberSets(serialNumberSetList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Resets the existing data of this {@code SerialNumberSetsBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void resetData(ReadOnlySerialNumberSetsBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        setSerialNumberSets(newData.getSerialNumberSetsList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if a SerialNumberSet with the same identity as {@code serialNumberSet} exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     in the SerialNumberSetsBook."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.contains(serialNumberSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Adds a SerialNumberSet to the SerialNumberSetsBook."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The stock must not already exist in the stock book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addSerialNumberSet(SerialNumberSet p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the given SerialNumberSet {@code target} in the list with {@code editedSerialNumberSet}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code target} must exist in the SerialNumberSetsBook."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The SerialNumberSet identity of {@code editedSerialNumberSet} must not be the same as"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * another existing SerialNumberSet in the SerialNumberSetsBook."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(editedSerialNumberSet);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.setSerialNumberSet(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Removes {@code key} from this {@code SerialNumberSetsBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code key} must exist in the SerialNumberSetsBook"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void removeSerialNumberSet(SerialNumberSet key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //removes the serial number set related to the given key."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Increases the quantity in the serial number set by 1 of the respective source company,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     used when new stock is added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source The source company name."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void incrementSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cSerialNumberSet\u003e serialNumberSetOptional \u003d serialNumberSets.getSerialNumberSet(source);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (serialNumberSetOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet current \u003d serialNumberSetOptional.get();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet updated \u003d current.getNewIncrementedSerialNumberSet();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            setSerialNumberSet(current, updated);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet toAdd \u003d new SerialNumberSet(source, new AccumulatedQuantity(\"1\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //adds the desired serial number set by calling the addSerialNumberSet method."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            addSerialNumberSet(toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Generates a serial number for the stock from a particular source company."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source The source company name."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String generateNextSerialNumber(Source source) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cSerialNumberSet\u003e serialNumberSetOptional \u003d serialNumberSets.getSerialNumberSet(source);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (serialNumberSetOptional.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet current \u003d serialNumberSetOptional.get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String numberSection \u003d current.getAccumulatedQuantity().getIncrementedAccumulatedQuantity()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                        .getAccumulatedQuantity();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return source.value + numberSection;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return source.value + \"1\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.asUnmodifiableObservableList().size() + \" serial number sets\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ObservableList\u003cSerialNumberSet\u003e getSerialNumberSetsList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || (other instanceof SerialNumberSetsBook // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 serialNumberSets.equals(((SerialNumberSetsBook) other).serialNumberSets));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSets.hashCode();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 161
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/StockBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.UniqueStockList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Wraps all data at the stock-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Duplicates are not allowed (by .isSameStock comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBook implements ReadOnlyStockBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final UniqueStockList stocks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates an StockBook using the Stocks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBook(ReadOnlyStockBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Replaces the contents of the stock list with {@code stocks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * {@code stocks} must not contain duplicate stocks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks(List\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stocks.setStocks(stocks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Resets the existing data of this {@code StockBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void resetData(ReadOnlyStockBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        setStocks(newData.getStockList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a stock with the same identity as {@code stock} exists in the stock book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stock);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.contains(stock);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adds a stock to the stock book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The stock must not already exist in the stock book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void addStock(Stock p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedStock}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code target} must exist in the stock book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The stock identity of {@code editedStock} must not be the same as another existing stock in the stock book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock(Stock target, Stock editedStock) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(editedStock);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        stocks.setStock(target, editedStock);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Removes {@code key} from this {@code StockBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code key} must exist in the stock book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void removeStock(Stock key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.asUnmodifiableObservableList().size() + \" stocks\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e getStockList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof StockBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 stocks.equals(((StockBook) other).stocks));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stocks.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 3,
      "Ashley-Lau": 117
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Path stockBookFilePath \u003d Paths.get(\"data\" , \"stockbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Path serialNumberSetsBookFilePath \u003d Paths.get(\"data\", \"serialnumbers.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        setStockBookFilePath(newUserPrefs.getStockBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        setSerialNumberSetsBookFilePath(newUserPrefs.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStockBookFilePath(Path stockBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stockBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBookFilePath \u003d stockBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Path getSerialNumberSetsBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSetsBookFilePath(Path serialNumberSetsBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSetsBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBookFilePath \u003d serialNumberSetsBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 stockBookFilePath.equals(o.stockBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 serialNumberSetsBookFilePath.equals(o.serialNumberSetsBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Objects.hash(guiSettings, stockBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + stockBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        sb.append(\"\\nLocal serial number data file location : \" + serialNumberSetsBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 12,
      "Ashley-Lau": 11,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/AccumulatedQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents a source\u0027s accumulated quantity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class AccumulatedQuantity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"AccumulatedQuantity numbers should be more than 0.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private String accumulatedQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs a {@code AccmulatedQuantity}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param accumulatedQuantity A valid accumulated quantity."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public AccumulatedQuantity(String accumulatedQuantity) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(accumulatedQuantity);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        checkArgument(isValidAccQuantity(accumulatedQuantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d accumulatedQuantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public AccumulatedQuantity getIncrementedAccumulatedQuantity() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int increased \u003d Integer.parseInt(this.accumulatedQuantity) + 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new AccumulatedQuantity(Integer.toString(increased));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getAccumulatedQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.accumulatedQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if a given int is more than zero or more."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static boolean isValidAccQuantity(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return accumulatedQuantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || (other instanceof AccumulatedQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 accumulatedQuantity.equals(((AccumulatedQuantity) other).accumulatedQuantity)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return accumulatedQuantity.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock\u0027s storage location in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs an {@code location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 16,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock\u0027s name in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock\u0027s quantity in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)} } (to be changed)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \"Quantity numbers should be a number more than 0.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final String quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a given string is a number and is more than zero or more."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 quantity.equals(((Quantity) other).quantity)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return quantity.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 51
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/QuantityAdder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Represents functionalities to add value to an quantity object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidValue(String)} } (to be changed)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class QuantityAdder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            \"Increment value should be an integer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    // Matches any signed integer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\\\\+|-)?\\\\d+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public final String valueToBeAdded;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Constructss a new quantity adder object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param valueToBeAdded The value to be added into a quantity object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public QuantityAdder(String valueToBeAdded) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireNonNull(valueToBeAdded);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        checkArgument(isValidValue(valueToBeAdded), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.valueToBeAdded \u003d valueToBeAdded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Tests whether {@code test} is valid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param test The input to be tested."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A boolean value indicating if the test passes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return valueToBeAdded;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                || (other instanceof QuantityAdder // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                \u0026\u0026 valueToBeAdded.equals(((QuantityAdder) other).valueToBeAdded)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return valueToBeAdded.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns the incremented or decremented quantity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param toBeAddedInto The quantity to be added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The quantity result after being incremented."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public Optional\u003cQuantity\u003e incrementQuantity(Quantity toBeAddedInto) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        BigInteger incrementValue \u003d new BigInteger(valueToBeAdded);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        BigInteger currentQuantity \u003d new BigInteger(toBeAddedInto.quantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        currentQuantity \u003d currentQuantity.add(incrementValue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (currentQuantity.signum() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return Optional.of(new Quantity(currentQuantity.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 74
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/SerialNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents the serial number in the serialNumberSets Book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class SerialNumber {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"Serial numbers should only contain words and numbers, and it should be at least 2 digits long\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The first character of the source must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs an {@code SerialNumber}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * SerialNumber can only be created by calling {@link SerialNumber#generateDefaultSerialNumber()}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param serialNumber A valid serial number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public SerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a given string is a valid serial number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidSerialNumber(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getSerialNumberAsString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Generates the default serial number of the product."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return SerialNumber of the object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static SerialNumber generateDefaultSerialNumber() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumber(\"0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof SerialNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 serialNumber.equals(((SerialNumber) other).serialNumber)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 12,
      "Ashley-Lau": 55
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/SerialNumberSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SerialNumberSet {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Source source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private AccumulatedQuantity accumulatedQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructor for a serialNumberSet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source The source company name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param accumulatedQuantity The accumulated quantity of stocks the source company has in relation to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * the local warehouse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSet(Source source, AccumulatedQuantity accumulatedQuantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(accumulatedQuantity);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d accumulatedQuantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public AccumulatedQuantity getAccumulatedQuantity() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.accumulatedQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if both serialNumberSet has the same source company."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isSameSerialNumberSetSource(SerialNumberSet otherSerialNumberSet) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (otherSerialNumberSet \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return otherSerialNumberSet !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getSource().equals(getSource());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if both serialNumberSet is the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isSameSerialNumberSet(SerialNumberSet otherSerialNumberSet) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (otherSerialNumberSet \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return otherSerialNumberSet !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getSource().equals(getSource())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getAccumulatedQuantity().equals(getAccumulatedQuantity());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Gets a new SerialNumberSet with an increment quantity of 1."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The new SerialNumberSet."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSet getNewIncrementedSerialNumberSet() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Source newSource \u003d this.source;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        AccumulatedQuantity newAccQuantity \u003d this.accumulatedQuantity.getIncrementedAccumulatedQuantity();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumberSet(newSource, newAccQuantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if both serial number set have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * This defines a stronger notion of equality between two serial number set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!(other instanceof SerialNumberSet)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSet otherSerialNumberSet \u003d (SerialNumberSet) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return otherSerialNumberSet.getSource().equals(getSource())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 otherSerialNumberSet.getAccumulatedQuantity().equals(getAccumulatedQuantity());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return Objects.hash(source, accumulatedQuantity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        builder.append(\" Source: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .append(getSource())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .append(\" AccumulatedQuantity: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .append(getAccumulatedQuantity());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 106
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Source.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents a Stock\u0027s source in the stock book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Source {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // Original class is email. Can be reused to store the email of the company next time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"1. The local-part should only contain alphanumeric characters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    //      and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //            + \"    - consist of alphanumeric characters,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    //      a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    // alphanumeric and special characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    //    + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // Condition can be refined later."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The first character of the source must not be a whitespace,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs an {@code Source}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source A valid source."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Source(String source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        checkArgument(isValidSource(source), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        value \u003d source;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if a given string is a valid source."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isValidSource(String test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof Source // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 value.equals(((Source) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isSameSource(Source source) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.value.equals(source.value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 10,
      "Ashley-Lau": 73
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/Stock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a Stock in the stock book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Stock {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Source source;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Stock(Name name, SerialNumber serialNumber, Source source, Quantity quantity, Location location) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireAllNonNull(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return source;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if both stocks of the same name, serialnumber and source."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * This defines a weaker notion of equality between two stocks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isSameStock(Stock otherStock) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (otherStock \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return otherStock !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getSerialNumber().equals(getSerialNumber())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getSource().equals(getSource());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if both stocks have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * This defines a stronger notion of equality between two stocks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!(other instanceof Stock)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock otherStock \u003d (Stock) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return otherStock.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getSerialNumber().equals(getSerialNumber())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getSource().equals(getSource())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 otherStock.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Objects.hash(name, serialNumber, quantity, source, location);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" SerialNumber: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getSerialNumber())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" Source: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getSource())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .append(getLocation());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 5,
      "Ashley-Lau": 110
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/UniqueSerialNumberSetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateSerialNumberSetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateStockException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.SerialNumberSetNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.exceptions.StockNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * A list of serialNumberSets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @see SerialNumberSet#isSameSerialNumberSet(SerialNumberSet)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class UniqueSerialNumberSetList implements Iterable\u003cSerialNumberSet\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final ObservableList\u003cSerialNumberSet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final ObservableList\u003cSerialNumberSet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if the list contains an equivalent serial number set\u0027s source as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean contains(SerialNumberSet toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalList.stream().anyMatch(serialNumberSet -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                serialNumberSet.getSource().isSameSource(toCheck.getSource()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Adds a serial number set to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The serial number set\u0027s source must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param toAdd The serialNumberSet to add."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void add(SerialNumberSet toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cSerialNumberSet\u003e getSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet curr \u003d internalList.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (curr.getSource().isSameSource(source)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return Optional.of(curr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the serial number set {@code target} in the list with {@code editedSerialNumberSet}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The source identity of {@code editedSerialNumberSet} must not be the same as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * another existing serial number set in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireAllNonNull(target, editedSerialNumberSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new StockNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!target.isSameSerialNumberSetSource(editedSerialNumberSet) \u0026\u0026 contains(editedSerialNumberSet)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.set(index, editedSerialNumberSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Removes the equivalent SerialNumberSet from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * The SerialNumberSet must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void remove(SerialNumberSet toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new SerialNumberSetNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSets(UniqueSerialNumberSetList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Replaces the contents of this list with {@code serialNumberSets}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * {@code serialNumberSets} must not contain duplicate serial number sets."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setSerialNumberSets(List\u003cSerialNumberSet\u003e serialNumberSets) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireAllNonNull();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!serialNumberSetsAreUnique(serialNumberSets)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DuplicateSerialNumberSetException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        internalList.setAll(serialNumberSets);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public ObservableList\u003cSerialNumberSet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Iterator\u003cSerialNumberSet\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || (other instanceof UniqueSerialNumberSetList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSerialNumberSetList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns true if {@code serial number sets} contains only unique serial number sets."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private boolean serialNumberSetsAreUnique(List\u003cSerialNumberSet\u003e serialNumberSets) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 0; i \u003c serialNumberSets.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int j \u003d i + 1; j \u003c serialNumberSets.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (serialNumberSets.get(i).isSameSerialNumberSetSource(serialNumberSets.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 149
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/UniqueStockList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateStockException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.StockNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A list of stock that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A stock is considered unique by comparing using {@code Stock#isSameStock(Stock)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * persons uses Stock#isSameStock(Stock) for equality so as to ensure that the stock being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * unique in terms of identity in the UniqueStockList. However, the removal of a stock uses Stock#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * as to ensure that the stock with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @see Stock#isSameStock(Stock)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class UniqueStockList implements Iterable\u003cStock\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final ObservableList\u003cStock\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final ObservableList\u003cStock\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean contains(Stock toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStock);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void add(Stock toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Replaces the stock {@code target} in the list with {@code updatedStock}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * The person identity of {@code updatedStock} must not be the same as another existing stock in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void setStock(Stock target, Stock updatedStock) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        requireAllNonNull(target, updatedStock);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new StockNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        if (!target.isSameStock(updatedStock) \u0026\u0026 contains(updatedStock)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        internalList.set(index, updatedStock);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove(Stock toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new StockNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks(UniqueStockList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks(List\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireAllNonNull(stocks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!personsAreUnique(stocks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new DuplicateStockException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        internalList.setAll(stocks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ObservableList\u003cStock\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Iterator\u003cStock\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || (other instanceof UniqueStockList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStockList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private boolean personsAreUnique(List\u003cStock\u003e stocks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (int i \u003d 0; i \u003c stocks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            for (int j \u003d i + 1; j \u003c stocks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (stocks.get(i).isSameStock(stocks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 6,
      "Ashley-Lau": 131
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/DuplicateSerialNumberSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Signals that the operation will result in duplicate Serial Number set (Serial number sets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class DuplicateSerialNumberSetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public DuplicateSerialNumberSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(\"Operation would result in duplicate serial number.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 11
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/DuplicateStockException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Signals that the operation will result in duplicate Stock (Stocks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DuplicateStockException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DuplicateStockException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"Operation would result in duplicate stock.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/SerialNumberSetNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Signals that the operation is unable to find the specified serial number set."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class SerialNumberSetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 6
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/exceptions/StockNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Signals that the operation is unable to find the specified stock."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 6
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/LocationContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Location} matches or contains"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class LocationContainsKeywordsPredicate implements Predicate\u003cStock\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public LocationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if the location field of stock matches or contains"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * any of the keywords."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if location field matches keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String stockLocation \u003d stock.getLocation().value.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .anyMatch(keyword -\u003e stockLocation.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof LocationContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 keywords.equals(((LocationContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Location: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 45
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Name} matches or contains"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStock\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s name matches or contains any of the keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String stockName \u003d stock.getName().fullName.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .anyMatch(keyword -\u003e stockName.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Name: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 19,
      "Ashley-Lau": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/SerialNumberContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code SerialNumber} matches or contains"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class SerialNumberContainsKeywordsPredicate implements Predicate\u003cStock\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public SerialNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s serial number matches or contains any of the keywords."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String stockSerialNumber \u003d stock.getSerialNumber().getSerialNumberAsString().toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .anyMatch(keyword -\u003e stockSerialNumber.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof SerialNumberContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 keywords.equals(((SerialNumberContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Serial Number: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 44,
      "kc-98": 1
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/stock/predicates/SourceContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Tests that a {@code Stock}\u0027s {@code Source} matches or contains"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class SourceContainsKeywordsPredicate implements Predicate\u003cStock\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public SourceContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns true if stock\u0027s source matches or contains any of the keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param stock stock to test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if stock matches keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean test(Stock stock) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String stockSource \u003d stock.getSource().value.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                .anyMatch(keyword -\u003e stockSource.contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || (other instanceof SourceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 keywords.equals(((SourceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Source: \" + keywords.stream().reduce((keyword, next) -\u003e keyword + \" \" + next).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 45
    }
  },
  {
    "path": "src/main/java/seedu/stock/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Contains utility methods for populating {@code StockBook} with sample data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Stock[] getSampleStocks() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //return new Stock[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Alex Yeoh\"), new Quantity(\"87438807\"), new Source(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Bernice Yu\"), new Quantity(\"99272758\"), new Source(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Charlotte Oliveiro\"), new Quantity(\"93210283\"), new Source(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"David Li\"), new Quantity(\"91031282\"), new Source(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"family\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Irfan Ibrahim\"), new Quantity(\"92492021\"), new Source(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //    new Stock(new Name(\"Roy Balakrishnan\"), new Quantity(\"92624417\"), new Source(\"royb@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        new Location(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        //        getTagSet(\"colleagues\"))}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Stock[]{};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static SerialNumberSet[] getSampleSerialNumberSets() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumberSet[]{};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static ReadOnlyStockBook getSampleStockBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockBook sampleAb \u003d new StockBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (Stock sampleStock : getSampleStocks()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            sampleAb.addStock(sampleStock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static ReadOnlySerialNumberSetsBook getSampleSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSetsBook sampleAb \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (SerialNumberSet sampleSerialNumberSet : getSampleSerialNumberSets()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            sampleAb.addSerialNumberSet(sampleSerialNumberSet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 15,
      "Ashley-Lau": 31,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonAdaptedSerialNumberSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.AccumulatedQuantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Jackson-friendly version of {@link SerialNumberSet}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "class JsonAdaptedSerialNumberSet {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SerialNumberSet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final String accumulatedQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs a {@code JsonAdaptedSerialNumberSet} with the given SerialNumberSet details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonAdaptedSerialNumberSet(@JsonProperty(\"source\") String source,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                      @JsonProperty(\"accumulatedQuantity\") String accumulatedQuantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d accumulatedQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts a given {@code SerialNumberSet} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonAdaptedSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.source \u003d serialNumberSet.getSource().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.accumulatedQuantity \u003d serialNumberSet.getAccumulatedQuantity().getAccumulatedQuantity();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code SerialNumberSet} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted SerialNumberSet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Source.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!Source.isValidSource(source)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        final Source modelSource \u003d new Source(source);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (accumulatedQuantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    AccumulatedQuantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!AccumulatedQuantity.isValidAccQuantity(accumulatedQuantity)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new IllegalValueException(AccumulatedQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        final AccumulatedQuantity modelAccQuantity \u003d new AccumulatedQuantity(accumulatedQuantity);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new SerialNumberSet(modelSource, modelAccQuantity);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 65
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonAdaptedStock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Jackson-friendly version of {@link Stock}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "class JsonAdaptedStock {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a {@code JsonAdaptedStock} with the given person details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonAdaptedStock(@JsonProperty(\"name\") String name, @JsonProperty(\"serialNumber\") String serialNumber,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                            @JsonProperty(\"source\") String source, @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                            @JsonProperty(\"location\") String location) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts a given {@code Stock} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonAdaptedStock(Stock source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumber \u003d source.getSerialNumber().getSerialNumberAsString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d source.getSource().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        quantity \u003d source.getQuantity().quantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Stock} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted stock."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Stock toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(\"donkey\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (serialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Source.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final SerialNumber modelSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Source.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Source.isValidSource(source)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Source modelSource \u003d new Source(source);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Stock(modelName, modelSerialNumber, modelSource, modelQuantity, modelLocation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 1,
      "Ashley-Lau": 103
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonSerialNumberSetsBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * A class to access SerialNumberSetsBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class JsonSerialNumberSetsBookStorage implements SerialNumberSetsBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerialNumberSetsBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonSerialNumberSetsBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Path getSerialNumberSetsBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return readSerialNumberSetsBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Similar to {@link #readSerialNumberSetsBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook(Path filePath)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Optional\u003cJsonSerializableSerialNumberSetsBook\u003e jsonSerialNumberSetsBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                filePath, JsonSerializableSerialNumberSetsBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (!jsonSerialNumberSetsBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return Optional.of(jsonSerialNumberSetsBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(\"failed here\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        saveSerialNumberSetsBook(serialNumberSetsBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Similar to {@link #saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook, Path filePath)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(serialNumberSetsBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSerialNumberSetsBook(serialNumberSetsBook), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 84
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonSerializableSerialNumberSetsBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * An immutable SerialNumberSets that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "@JsonRootName(value \u003d \"serialNumberSets\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "class JsonSerializableSerialNumberSetsBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SERIAL_NUMBER_SET \u003d \"Serial number sets data contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            + \"serial number sets.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private final List\u003cJsonAdaptedSerialNumberSet\u003e serialNumberSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Constructs a {@code JsonSerializableSerialNumberSet} with the given serial number sets."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonSerializableSerialNumberSetsBook(@JsonProperty(\"serialNumberSets\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                                       List\u003cJsonAdaptedSerialNumberSet\u003e serialNumberSets) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSets.addAll(serialNumberSets);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts a given {@code ReadOnlyStockBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSerialNumberSetsBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public JsonSerializableSerialNumberSetsBook(ReadOnlySerialNumberSetsBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSets.addAll(source.getSerialNumberSetsList().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                .map(JsonAdaptedSerialNumberSet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Converts this SerialNumberSetsBook into the model\u0027s {@code SerialNumberSetsBook} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public SerialNumberSetsBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        SerialNumberSetsBook serialNumberSetsBook \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (JsonAdaptedSerialNumberSet jsonAdaptedSerialNumberSet : serialNumberSets) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            SerialNumberSet serialNumberSet \u003d jsonAdaptedSerialNumberSet.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (serialNumberSetsBook.hasSerialNumberSet(serialNumberSet)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SERIAL_NUMBER_SET);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            serialNumberSetsBook.addSerialNumberSet(serialNumberSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 63
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonSerializableStockBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * An Immutable StockBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "@JsonRootName(value \u003d \"stockbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "class JsonSerializableStockBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STOCK \u003d \"Stocks list contains duplicate stock(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final List\u003cJsonAdaptedStock\u003e stocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructs a {@code JsonSerializableStockBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonSerializableStockBook(@JsonProperty(\"stocks\") List\u003cJsonAdaptedStock\u003e stocks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stocks.addAll(stocks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts a given {@code ReadOnlyStockBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableStockBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonSerializableStockBook(ReadOnlyStockBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stocks.addAll(source.getStockList().stream().map(JsonAdaptedStock::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts this stock book into the model\u0027s {@code StockBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockBook stockBook \u003d new StockBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (JsonAdaptedStock jsonAdaptedStock : stocks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Stock stock \u003d jsonAdaptedStock.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (stockBook.hasStock(stock)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stockBook.addStock(stock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 60
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonStockBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A class to access StockBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonStockBookStorage implements StockBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStockBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public JsonStockBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return readStockBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Similar to {@link #readStockBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Optional\u003cJsonSerializableStockBook\u003e jsonStockBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                filePath, JsonSerializableStockBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!jsonStockBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return Optional.of(jsonStockBook.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(\"failed here\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        saveStockBook(stockBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Similar to {@link #saveStockBook(ReadOnlyStockBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        requireNonNull(stockBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStockBook(stockBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 27,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/SerialNumberSetsBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Represents a storage for {@link SerialNumberSetsBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public interface SerialNumberSetsBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Path getSerialNumberSetsBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns SerialNumberSetsBook data as a {@link ReadOnlySerialNumberSetsBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @see #getSerialNumberSetsBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Saves the given {@link ReadOnlySerialNumberSetsBook} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberSetsBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @see #saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook, Path filePath)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 49
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/StockBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a storage for {@link StockBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public interface StockBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns StockBook data as a {@link ReadOnlyStockBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see #getStockBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Optional\u003cReadOnlyStockBook\u003e readStockBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Saves the given {@link ReadOnlyStockBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param stockBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void saveStockBook(ReadOnlyStockBook stockBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see #saveStockBook(ReadOnlyStockBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void saveStockBook(ReadOnlyStockBook stockBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 46
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public interface Storage extends StockBookStorage, UserPrefsStorage, SerialNumberSetsBookStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Path getStockBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    void saveStockBook(ReadOnlyStockBook stockBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 7,
      "Ashley-Lau": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Manages storage of StockBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private StockBookStorage stockBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private SerialNumberSetsBookStorage serialNumberSetsBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code StockBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public StorageManager(StockBookStorage stockBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                          SerialNumberSetsBookStorage serialNumberSetsBook) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stockBookStorage \u003d stockBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.serialNumberSetsBookStorage \u003d serialNumberSetsBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StockBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBookStorage.getStockBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return readStockBook(stockBookStorage.getStockBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Optional\u003cReadOnlyStockBook\u003e readStockBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockBookStorage.readStockBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        saveStockBook(stockBook, stockBookStorage.getStockBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveStockBook(ReadOnlyStockBook stockBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockBookStorage.saveStockBook(stockBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SerialNumberSetsBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Path getSerialNumberSetsBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBookStorage.getSerialNumberSetsBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return readSerialNumberSetsBook(serialNumberSetsBookStorage.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Reads the serial number sets book data from the given file path."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath The filepath to read from."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The ReadOnlySerialNumberSetsBook object wrapped by Optional."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Optional\u003cReadOnlySerialNumberSetsBook\u003e readSerialNumberSetsBook(Path filePath)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return serialNumberSetsBookStorage.readSerialNumberSetsBook(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        saveSerialNumberSetsBook(serialNumberSetsBook, serialNumberSetsBookStorage.getSerialNumberSetsBookFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Writes the serial number sets book data to the desired file path."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param serialNumberSetsBook The serialNumberSetsBook to write."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param filePath The filepath to read from."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void saveSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook, Path filePath)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumberSetsBookStorage.saveSerialNumberSetsBook(serialNumberSetsBook, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 49,
      "Ashley-Lau": 18,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/stock/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Represents a storage for {@link seedu.stock.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Saves the given {@link seedu.stock.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "         * @see seedu.stock.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private StockListPanel stockListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private StackPane stockListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListPanel \u003d new StockListPanel(logic.getFilteredStockList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListPanelPlaceholder.getChildren().add(stockListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getStockBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockListPanel getStockListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return stockListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see seedu.stock.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 15,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StockCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * An UI component that displays information of a {@code Stock}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String FXML \u003d \"StockListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public final Stock stock;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label serialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label locationStored;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StockCode} with the given {@code Stock} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockCard(Stock stock, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.stock \u003d stock;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name.setText(stock.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        serialNumber.setText(\"S/N: \" + stock.getSerialNumber().getSerialNumberAsString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        quantity.setText(\"Quantity: \" + stock.getQuantity().quantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        source.setText(\"Source: \" + stock.getSource().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        locationStored.setText(\"Location in warehouse: \" + stock.getLocation().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (!(other instanceof StockCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StockCard card \u003d (StockCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u0026\u0026 stock.equals(card.stock);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 4,
      "Ashley-Lau": 68
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/StockListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Panel containing the list of stocks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String FXML \u003d \"StockListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StockListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private ListView\u003cStock\u003e stockListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StockListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockListPanel(ObservableList\u003cStock\u003e stockList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListView.setItems(stockList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stockListView.setCellFactory(listView -\u003e new StockListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Stock} using a {@code StockCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    class StockListViewCell extends ListCell\u003cStock\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        protected void updateItem(Stock stock, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            super.updateItem(stock, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (empty || stock \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setGraphic(new StockCard(stock, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 1,
      "Ashley-Lau": 48
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 5,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/stock/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "         title\u003d\"Warenager\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        \u003cVBox fx:id\u003d\"stockList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "          \u003cStackPane fx:id\u003d\"stockListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/StockListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      \u003cLabel fx:id\u003d\"serialNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$serialNumber\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "      \u003cLabel fx:id\u003d\"locationStored\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$locationStored\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/StockListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "  \u003cListView fx:id\u003d\"stockListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import static seedu.stock.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import static seedu.stock.testutil.TypicalStocks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    public void execute_newStock_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        Stock validStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getStockBook(), new UserPrefs(), new SerialNumberSetsBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        expectedModel.addStock(validStock);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validStock), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validStock), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        Stock personInList \u003d model.getStockBook().getStockList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_STOCK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 39,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlySerialNumberSetsBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyStockBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void execute_stockAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ModelStubAcceptingStockAdded modelStub \u003d new ModelStubAcceptingStockAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock validStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStock).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStock), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Arrays.asList(validStock), modelStub.stocksAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void execute_duplicateStock_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock validStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStock);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStock(validStock);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_STOCK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock apple \u003d new StockBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock banana \u003d new StockBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addAppleCommand \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addBananaCommand \u003d new AddCommand(banana);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        AddCommand addAppleCommandCopy \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different stock -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public Path getStockBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setStockBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void addStock(Stock stock) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setStockBook(ReadOnlyStockBook newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void deleteStock(Stock target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setStock(Stock target, Stock editedStock) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ObservableList\u003cStock\u003e getFilteredStockList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void updateFilteredStockList(Predicate\u003cStock\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setSerialNumberSetsBook(ReadOnlySerialNumberSetsBook serialNumberSetsBook) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlySerialNumberSetsBook getSerialNumberSetsBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void deleteSerialNumberSet(SerialNumberSet target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void setSerialNumberSet(SerialNumberSet target, SerialNumberSet editedSerialNumberSet) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void updateSerialNumberSet(Source source) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void addSerialNumberSet(SerialNumberSet serialNumberSet) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ObservableList\u003cSerialNumberSet\u003e getFilteredSerialNumberSetList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void updateFilteredSerialNumberSetList(Predicate\u003cSerialNumberSet\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public String generateNextSerialNumber(Source source) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * A Model stub that contains a single stock."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private class ModelStubWithStock extends ModelStub {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        private final Stock stock;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ModelStubWithStock(Stock stock) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            this.stock \u003d stock;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return this.stock.isSameStock(stock);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * A Model stub that always accept the stock being added."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private class ModelStubAcceptingStockAdded extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        final ArrayList\u003cStock\u003e stocksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public boolean hasStock(Stock stock) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return stocksAdded.stream().anyMatch(stock::isSameStock);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public void addStock(Stock stock) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            requireNonNull(stock);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stocksAdded.add(stock);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        public ReadOnlyStockBook getStockBook() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new StockBook();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 243,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_INCREMENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_NEW_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_NAME_APPLE \u003d \"Apple Juice\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_NAME_BANANA \u003d \"Banana Bun\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_APPLE \u003d \"Ntuc1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_BANANA \u003d \"Fairprice1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SOURCE_APPLE \u003d \"Ntuc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_SOURCE_BANANA \u003d \"Fairprice\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_QUANTITY_APPLE \u003d \"2000\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_QUANTITY_BANANA \u003d \"1000\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_LOCATION_APPLE \u003d \"Fruit Section, Subsection C\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String VALID_LOCATION_BANANA \u003d \"Fruits section, Subsection B\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String NAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_APPLE \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SERIAL_NUMBER_DESC_BANANA \u003d \" \" + PREFIX_SERIAL_NUMBER + VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SOURCE_DESC_APPLE \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_APPLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String SOURCE_DESC_BANANA \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_BANANA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String NEW_QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_NEW_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String NEW_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_NEW_QUANTITY + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INCREMENT_QUANTITY_DESC_APPLE \u003d \" \" + PREFIX_INCREMENT_QUANTITY + VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INCREMENT_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_INCREMENT_QUANTITY + VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String LOCATION_DESC_APPLE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_APPLE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String LOCATION_DESC_BANANA \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"donje#y\"; // \u0027#\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_SERIAL_NUMBER_DESC \u003d \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            + PREFIX_SERIAL_NUMBER; // empty serial number not allowed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_SOURCE_DESC \u003d \" \" + PREFIX_SOURCE; // missing source"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"-100\"; // negative quantity not allowed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INVALID_INCREMENT_QUANTITY_DESC \u003d \" \" + PREFIX_INCREMENT_QUANTITY + \"two\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INVALID_NEW_QUANTITY_DESC \u003d \" \" + PREFIX_NEW_QUANTITY + \"-100\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final String INVALID_NEW_QUANTITY_DESC2 \u003d \" \" + PREFIX_NEW_QUANTITY + \"two\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_SERIAL_NUMBER \u003d \"0\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * - the stock book, filtered stock list and selected stock in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StockBook expectedStockBook \u003d new StockBook(actualModel.getStockBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cStock\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStockList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertEquals(expectedStockBook, actualModel.getStockBook());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStockList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 61,
      "Ashley-Lau": 41,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/EditStockDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class EditStockDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/commands/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStockBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.getTypicalStocksSerialNumbers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.testutil.UpdateStockDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private SerialNumberSetsBook serialNumbers \u003d getTypicalStocksSerialNumbers();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalStockBook(), new UserPrefs(), serialNumbers);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlyQuantityUpdated_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withQuantity(\"2103\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlySourceUpdated_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withSource(\"Value$\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlyLocationUpdated_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withLocation(\"Discount section\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_onlyNameUpdated_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withName(\"Mochi\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStock);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Index indexLastStock \u003d Index.fromOneBased(model.getFilteredStockList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock lastStock \u003d model.getFilteredStockList().get(indexLastStock.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StockBuilder stockInList \u003d new StockBuilder(lastStock);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d stockInList.withName(VALID_NAME_APPLE).withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE).withLocation(VALID_LOCATION_APPLE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(updatedStock.getSerialNumber().toString()).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(lastStock, updatedStock);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d model.getFilteredStockList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor serialNumberOnly \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(updatedStock.getSerialNumber().toString()).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(serialNumberOnly);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock stockInFilteredList \u003d model.getFilteredStockList().get(0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder(stockInFilteredList).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(new UpdateStockDescriptorBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(stockInFilteredList.getSerialNumber().toString()).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS, \"\\n\" + updatedStock);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                model.getSerialNumberSetsBook());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(0), updatedStock);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_multipleStocksUpdated_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStockApple \u003d new StockBuilder().withName(\"Ice Cream\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(\"Magnum\").withLocation(\"Freezer One\").withSerialNumber(VALID_SERIAL_NUMBER_APPLE)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(\"2000\").build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStockBanana \u003d new StockBuilder().withName(\"Ice Cream\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(\"Magnum\").withLocation(\"Freezer One\").withSerialNumber(VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(\"2103\").build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(\"Ice Cream\").withSource(\"Magnum\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(\"Freezer One\").withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_STOCK_SUCCESS,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                \"\\n\" + updatedStockApple + \"\\n\" + updatedStockBanana);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new StockBook(model.getStockBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                new SerialNumberSetsBook(model.getSerialNumberSetsBook()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(0), updatedStockApple);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedModel.setStock(model.getFilteredStockList().get(1), updatedStockBanana);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_serialNumberNotFound_failure() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock updatedStock \u003d new StockBuilder().withSerialNumber(\"NotFound\").build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(updatedStock).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_someSerialNumberNotFound_failure() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, \"Not Found\").build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void execute_allSerialNumberNotFound_failure() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(\"Unknown\", \"Not Found\").build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_SERIAL_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder(new StockBuilder().build()).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor differentDescriptor \u003d new UpdateStockDescriptorBuilder()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withName(VALID_NAME_APPLE).withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor copyDescriptor \u003d new UpdateStockDescriptor(descriptor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(copyDescriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(differentDescriptor)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 241
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_DUPLICATE_HEADER_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.DEFAULT_SERIAL_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_SOURCE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.QUANTITY_DESC_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_BANANA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_BANANA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        Stock expectedStock \u003d new StockBuilder().withName(VALID_NAME_BANANA).withSource(VALID_SOURCE_BANANA)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_BANANA).withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(DEFAULT_SERIAL_NUMBER).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, new AddCommand(expectedStock));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // fielder header in different order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA + NAME_DESC_BANANA, new AddCommand(expectedStock));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing source prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + VALID_SOURCE_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + VALID_QUANTITY_BANANA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // missing location prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + VALID_LOCATION_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + VALID_SOURCE_BANANA + VALID_QUANTITY_BANANA"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + VALID_LOCATION_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_multipleCompulsoryFields_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DUPLICATE_HEADER_FIELD, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + NAME_DESC_APPLE + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple source"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + SOURCE_DESC_APPLE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple quantity"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + QUANTITY_DESC_APPLE + LOCATION_DESC_BANANA, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // multiple location"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + LOCATION_DESC_BANANA + LOCATION_DESC_APPLE, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid source"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_SOURCE_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA, Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + INVALID_QUANTITY_DESC + LOCATION_DESC_BANANA, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + SOURCE_DESC_BANANA + QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        + QUANTITY_DESC_BANANA + INVALID_LOCATION_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + SOURCE_DESC_BANANA"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 3,
      "Ashley-Lau": 125,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/StockBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBookParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/logic/parser/UpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INCREMENT_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_INCREMENT_QUANTITY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NEW_QUANTITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_NEW_QUANTITY_DESC2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.INVALID_SOURCE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.NEW_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SERIAL_NUMBER_DESC_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_APPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_APPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import static seedu.stock.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.testutil.UpdateStockDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // no serial number specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_APPLE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // no keyword specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // random user input without keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, \"thisIsRandom\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid keyword without any valid keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, \"x/invalid\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid quantity prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_BANANA + INVALID_QUANTITY_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid new quantity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NEW_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NEW_QUANTITY_DESC2, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid increment quantity"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_INCREMENT_QUANTITY_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                QuantityAdder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid source"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_SOURCE_DESC, Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // invalid field followed by a valid field"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_LOCATION_DESC + SOURCE_DESC_APPLE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_BANANA + INVALID_NEW_QUANTITY_DESC + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + INVALID_INCREMENT_QUANTITY_DESC"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + VALID_SOURCE_APPLE, QuantityAdder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // multiple invalid fields"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseFailure(parser, SERIAL_NUMBER_DESC_APPLE + INVALID_NAME_DESC + INVALID_NEW_QUANTITY_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).withQuantity(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + INCREMENT_QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).withQuantityAdder(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).withSource(VALID_SOURCE_APPLE).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).withLocation(VALID_LOCATION_APPLE).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).withLocation(VALID_LOCATION_APPLE)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withQuantity(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // source"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withLocation(VALID_LOCATION_APPLE)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // new quantity"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + NEW_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantity(VALID_QUANTITY_APPLE)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // increment quantity"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + INCREMENT_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantityAdder(VALID_QUANTITY_APPLE)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_multipleSerialNumbersAllFieldsSpecified_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).withQuantity(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + INCREMENT_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).withQuantityAdder(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_multipleSerialNumbersSomeFieldsSpecified_success() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSource(VALID_SOURCE_APPLE).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                + NAME_DESC_APPLE + NEW_QUANTITY_DESC_APPLE + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withLocation(VALID_LOCATION_APPLE).withQuantity(VALID_QUANTITY_APPLE).build();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public void parse_multipleSerialNumbersOneFieldSpecified_success() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        String userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateStockDescriptor descriptor \u003d new UpdateStockDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // source"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + SOURCE_DESC_APPLE;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withSource(VALID_SOURCE_APPLE)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + LOCATION_DESC_APPLE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withLocation(VALID_LOCATION_APPLE)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // new quantity"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + NEW_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantity(VALID_QUANTITY_APPLE)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        // increment quantity"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        userInput \u003d SERIAL_NUMBER_DESC_APPLE + SERIAL_NUMBER_DESC_BANANA + INCREMENT_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptorBuilder().withQuantityAdder(VALID_QUANTITY_APPLE)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_APPLE, VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(descriptor);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 279
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/StockBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBookTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Location.isValidLocation(\"   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // valid location"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Section A\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Location.isValidLocation("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"Section B; @subsection b.1 in the northwing\")); // long location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 37
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Name.isValidName(\"fruit*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"apple\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"134324\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"fan 1234\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"Apple Banana\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Name.isValidName(\"Apple Banana Orange Citrus fruit\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"fdfs\")); // alphabets only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-199\")); // negative number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // valid quantity"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"0\")); // zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"14\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"2324254\")); // large number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 39
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/SourceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class SourceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Source(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void constructor_invalidSource_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String invalidSource \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Source(invalidSource));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isValidSource() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null source"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Source.isValidSource(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // invalid source"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Source.isValidSource(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(Source.isValidSource(\"  \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // valid source"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Source.isValidSource(\"Kc Company\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Source.isValidSource(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Source.isValidSource("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"kc Company and amy company combine@ptd limited at\")); // long Source"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 37
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/StockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_SOURCE_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.isSameStock(APPLE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.isSameStock(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different serialnumber and source -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withSerialNumber(VALID_SERIAL_NUMBER_BANANA)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withSource(VALID_SOURCE_BANANA).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(BANANA.isSameStock(editedApple));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(BANANA.isSameStock(editedApple));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same name, same serial number, same source, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withLocation(VALID_LOCATION_BANANA).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.isSameStock(editedApple));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock appleCopy \u003d new StockBuilder(APPLE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different serial number -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withSerialNumber(VALID_SERIAL_NUMBER_BANANA).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withSource(VALID_SOURCE_BANANA).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        editedApple \u003d new StockBuilder(APPLE).withLocation(VALID_LOCATION_BANANA).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 78,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/UniqueStockListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static seedu.stock.testutil.TypicalStocks.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.DuplicateStockException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.exceptions.StockNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class UniqueStockListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final UniqueStockList uniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_stockNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(uniqueStockList.contains(APPLE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_stockInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(uniqueStockList.contains(APPLE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void contains_stockWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withLocation(VALID_LOCATION_BANANA)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(uniqueStockList.contains(editedApple));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void add_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void add_duplicateStock_throwsDuplicateStockException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(DuplicateStockException.class, () -\u003e uniqueStockList.add(APPLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_nullTargetStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStock(null, APPLE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_nullEditedStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStock(APPLE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_targetStockNotInList_throwsStockNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(StockNotFoundException.class, () -\u003e uniqueStockList.setStock(APPLE, APPLE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockIsSameStock_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStock(APPLE, APPLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stock editedApple \u003d new StockBuilder(APPLE).withLocation(VALID_LOCATION_BANANA)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withQuantity(VALID_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStock(APPLE, editedApple);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(editedApple);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStock(APPLE, BANANA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStock_editedStockHasNonUniqueIdentity_throwsDuplicateStockException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(DuplicateStockException.class, () -\u003e uniqueStockList.setStock(APPLE, BANANA));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove_nullStock_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove_stockDoesNotExist_throwsStockNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(StockNotFoundException.class, () -\u003e uniqueStockList.remove(APPLE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void remove_existingStock_removesStock() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.remove(APPLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_nullUniqueStockList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStocks((UniqueStockList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_uniqueStockList_replacesOwnListWithProvidedUniqueStockList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStocks(expectedUniqueStockList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStockList.setStocks((List\u003cStock\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.add(APPLE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cStock\u003e stockList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        uniqueStockList.setStocks(stockList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        UniqueStockList expectedUniqueStockList \u003d new UniqueStockList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        expectedUniqueStockList.add(BANANA);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(expectedUniqueStockList, uniqueStockList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setStocks_listWithDuplicateStocks_throwsDuplicateStockException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        List\u003cStock\u003e listWithDuplicateStocks \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(DuplicateStockException.class, () -\u003e uniqueStockList.setStocks(listWithDuplicateStocks));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                ) -\u003e uniqueStockList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 172
    }
  },
  {
    "path": "src/test/java/seedu/stock/model/stock/predicates/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.model.stock.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.testutil.StockBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Banana\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Banana Bun\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Banana\", \"Bun\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Banana Bun\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Banana\", \"Juice\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Banana Bun\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"bAnAna\", \"buN\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(predicate.test(new StockBuilder().withName(\"Banana Bun\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Banana\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apple\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Banana Bun\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        // Keywords match serial number, source, quantity and location but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Arrays.asList(\"12345\", \"Section B\", \"Fairprice\", \"Fairprice1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertFalse(predicate.test(new StockBuilder().withName(\"Banana\").withSerialNumber(\"Fairprice1\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                .withSource(\"Fairprice\").withQuantity(\"12345\").withLocation(\"Section B\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 20,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonAdaptedStockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonAdaptedStockTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonSerializableStockBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonSerializableStockBookTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonStockBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class JsonStockBookStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/StockBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A utility class to help with building Stock objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class StockBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Banana Bun\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_SERIALNUMBER \u003d \"Fairprice1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_SOURCE \u003d \"Fairprice\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"1000\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Fruits section, Subsection B\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Source source;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates a {@code StockBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        serialNumber \u003d new SerialNumber(DEFAULT_SERIALNUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        source \u003d new Source(DEFAULT_SOURCE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Initializes the StockBuilder with the data of {@code stockToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder(Stock stockToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        name \u003d stockToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        serialNumber \u003d stockToCopy.getSerialNumber();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        source \u003d stockToCopy.getSource();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        quantity \u003d stockToCopy.getQuantity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        location \u003d stockToCopy.getLocation();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Name} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Source} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withSource(String source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.source \u003d new Source(source);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets the {@code Location} of the {@code Stock} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public StockBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Stock build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new Stock(name, serialNumber, source, quantity, location);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 93
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStockList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStockList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Stock getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return model.getFilteredStockList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/TypicalStocks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.SerialNumberSetsBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.StockBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.AccumulatedQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumberSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A utility class containing a list of {@code Stock} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class TypicalStocks {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static final Stock APPLE \u003d new StockBuilder().withName(\"Apple Juice\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .withSerialNumber(\"Ntuc1\").withSource(\"Ntuc\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .withQuantity(\"2000\").withLocation(\"Fruit Section, Subsection C\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static final Stock BANANA \u003d new StockBuilder().withName(\"Banana Cake\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .withSerialNumber(\"Fairprice1\").withSource(\"Fairprice\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            .withQuantity(\"2103\").withLocation(\"Fruits section, Subsection B\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private TypicalStocks() {} // prevents instantiation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns an {@code StockBook} with all the typical stocks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static StockBook getTypicalStockBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        StockBook inventory \u003d new StockBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock stock : getTypicalStocks()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            inventory.addStock(stock);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static List\u003cStock\u003e getTypicalStocks() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public static SerialNumberSetsBook getTypicalStocksSerialNumbers() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        SerialNumberSetsBook serialNumbers \u003d new SerialNumberSetsBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumberSet\u003e serialNumberSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (Stock stock: getTypicalStocks()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            serialNumberSets.add(new SerialNumberSet(stock.getSource(), new AccumulatedQuantity(\"1\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        serialNumbers.setSerialNumberSets(serialNumberSets);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return serialNumbers;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 37,
      "Ashley-Lau": 16
    }
  },
  {
    "path": "src/test/java/seedu/stock/testutil/UpdateStockDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "package seedu.stock.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.logic.commands.UpdateCommand.UpdateStockDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.QuantityAdder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.SerialNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "import seedu.stock.model.stock.Stock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "public class UpdateStockDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    private UpdateStockDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder(UpdateStockDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        this.descriptor \u003d new UpdateStockDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Returns an {@code UpdateStockDescriptorBuilder} with fields containing {@code stock}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder(Stock stock) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor \u003d new UpdateStockDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumber\u003e currentSerialNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        currentSerialNumber.add(stock.getSerialNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setName(stock.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSerialNumbers(currentSerialNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setQuantity(stock.getQuantity());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setLocation(stock.getLocation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSource(stock.getSource());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Name} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withSerialNumber(String... serialNumber) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        List\u003cSerialNumber\u003e currentSerialNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        for (String serial : serialNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "            currentSerialNumber.add(new SerialNumber(serial));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSerialNumbers(currentSerialNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Quantity} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code QuantityAdder} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @param quantityToBeAdded The quantity to be added into a quantity object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return A new {@code UpdateStockDescriptor} with the {@code QuantityAdder}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withQuantityAdder(String quantityToBeAdded) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setQuantityAdder(new QuantityAdder(quantityToBeAdded));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Location} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Sets the {@code Source} of the {@code UpdateStockDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptorBuilder withSource(String source) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        descriptor.setSource(new Source(source));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * Builds the update stock descriptor required."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     * @return The update stock descriptor required."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    public UpdateStockDescriptor build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AudreyFelicio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AudreyFelicio": 105
    }
  },
  {
    "path": "src/test/java/seedu/stock/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/stock/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package seedu.stock.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import seedu.location.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cfx:root type\u003d\"seedu.location.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 5
    }
  }
]
