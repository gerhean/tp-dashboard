[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### Cap 5.0 Buddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-3/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "- Cap 5.0 Buddy is a project developed for a software engineering module (CS2103T) at the National University of Singapore."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - Cap 5.0 Buddy is a desktop application that helps NUS SoC students to keep track of their module details efficiently, optimized for use via a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - It helps them centralize key module details and follows their study"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    progress by allowing efficient management of module details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - Cap 5.0 is morphed from the AddressBook-Level3 project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "- For detailed documentation of this project, see the [Cap 5.0 Buddy Website](https://ay2021s1-cs2103t-f12-3.github.io/tp/)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "For more details on the project team members, head over to [AboutUs](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/docs/AboutUs.md)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "-------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "For more information on how to use Cap 5.0 Buddy, head over to [User Guide](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/docs/UserGuide.md)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Developer Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "For more information on how to develop Cap 5.0 Buddy, head over to [Developer Guide](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/docs/DeveloperGuideCAP5.md)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "-------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "jonasngs": 30,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    archiveName \u003d \u0027cap5buddy.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "jonasngs": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "You can reach us at the following emails:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Jonas Ng: `e0415645@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Li HuanKang:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* David Cai:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Joshua Wong:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Michael:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Cap 5.0 Buddy Team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### Jonas Ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003cimg src\u003d\"images/jonasngs.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[[github](https://github.com/jonasngs)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[[portfolio](team/jonasng.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Role: Team lead, Integration"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Li Huankang (Matthias)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cimg src\u003d\"images/matthiaslhk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[[github](http://github.com/MatthiasLHK)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[[portfolio](team/matthiaslhk.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Role: Team Lead , Scheduling and tracking"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Responsibilities: Responsible for overall project coordination and in charge of defining, assigning, and tracking project tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### Michael Setia Atmaja"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003cimg src\u003d\"images/michael-setia.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "[[github](http://github.com/michael-setia)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "[[portfolio](team/michael-setia.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "### David Cai Qifan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "\u003cimg src\u003d\"images/davidcaiqifan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "[[github](http://github.com/davidcaiqifan)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "[[portfolio](team/davidcaiqifan.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "### Joshua Wong"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "\u003cimg src\u003d\"images/murtubak.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "[[github](http://github.com/murtubak)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "[[portfolio](team/joshuawong.md)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Responsibilities: Code quality"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 4,
      "MatthiasLHK": 6,
      "murtubak": 5,
      "-": 33,
      "jonasngs": 13,
      "davidcaiqifan": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "CAP5Buddy helps NUS SoC students to keep track of their module details efficiently. It helps them centralize key "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "module details and follows their study progress through a Command Line Interface (CLI) that allows efficient management "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "of module details. CAP5Buddy also functions as a scheduling system, todo list and contact list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "![Structure of the Overall Product](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "### Overall components"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "This is the overall design of our product. As we are using **GUI to help to display the information** and mainly focuses on"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "using **CLI to take in the required commands**, thus the product consists of **6 main major components**. The product starts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "from the Launcher classes, that initiates based on our pre-set settings and then activates the MainApp class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "the will run the GUI with these settings. MainApp will also start the _brain_ and -muscles_ of the program, which are the Logic, Storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Model and Ui components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The role of the **Logic** component is to act as the _brain_ of the program, where all the parsing of information will be done, and the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "execution of the commands will be carried out."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The role of the **Storage** component is to represent the _memory_ of the program, where the storing and tracking of the different items happens."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "These items are saving locally in a json file, which can be imported and exported easily."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The role of the **Model** component is to represent all the items and their behaviours. Contains all the item classes and their support classes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The role of the **Ui** component is to handle all the User interface related instructions, which includes the loading of GUI components, the updating"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "of these components and displaying the changes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Module Tracker"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "![Structure of the UserInterface Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The job of the UI component is to be the _face_ of the product, which the user directly interacts with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "It is in charge of containing the logic that **breaks down and executes the user input**, and displaying the **GUI** of the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "product."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "It composes of a few main classes, that serves as the focal point of this component. Such classes are **UiPart**,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MainWindow**, **UiManager** and the respective panel displays, **(XYZListPanel)**. The rest of the classes are supporting"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "classes to help make the GUI."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The MainWindow is what the user actually sees, which has a **CommandBox**, **XYZListPanel**, **ResultDisplay** and **StatusBar**. These"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "components are stacking on top of one another using **stackPane** to ensure a smooth looking GUI. The order of the components"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "are as follows, **CommandBox**, **ResultDisplay**, **XYZListPanel** and **StatusBar**."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The **CommandBox** is just a textField component where the user can enter the commands. Upon pressing *Enter*, extracting of the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "text occurs and is sent to the logic to be parsed and executed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Next, after the executing is completed, a **CommandResult** object returns and is then passed to the **ResultDisplay** for the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "relevant information to be shown in this component. This is being displayed in a TextArea component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Lastly, the **XYZListPanel** is in charge of displaying all the modules, contacts, etc that is the product is tracking."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Each of these items are being displayed in a *cell* under their respective **XYZCard**, which will be displayed in the *ListCell*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "of the **XYZListPanel**."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "![LogicClassDiagram](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**API** : `Logic.java`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "1. Logic uses the `ParserManager` class to create the respective Parser classes: `ModuleListParser`, `ContactListParser`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " and `TodoListParser`. Depending on the user command, the user command will be parsed by the relevant Parser class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "2. This results in a `Command` object which is executed by `LogicManager`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. The command execution can affect the Model (e.g. adding a module)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "5. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "help to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "![Structure of the Storage Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* stores the data for these 3 types of list:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * module tracker"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * contact list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * todo list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cT\u003e` for all types of list as mentioned above which can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* does not depend on any of the other three components"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "The `Storage` component facilitates the storage of CAP5BUDDY data in the hard drive. When the program attempts to save"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "data, the `Storage` component converts java data objects such as `ModuleList` and `ContactList` into a json format to store"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "at a specified file location. When the program is started, it will attempt to read existing user data and the `Storage`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "component will be converting data in json format into java objects."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* can save the module list data in json format and read it back."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* can save the contact list data in json format and read it back."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* can save the todo list data in json format and read it back."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**API** : "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": "## Module List"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "murtubak"
        },
        "content": "![Structure of the Module List Component](images/ModuleListDiagram.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Module package** : [`seedu.address.model.module`](https://github.com/AY2021S1-CS2103T-F12-3/tp/tree/master/src/main/java/seedu/address/model/module)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Module is a container class that stores :"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Name of a module"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Zoom link of a module"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * GradeTracker of a module"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* GradeTracker is a container class that stores:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Grade for a module"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Assignments for a module"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "murtubak"
        },
        "content": "#### ModuleList class"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**ModuleList class** : [`ModuleList.java`](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/src/main/java/seedu/address/model/ModuleList.java)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Wraps all data i.e. Modules at the module list level"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Stores Modules in memory"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Stores a UniqueModuleList"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Duplicate Modules are not allowed"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## CAP Calculator"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Scheduler"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Contact List"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "murtubak"
        },
        "content": "![Structure of the Contact List Component](images/ContactListDiagram.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "murtubak"
        },
        "content": "#### Contact class"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Contact package** : [`seedu.address.model.contact`](https://github.com/AY2021S1-CS2103T-F12-3/tp/tree/master/src/main/java/seedu/address/model/contact)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Contact is a container class that stores :"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Name of a contact"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Email of a contact"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Telegram of a contact"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "murtubak"
        },
        "content": "#### ContactList class"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**ContactList class** : [`ContactList.java`](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/src/main/java/seedu/address/model/ContactList.java)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Wraps all data i.e. Contacts at the contact list level"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Stores Contacts in memory"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Stores a UniqueContactList"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Duplicate Contacts are not allowed"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Todo List"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "![Structure of the Todo List Component](images/TodoList/TodoListClassDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Task class"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Task package** : [`seedu.address.model.task`](https://github.com/AY2021S1-CS2103T-F12-3/tp/tree/master/src/main/java/seedu/address/model/task)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Task is a container class that stores :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Name of a task"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Tags of a task"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Priority of a task"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Date or deadline of a task"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Status of a task\u003cbr/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Only name is compulsory when creating a new Task."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### TodoList class"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**TodoList class** : [`TodoList.java`](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/src/main/java/seedu/address/model/TodoList.java)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Wraps all data i.e. Tasks at the Todo List level"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Stores Tasks in memory"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Stores a UniqueTodoList"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Duplicate Task objects are now allowed"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "TodoList will be explained more comprehensively in the [TodoList feature](#todolist-feature) Section"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### \\[Proposed\\] Add Event feature"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "![Structure of the Add Event command](images/AddEventSequenceDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The idea of this feature is to be able to allow the user to keep track of his/her current events that"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "will be happening. Events can be either a one time event like an exam for a particular module, or a recurring"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event like a weekly tutorial class."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "How we are currently implementing this feature is by following the same implementation as the AB3. We have an event"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "object under the Model package. Two classes called EventName and EventTime act as information containers to store"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "the respective data and help support the Event class."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "We also make sure in the Logic package, there are personal sub-parsers for each of the existing Event"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "related commands, and an overall Parser known as SchedulerParser that is in charge of managing all of the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "sub-parsers of the Scheduler. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Each of the commands of the Scheduler will always return a CommandResult class, that is basically an information"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "container that stores all the relevant data of the results. This CommandResult object is then passes back up to the"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "UiManager, where it is then passed to the GUI components for it to be displayed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "##### Aspect: Whether to create a new Parser for Scheduler."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Option 1 **(Current implementation)**: A custom Parser in charge of all **Scheduler** related commands **only**."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Pros: "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- More OOP orientated."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- More defensive programming."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- More Parsers to handle by the ParserManager"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Option 2: Place the Scheduler related parser together with the rest of the other parsers for other features, like module list, etc."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- Faster to implement."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- Less effort needed, simply add on to the existing Parser."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- Mess and less readible, hard to distinguish between differnt commands."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- Higher chance of errors, as we are mixing all the different parsers for every feature into a single Parser."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "- LONG methods."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### 1.1 Contact List Management"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "As a module tracking system, Cap 5 Buddy allows users to manage a list of module-related contacts with ease."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "The section below provides details of the implementation of each Contact List function and design considerations"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "of the contact list feature."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "#### 1.1.1 Contact List Commands"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Below is a list of all `Contact` related features:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "1. Add a contact: Adds a new contact into the contact list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "2. Delete a contact: Deletes a pre-existing contact from the contact list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. Edit a contact: Edits a pre-existing contact in the contact list"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "4. View all contacts: Lists out all contacts in the contact list"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Given below is the class diagram of the `Contact` class:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "![ContactClassDiagram](images/Contact/ContactClassDiagram.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Figure ?.? Class Diagram for Contact class"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "#### 1.1.2 Details of implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Given below is an example usage scenario and how the mechanism for adding contact behaves at each step:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "1. `LogicManager` receives the user input `addcontact n/John e/john@gmail.com te/@johndoe` from `Ui`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "2. `LogicManager` calls `ContactListParser#parseCommand()` to create `AddContactParser`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. `ContactListParser` will call the respective `AddContactParser#parse()` method to parse the command arguments"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "4. This creates a `AddContactCommand` and `AddContactCommand#execute` will be invoked by `LogicManager`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "5. The `Model#addContact()` operation exposed in the `Model` interface is used to add the new contact"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "6. A `CommandResult` from the command execution is returned to `LogicManager`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Given below is the sequence diagram of how the operation to add a contact works:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "![AddContactSequenceDiagram](images/Contact/AddContactSequenceDiagram.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Figure ?.? Sequence diagram for the execution of `AddContactCommand`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "The section below describes the implementation details of each Contact List feature."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "####Add Contact Feature"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This feature creates and adds a new `Contact` using the contact details provided by users"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* `ContactListParser` invokes `AddContactParser#parse()` to parse and validate the command arguments"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* `AddContactCommand#execute()` will be called to add the new `Contact` if the contact does not already exist"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* The mechanism to add a contact is facilitated by `Contactlist` which implements `ContactList#addContact()`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This operation is exposed in the `Model` interface as `Model#addContact()`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `AddContactCommand`:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "![AddContactCommandActivityDiagram](images/Contact/AddContactCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Figure ?.? Activity diagram representing the execution of `AddContactCommand`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "#### Delete Contact Feature"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This feature deletes a pre-existing `Contact` using the contact ID provided by users"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* `ContactListParser` invokes `DeleteContactParser#parse()` to parse and validate the contact ID"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* `DeleteContactCommand#execute()` will be called to delete the `Contact`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* The mechanism to delete a contact is facilitated by `ContactList` which implements `ContactList#removeContact()`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This operation is exposed in the `Model` interface as `Model#deleteContact()`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "#### Edit Contact Feature"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This feature edits a pre-existing `Contact` using the contact details provided by users."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* `ContactListParser` invokes `EditContactParser#parse()` to parse and validate the contact ID and command arguments"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* `EditContactCommand#execute()` will be called to create the edited `Contact` and replace the old contact with the edited contact,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   if the edited contact does not already exist"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* The mechanism to edit a contact is facilitated by `ContactList` which implements `ContactList#setContact()`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This operation is exposed in the `Model` interface as `Model#setContact()`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "#### View Contact Feature"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### 1.1.2 Design Considerations \u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "##### Aspect: Data structure to support Contact related functions"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Alternative 1: Use a `HashMap` to store contacts"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * Pros: Will be more efficient to retrieve contacts from a HashMap."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * Cons: Requires additional memory to support the HashMap. This would worsen as the number of contacts stored increases."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Alternative 2: Use an `ArrayList` to store contacts"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "### \\[Proposed\\] Calculate CAP feature"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "The proposed calculate CAP function is facilitated by `CalculateCapCommand`. It extends Command with a counter for total"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "grade points and modular credits, both stored internally `gradePoints` and `modularCredits` respectively. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* `CalculateCapCommand#accumulate(ModuleList)` - Loops through a given `ModuleList` and updates the grade points and"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "modular credits count accordingly."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* `CalculateCapCommand#calculateCap()` - Calculates CAP based the grade points and modular credits counter."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "The following sequence diagram shows how the calculate cap operation works:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "![CalculateCapSequenceDiagram](images/CalculateCapSequenceDiagram.png)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `CalculateCapCommand`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "##### Aspect: Information used to calculate cap"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Alternative 1 (current choice): Calculates based on academic information on mods tagged as completed."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Pros : Easy to implement"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Cons : User has to manually input every module taken"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Alternative 2 : Prompts user for academic information used for last calculated cap and stores it."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Pros : "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * User does not need to input unnecessary modules."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Will use less memory.(e.g Modules that the user is not currently taking does not need to be added by user). "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Cons : Will require additional storage."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### TodoList feature"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The TodoList feature has two main component :"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* **Containee component** (Task-related classes)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * `Class Task` - container class to store information about a task"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * `Class TaskName` - wrapper class to store the name of a task"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * `Class Date` - wrapper class to store the date/deadline of a task"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * `Enum Priority` - enum class to represent priority of a task"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * `Enum Status` - enum class to represent the progress status of a task"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* **Container component** (List-like classes)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Class `UniqueTodoList` - container class for storing tasks"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Class `TodoList` - wrapper class for UniqueTodoList"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Interface `ReadOnlyTodoList` - interface for displaying the list on the GUI"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "##### Containee Component"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The Task class mainly functions as a class to store all the informations related to a task i.e. name, tag, priority,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "date, and status. It does not have any subclasses."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The Task class supports the following operations :"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Setters for all the field"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Getters for all the field"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Task#isSameTask()` - checks if two tasks are the same i.e. have the same name "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "(weaker than Task#equals() which requires all the fields to be the same)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Task#hasSameTag()` - checks if the task has the specified tag"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Task#hasSamePriority()` - checks if the task has the specified priority"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Task#hasSameDate()` - checks if the task has the specified date"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "##### Container Component"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The TodoList class is facilitated by UniqueTodoList. The UniqueTodoList is stored internally inside"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "the TodoList class which act like a wrapper class. "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The TodoList class supports the following operations :"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `TodoList#resetData()` - replaces all data in TodoList with new data."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `TodoList#hasTask()` - checks if the specified task exist in the list."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `TodoList#addTask()` - adds a task to the list."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `TodoList#setTask()` - replaces a task with the specified task."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `TodoList#removeTask()` - removes the specified task from the list."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "The operations above are exposed in the Model interface as :"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Model#hasTask()`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Model#addTask()`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Model#setTask()`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `Model#deleteTask()`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "TodoList implements ReadOnlyTodoList which require the following operation :"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `ReadOnlyTodoList#getTodoList()` - returns an ObservableList with type Task that is immutable, and we cannot"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  modify the elements."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Design Consideration"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "##### Aspect: Task type"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Alternative 1 (current): \u003cbr/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use one concrete class i.e. Task without inheritance involved. The type of the task"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  is represented by the Tag field instead."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Pros :"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Easier to implement"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Types are not pre-defined i.e. can simply add a different tag to represent different type of task"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Cons :"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * All type of task have the same pre-defined field"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Alternative 2 : \u003cbr/\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use one abstract class i.e. Task with inheritance. Each subclasses represent a type of a Task."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Pros :"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Difference between type are clear and standardized"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Can be considered more OOP"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Cons :"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * Types must be pre-defined i.e. cannot add new type of classes without adding codes"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Alternative 1 is chosen since we prioritize user freedom to create custom type for the task."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "murtubak"
        },
        "content": "### \\[Proposed\\] GradeTracker feature"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "murtubak"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "murtubak"
        },
        "content": "The proposed grade tracker feature is an association class used to store additional information for the module. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "murtubak"
        },
        "content": "The `Assignments` each store their own `assignment name`, `percentage of final grade` and `result`. "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "murtubak"
        },
        "content": "![Structure of the Module List Component](images/GradeTrackerDiagram.png)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "murtubak"
        },
        "content": "When an `assignment` is added, it follows the sequence diagram as shown below. The sequence flows similarly "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "murtubak"
        },
        "content": "to the rest of the project as the command is parsed and then executed."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "murtubak"
        },
        "content": "![Sequence Diagram of the Add Assignment Command](images/AddAssignmentSequenceDiagram.png)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "murtubak"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "murtubak"
        },
        "content": "##### Aspect: Format to store the grade for a module"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Alternative 1 : Grade stores CAP."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Pros : Easier to integrate with Cap Calculator"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Cons : User has to manually input CAP and does not know the average from the assignments accumulated"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Alternative 2 (current choice): Grade stores the raw score calculated from assignment"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Pros : Grade can be automatically calculated from the assignment overall percentage for user to view"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Cons : Requires separate CAP to be stored for Cap Calculator to access"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* has a need to manage a number of classes"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Users can keep track of all module details efficiently."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Centralize key module details."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Keep track of study progress effectively."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Everything can be done in a single app."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ------------------------------------------------------ |"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App |"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* * *`  | user                                       | add a new module               | keep track of the module information easily            |"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* * *`  | user                                       | delete a module                | remove modules that are completed                      |"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* *`    | user                                       | find a module by name          | locate details of a module without having to go through the entire list |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* *`    | user                                       | add a zoom link to a module    | keep track and retrieve it easily                      |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "| `* *`    | user                                       | calculate my cumulative average point   | plan my academic progress for the future      |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "murtubak"
        },
        "content": "| `* *`    | user                                       | add graded assignments       | add the information of the assignments that contributed to my grade      |"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "murtubak"
        },
        "content": "| `* *`    | user                                       | edit my graded assignments     | update the information of the assignments I have completed     |"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "murtubak"
        },
        "content": "| `* *`    | user                                       | delete graded assignments      | remove the assignments that are do not contribute to my grade anymore|"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `*`      | user who is overloading                    | sort modules by name           | locate a module easily                                 |"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* * *`  | user                                       | add a task                     | keep track of the tasks that I must complete           |"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* * *`  | user                                       | delete a task                  | remove a task that has been done                       |"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* * *`  | user                                       | edit a task                    | make necessary changes to a task                       |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* *`    | user                                       | label a task as completed      |                                                        |"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* *`    | user                                       | find a task                    | find a task easily without looking at the entire list  |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* *`    | user                                       | sort tasks based on criteria   | easily manage the tasks by order                       |"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `* *`    | user                                       | filter tasks based on criteria | easily manage the tasks by group                       |"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `*`      | user                                       | reset the status of a task     | change a task from labeled as completed to not completed |"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "| `*`      | user                                       | archive a task                 | hide irrelevant tasks that might still be useful for future purposes |               "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "(For all use cases below, the **System** is the `CAP5BUDDY` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Use case: Add a new Module**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User wants to add a new module to track."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "2. User enters the command for adding a module: `add [module name/code]`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. CAP5BUDDY adds the module into storage and display the success message."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Delete a module**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User requests to show all the existing modules."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. CAP5BUDDY displays a list of the modules."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. User wants to delete a specific module from the list."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "4. User enters the command for module deletion: `delete [module name/code]`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. CAP5BUDDY deletes that module from the list."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case ends here."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 3a. The given index is invalid or does not exist."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Edit a module**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User requests to show all the existing modules."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. CAP5BUDDY displays all the modules in a list."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. User wants to edit a specific module from the list."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. User enters the new information for that module."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5. CAP5BUDDY overwrites the existing information of that module."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case ends here."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 3a. The given index is invalid or does not exist."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 4a. The new information is empty"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 4a1. CAP5BUDDY display an error message."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: View a module**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User requests to view the list of modules."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. CAP5BUDDY displays all the modules in a list."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. User requests to view the information of a specific module from the list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. CAP5BUDDY displays all information related to the specified module."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case ends here."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 3a. The given index is invalid or null."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Use case: Input module Cumulative Average Point(CAP) details**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. User requests to input CAP details(Grade point and Credit) for a module."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "2. CAP5BUDDY saves CAP details under the specified module."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* 2a. Input contains invalid CAP details."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a2. User enters the correct data."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Use case resumes at step 1."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Use case: Calculate Cumulative Average Point(CAP)**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. User requests to calculate CAP"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "2. CAP5BUDDY calculates and displays CAP to user."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* 2a. One or more modules do not contain details of grade point or credits."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a2. User enters required data."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Steps 2a1-2a2 are repeated until the data requirements are fulfilled.\u003cbr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* 3a. One or more modules contain invalid details of grade point or credits."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 3a2. User enters valid data."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Steps 2a1-2a2 are repeated until the data requirements are fulfilled.\u003cbr\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Add a task to todo list**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to add a task to the todo list."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses the type of task to be added."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. User enters the information regarding the task."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. CAP5BUDDY saves the given task in the todo list."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 3a. Format for information about the task is invalid."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message and ask the user to use the correct format."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a2. User enters the information with the correct format."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case resumes at step 4"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Delete a task in the todo list**"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to delete a task in the todo list."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses the task to be deleted."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. CAP5BUDDY shows a prompt message asking if the user really wants to delete the task."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. User clicks the \"YES\" button."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "5. CAP5BUDDY deletes the task from the todo list."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 4a. User accidentally clicked the \"NO\" button."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 4a1. The prompt message disappears and CAP5BUDDY does not delete the task."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Sort task in the todo list**"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to sort the tasks in the todo list."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses the basis for sorting the tasks."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. CAP5BUDDY displays the sorted tasks based on the chosen basis."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Find a task in the todo list**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to find a task in the todo list."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses whether to find task based on date or keyword."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. User enters the date or keyword."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. CAP5BUDDY displays all task based on the user input from step 3."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 3a. User inputs the date with an incorrect format."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message and ask the user to use the correct format."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a2. User enters the date with the correct format."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case resumes at step 4"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Archive a task in the todo list**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to archive a task in the todo list."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. CAP5BUDDY shows a prompt message asking if the user is sure to archive the task."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. User clicks the \"YES\" button."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. CAP5BUDDY archives the task."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 3a. User accidentally clicked the \"NO\" button."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a1. The prompt message disappears and CAP5BUDDY does not archive the task."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Use Case: View all contact details of a lecturer**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   1. User requests to view all contact details of a lecturer."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   2. User provides the name of the lecturer."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   3. CAP5BUDDY searches for the specified lecturer from storage."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   4. CAP5BUDDY retrieves all contact details of the lecturer from storage."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   5. CAP5BUDDY displays the desired contact details."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   * 3a. The specified lecturer name does not exist."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Use Case: View the email of a Lecturer**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  1. User requests to view the email of a lecturer."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  2. User provides the name of the lecturer."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  3. CAP5BUDDY searches for the specified lecturer from storage."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY retrieves the email of the lecturer from storage."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY displays the desired email address."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * 3a. The specified lecturer name does not exist."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Use Case: View the hand phone contact of a peer**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  1. User requests to view the hand phone number of a peer."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  2. User provides the name of the peer."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  3. CAP5BUDDY searches for the specified peer from storage."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY retrieves the hand phone contact of the peer from storage."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY displays the desired hand phone contact."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* 3a. The specified peer name does not exist."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* 4a. The specified peer does not have a hand phone contact saved."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Use Case: Edit the email of a TA**"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  1. User requests to edit the email of a TA."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  2. User provides the name of the TA."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  3. CAP5BUDDY searches for the specified TA from storage."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. User provides the new email to replace the existing email."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  5. CAP5BUDDY replaces the email of the TA with the user provided email."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  6. CAP5BUDDY displays the success message."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * 3a. The specified TA name does not exist."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * 4a. The provided email address is empty or null."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    *{More to be added}*"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use Case: Add assignment to CAP5BUDDY**"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   1. User requests to add an assignment to a module in CAP5BUDDY."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   2. CAP5BUDDY retrieves module from module list."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   3. CAP5BUDDY creates and adds assignment to the gradetracker in the module retrieved."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   4. CAP5BUDDY updates module in module list."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   5. CAP5BUDDY displays success message."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * 2a. The module to add to is invalid."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * 3a. The given grade is invalid."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use Case: View grades for a module**"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  1. User requests to view grades for a module."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  2. CAP5BUDDY retrieves current grades."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  3. CAP5BUDDY displays current grades."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 3a. The current list of grades is empty."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use Case: Edit assignment in CAP5BUDDY**"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  1. User requests to edit an assignment in a module in CAP5BUDDY."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  2. CAP5BUDDY retrieves the module."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  3. CAP5BUDDY retrieves the assignment requested from the grade tracker in the module."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  4. User requests to edit the assignment retrieved."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  5. CAP5BUDDY edits the assignment."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  6. CAP5BUDDY saves the edited assignment in the module."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  7. CAP5BUDDY displays success message."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 2a. The given module is invalid."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 3a. The given assignment is invalid."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use case: Delete an assignment**"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   **MSS**"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   1. User requests to delete an assignment in a module in CAP5BUDDY."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   2. CAP5BUDDY retrieves the module."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   3. CAP5BUDDY retrieves the assignment requested from the grade tracker in the module."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   4. CAP5BUDDY deletes the assignment."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   5. CAP5BUDDY updates the grade tracker in the module."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   4. CAP5BUDDY displays success message."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   **Extensions**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   * 3a. The provided assignment is invalid."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   *{More to be added}*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Add an event**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User request to create and add a new event into the tracker."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY creates and add the event into the list."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 1a. The provide event information is invalid, missing date and time."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "       * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          Use case resumes at step 1."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Edit an event**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to view all existing events."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays the list of all events."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to modify an existing event."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY displays the newly modified event."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The newly inputted information is invalid format or empty."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3b. The requested event does not exist."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Delete an event**"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to view all existing events in the list."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays all the events."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to remove a specific event from the list."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY shows a success message and shows the new list."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The event to be removed does not exist."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Mark an event as completed**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to show all events."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays all tracked events."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to mark a specific event as completed."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY shows the event as completed."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The event requested does not exist."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY shows an error message."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3b. The event requested is already marked as completed/"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY does nothing."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Push the event back**"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to show all events."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays all currently tracked events."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to push the event back."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY shows the new date and time of the event."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The requested event does not exist."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY shows an error message."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3b. The new date and time is invalid."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY shows an error message."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3.  A user with not be able to access and modify other users\u0027 data files."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4.  Should be usable by any novice that has never used this program before."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5.  The name of the modules should not exceed 40 characters."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "6.  Should not contain more than 100 modules at 1 time."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Module List**: A list of all modules currently being tracked and stored in the CAP5BUDDY."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 225,
      "MatthiasLHK": 254,
      "murtubak": 137,
      "-": 206,
      "jonasngs": 154,
      "davidcaiqifan": 94
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Setting up the program in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. Ensure that you have Java JDK 11 installed on your OS."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. Download the JAR file of the program [_here_](https://github.com/AY2021S1-CS2103T-F12-3)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. Save the file into a folder name **CAP5.0Buddy** in any directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. Run the JAR file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    a. Double click on the JAR file to execute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    b. Open up Command Prompt in OS, navigate to directory of the JAR file and return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    java -jar *JARfile_name*.jar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5. Refer to our [_User Guide_](UserGuide.md) to start using the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Error fixing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "If you face any issues starting to launch the JAR file, pls refer to the FAQ below."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. Unable to run the file due to missing java in OS."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "##example\u003e java -jar cap5.jar"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u0027java\u0027 is not recognized as an internal or external command,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "operable program or batch file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Solution:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Install java JDK on your OS, which can be found [_here_](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. Unable to run JAR file due to the JAR being compiled in a higher version."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Error: A JNI error has occurred, please check your installation and try again"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Exception in thread \"main\" java.lang.UnsupportedClassVersionError: mattbot/Launcher has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.defineClass1(Native Method)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.defineClass(ClassLoader.java:756)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader.access$100(URLClassLoader.java:74)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader$1.run(URLClassLoader.java:369)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader$1.run(URLClassLoader.java:363)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.security.AccessController.doPrivileged(Native Method)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader.findClass(URLClassLoader.java:362)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:601)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Solution:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Make sure that you have Java JDK 11 installed on your computer. If not, you can uninstall your current java and reinstall from the above link, or [_here_](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 49,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Cap 5.0 Buddy helps NUS SoC students to keep track of their module details efficiently. It helps them centralize key module details and follows their study progress through a Command Line Interface (CLI) that allows efficient management of module details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. Download the latest `cap5buddy.jar` from [here](https://github.com/AY2021S1-CS2103T-F12-3/tp/releases)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ Cap 5 Buddy application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   ![Ui](images/OriginalImages/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### Module Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Adding a new module: `add module`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Creates and add a new module to be stored in the system."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Format: `add module` **_`[MODULE_NAME]`_** **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   * Leaving the **_ZOOM_LINK_** part empty will create a empty module."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   Examples:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   * `add module CS2103T https:\\\\link` creates and add the module called CS2103T"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   with the specified link into the system."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   * `add module CS2103T` creates and add the module CS2103T with no zoom link."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Viewing a module: `viewmodule`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Views a module stored in the system"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " Format: `viewmodule` **_`n/[MODULE_NAME]`_**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Views information for a module named **_`[MODULE_NAME]`_**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "   * `viewmodule n/cs2103t` views the specified module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Adding a zoom link to a module: `add zoom`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Adds a zoom link to an existing module."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Format: `add zoom` **_`[MODULE_NAME]`_** **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * Adds a zoom link [ZOOM_LINK] to a module named **_`[MODULE_NAME]`_**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Example of usage:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  `add zoom cs2103T https://sample.zoom.us` adds a zoom link `https://sample.zoom.us` to the module named `cs2103T`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "#### Deleting a module: `deletemodule`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Deletes the module at the specified position in the module list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": " Format: `delete` **_`[MODULE_POSITION]`_**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * `deletemodule 1` deletes the module at position `1`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Editing a module : `edit zoom`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Edits an existing module in the module list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `edit zoom` **_`[MODULE_NAME]`_** **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Edits the zoom link of a module named **_`[MODULE_NAME]`_** to **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `edit zoom CS2030 https://sample.zoom.us` edits the zoom link for a module named `CS2030`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  to `https://sample.zoom.us`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Adding assignment to a module: `addassignment`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  Adds an assignment that takes up a percentage of the grade and has a result from 0.00 to 1.00 to an existing module."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  Format: `addassignment` **_`n/[MODULE_NAME]`_** **_`a/[ASSIGNMENT_NAME]`_**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **_`%/[ASSIGNMENT_PERCENTAGE]`_** **_`r/[ASSIGNMENT_RESULT]`_**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Adds an assignment **_`[ASSIGNMENT_NAME]`_** that takes up **_`[ASSIGNMENT_PERCENTAGE]`_**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  of the grade with a result of **_`[ASSIGMENT_RESULT]`_** to a module named **_`[MODULE_NAME]`_**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  Example of usage:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  `addassignment n/CS2100 a/Quiz 1 %/5 r/0.80` adds an assignment called `Quiz 1` that takes up `5`% of the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  grade with a result of `0.80` to the module named `CS2100`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### Todo List Features"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Adding a task: `addtask`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Adds a task to the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `addtask` **_`[n/TASK_NAME]`_** **_`[t/TAG]`_** **_`[p/PRIORITY]`_** **_`[d/DATE]`_**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* All fields except the name of the task are optional."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Name of the task should not be longer than 30 characters."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* You can provide more than one tag."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Date must be in the form of YYYY-MM-DD."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `addtask n/read book t/DAILY HOBBY p/low d/2020-10-10` adds the specified task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Deleting a task: `deletetask`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Deletes a task from the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `deletetask` **_`INDEX`_**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* See index from the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Index must be a positive integer."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `deletetask 1` deletes the first task in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Editing a task: `edittask`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Edits a task in the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `edittask` `INDEX` **_`[n/TASK_NAME]`_** **_`[t/TAG]`_** **_`[p/PRIORITY]`_** **_`[d/DATE]`_**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* See index from the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Index must be a positive integer."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* At least one field must not be empty."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `edittask 1 n/read chapter 5 p/HIGH` edits the first task name to `read chapter 5` and"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "and priority to `HIGH`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Finding a task: `findtask`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Finds a task based on keywords."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `findtask` **_`[KEYWORD]`_**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `findtask` **_`[k/KEYWORD]`_** list all the task that matches the keyword."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Marking a task as completed: `completetask`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Labels a task as COMPLETED."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `completetask` **_`INDEX`_**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* See index from the list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Index must be a positive integer."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `completetask 1` label first task in the list as completed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Resetting a task: `resettask`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Reset the status of a task back to NOT COMPLETED."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `resettask` **_`INDEX`_**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* See index from the list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Index must be a positive integer."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `resettask 2` reset the second task in the list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Sorting tasks: `sorttask`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Sorts the list based on a criterion."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `sorttask` **_`[REVERSED]`_** **_`[CRITERION]`_**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* **_`[REVERSED]`_** is a signle character \u0027r\u0027."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Add **_`[REVERSED]`_** to reverse the ordering of the list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* **_`[CRITERION]`_** is pre-defined i.e. choose from `NAME`, `PRIORITY`, `DATE`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* **_`[CRITERION]`_** is not case-sensitive."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `sorrtask priority` sorts the task from lowest to highest priority."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `sorrtask r priority` sorts the task from the highest to the lowest."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Filtering tasks: `filtertask`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Filters the list based on a criterion."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `filtertask` + **_`[CRITERION]`_** + **_`[KEYWORD]`_**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `filtertask priority high` shows only tasks that has high priority."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Archiving a task: `archivetask`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Archives a task from the list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `archivetask` **_`INDEX`_**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* See index from the list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Index must be a positive integer."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Examples: `archivetask 1` archive the first task."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Clearing the list: `cleartask`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Clears all tasks in the list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `cleartask`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### Contact Features"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Add a contact: `addcontact`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Adds a new contact into the contact list if it does not already exist."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Format: `addcontact n/NAME [e/EMAIL] [te/TELEGRAM] [t/TAG]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Users are required to provide at least one other contact detail apart from **Name**."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Examples of Usage:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "`addcontact n/john e/john@gmail.com te/@john123`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Delete a contact: `deletecontact`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Deletes an existing contact from the contact list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Format: `deletecontact CONTACT_INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Contact index refers to the index number of the contact in the contact list displayed in the application"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Examples of Usage:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "`deletecontact 1`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Edit a contact: `editcontact`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Edits an existing contact in the contact list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Format: `editcontact CONTACT_INDEX [n/NAME] [e/EMAIL] [te/TELEGRAM]`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* This feature edits the contact at the specified contact index. Contact index refers to the index number of the contact in the contact list displayed in the application"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* At least one of the contact fields must be provided"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* The edit contact must not already exist in the contact list"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Examples of Usage:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "`editcontact 1 n/john e/john@gmail.com`: Edits the name and email of the contact at index 1 to `john` and `john@gmail.com` respectively"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Calculating Cumulative Average Point(CAP): `calculatecap`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Calculates the user\u0027s CAP based on completed modules"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " Format: `calculatecap`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * `calculatecap` calculate the user\u0027s cap"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### Scheduler Features"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Adding an Event to the Scheduler: `addevent`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Creates and add a new Event with the specified information from the user input"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Format: `addevent n/[event name] d/[date]`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   Examples:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * `addevent n/CS2103T exams d/12-12-2020` adds an Event called CS2103T into the Scheduler with the date 12-12-2020."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### General Features"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Undo previous user command: `undo`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Undoes the previous user command"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " Format: `undo`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * `undo`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "#### Redo previous user command: `redo`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Redoes the previously undone user command"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " Format: `redo`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * `redo`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Q**: How do you add a module into the program?\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**A**: Run the program and wait for the terminal to start up. Next, type in : “add module [CS2103T]” to add a module called CS2103T."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Q**: How do you view the zoom links of a particular module?\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**A**: When the program has started running, enter the following in the terminal : “view [CS2103T]” to view the zoom link for the module called CS2103T."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Add** | `addmodule n/MODULE_NAME l/ZOOM_LINK`\u003cbr\u003e e.g. `addmodule n/CS2103T l/https://sample.zoom.us`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**View** | `viewmodule n/MODULE_NAME`\u003cbr\u003e e.g. `viewmodule n/cs2101`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Delete** | `deletemodule MODULE_POSITION `\u003cbr\u003e e.g. `deletemodule 3`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Edit** | `editmodule n/MODULE_NAME e/NEW_NAME l/NEW_LINK`\u003cbr\u003e e.g. `editmodule n/CS2103T e/CS2100 l/https://sample.zoom.us`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Add Zoom** | `addzoomlink n/MODULE_NAME l/ZOOM_LINK` \u003cbr\u003e e.g. `addzoomlink n/cs2103T l/https://sample.zoom.us`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Add Assignment** | `addassignment n/MODULE_NAME a/ASSIGNMENT_NAME %/ASSIGNMENT_PERCENTAGE r/ASSIGNMENT_RESULT` \u003cbr\u003e e.g. `addassignment n/CS2100 a/Quiz 1 %/5 r/0.80`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Calculate CAP** | `calculatecap` \u003cbr\u003e e.g. `calculatecap`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Add Event** | `addevent n/EVENT_NAME d/DATE` \u003cbr\u003e e.g. `addevent n/CS2103T d/12-12-2020`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Undo** | `undo` \u003cbr\u003e e.g. `undo`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Redo** | `redo` \u003cbr\u003e e.g. `redo`"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 121,
      "MatthiasLHK": 20,
      "murtubak": 21,
      "-": 99,
      "jonasngs": 36,
      "davidcaiqifan": 39
    }
  },
  {
    "path": "docs/diagrams/AddEventSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Participant \":ParserManager\" as parserManager LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Participant \":SchedulerParser\" as schedulerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Participant \":XYZEventParser\" as XYZParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Participant \":XYZEventCommand\" as XYZCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "-[USER_COLOR]\u003e parserManager : \"addevent n/CS2103T d/12-12-2020\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "activate parserManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "parserManager -[LOGIC_COLOR]\u003e schedulerParser : \"new SchedulerParser()\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "activate schedulerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "schedulerParser -[LOGIC_COLOR]\u003e XYZParser : \"parseCommand()\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "activate XYZParser LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "XYZParser -[LOGIC_COLOR]\u003e XYZCommand : \"parse()\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "activate XYZCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "XYZCommand --[LOGIC_COLOR]\u003e XYZParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deactivate XYZCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "XYZParser --[LOGIC_COLOR]\u003e schedulerParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deactivate XYZParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "schedulerParser --[LOGIC_COLOR]\u003e parserManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deactivate schedulerParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 29
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(moduleList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "jonasngs": 1
    }
  },
  {
    "path": "docs/diagrams/CalculateCapSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "participant \":ModuleListParser\" as ModuleListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "participant \"c:CalculateCapCommand\" as CalculateCapCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "[-\u003e LogicManager : execute(calculatecap)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "LogicManager -\u003e ModuleListParser : parseCommand(calculatecap)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "activate ModuleListParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "create CalculateCapCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "ModuleListParser -\u003e CalculateCapCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "activate CalculateCapCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "CalculateCapCommand -\u003e CalculateCapCommand : CalculateCap()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "activate CalculateCapCommand #DarkSalmon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "CalculateCapCommand --\u003e ModuleListParser : result"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "deactivate CalculateCapCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "ModuleListParser --\u003e LogicManager : result"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "deactivate ModuleListParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "destroy CalculateCapCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 33
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Class ParserManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Class ModuleListParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Class ContactListParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Class TodoListParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "LogicManager --\u003e\"1\" ParserManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ParserManager --\u003e\"1\" ModuleListParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ParserManager --\u003e\"1\" ContactListParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ParserManager --\u003e\"1\" TodoListParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ModuleListParser .down.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ContactListParser .down.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "TodoListParser .down.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "XYZCommand -up--|\u003e Command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes      \u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "LogicManager ---\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddModuleCommand, \\nFindTaskCommand, etc"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "jonasngs": 15
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Interface ReadOnlyModuleList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Interface ReadOnlyContactList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Interface ReadOnlyTodoList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class ModuleList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class ContactList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class TodoList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class ReadOnlyModuleList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class ReadOnlyContactList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class ReadOnlyTodoList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "ModuleList .down.|\u003e ReadOnlyModuleList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "ContactList .down.|\u003e ReadOnlyContactList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "TodoList .down.|\u003e ReadOnlyTodoList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "ModelManager o---\u003e \"1\" ModuleList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "ModelManager o---\u003e \"1\" ContactList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "ModelManager o---\u003e \"1\" TodoList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 15,
      "-": 24
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Interface ModuleListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Interface ContactListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Interface TodoListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Class JsonModuleListStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "StorageManager o--\u003e ModuleListStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "StorageManager o--\u003e ContactListStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "StorageManager o--\u003e TodoListStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonModuleListStorage .up.|\u003e ModuleListStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonModuleListStorage .down.\u003e JsonSerializableModuleList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonSerializableModuleList .right.\u003e JsonAdaptedModule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonAdaptedModule .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonContactListStorage .up.|\u003e ContactListStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonContactListStorage .down.\u003e JsonSerializableContactList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonSerializableContactList .down.\u003e JsonAdaptedContact"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonAdaptedContact.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonTodoListStorage .up.|\u003e TodoListStorage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonTodoListStorage .down.\u003e JsonSerializableTodoList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonSerializableTodoList .down.\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "JsonAdaptedTask .left.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "davidcaiqifan": 21
    }
  },
  {
    "path": "docs/diagrams/TodoListClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class TodoList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Package Task \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class UniqueTodoList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class TaskName"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Enum Priority \u003c\u003cenumeration\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Enum Status \u003c\u003cenumeration\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "TodoList *--\u003e \"1\" UniqueTodoList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "UniqueTodoList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Task *---\u003e \"1\" TaskName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Task *---\u003e \"0..*\" Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Task *---\u003e \"0..1\" Priority"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Task *---\u003e \"0..1\" Date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Task *---\u003e \"0..1\" Status"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 33
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Class ModuleListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Class ModuleCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Class ContactListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Class ContactCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "MainWindow *-down-\u003e ModuleListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "MainWindow *-down-\u003e ContactListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ModuleListPanel -down-\u003e ModuleCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ContactListPanel -down-\u003e ContactCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ModuleListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ContactListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ModuleCard --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ContactCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ModuleCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ContactCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ModuleListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "ContactListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/contact/AddContactCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ":User enters the command to add a contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ":AddContactParser parsers the command arguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "if () then ([command arguments are valid])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        :Create an AddContactCommand with the newly created Contact as a field;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        :Execute AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if() then ([the Contact object created exists in the Contact List])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            :Throw an exception to inform users that the Contact could not be added;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            :Update UI to display error message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            :Add the Contact into the user\u0027s contact list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            :Update UI to display newly added Contact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        :Throw an exception to inform users of the invalid command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        :Update UI to display error message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "stop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 27
    }
  },
  {
    "path": "docs/diagrams/contact/AddContactSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "participant \":ContactListParser\" as ContactListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "participant \":AddContactParser\" as AddContactParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "participant \":AddContactCommand\" as AddContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[-\u003e LogicManager : execute(addcontact)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "LogicManager -\u003e ContactListParser : parseCommand(addcontact)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate ContactListParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "create AddContactParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ContactListParser -\u003e AddContactParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate AddContactParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactParser --\u003e ContactListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate AddContactParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ContactListParser -\u003e AddContactParser :parse(commandArgument)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate AddContactParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ref over AddContactParser: Tokenize user input and parse arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "create AddContactCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactParser -\u003e AddContactCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate AddContactCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactCommand --\u003e AddContactParser: command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate AddContactCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactParser --\u003e ContactListParser: command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate AddContactParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactParser -[hidden]-\u003e AddContactCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "destroy AddContactParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "ContactListParser --\u003e LogicManager: command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate ContactListParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "LogicManager -\u003e AddContactCommand : execute(model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate AddContactCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactCommand -\u003e Model : addContact(contact)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Model --\u003e AddContactCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "CommandResult --\u003e AddContactCommand: CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactCommand --\u003e LogicManager: CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate AddContactCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "AddContactCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "destroy AddContactCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 74
    }
  },
  {
    "path": "docs/diagrams/contact/ContactClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "skinparam arrowThickness 0.6"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Package contact {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Class Contact"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "class Name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "class Email"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "class Telegram"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Contact *--\"1\" Name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Contact *--\"0..1\" Email"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "Contact *--\"0..1\" Telegram"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 21
    }
  },
  {
    "path": "docs/diagrams/model/AddAssignmentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \":ModuleListParser\" as ModuleListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \":AddAssignmentParser\" as AddAssignmentParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \"a:AddAssignmentCommand\" as AddAssignmentCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "participant \":Module\" as Module MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "[-\u003e LogicManager : execute(\"addassignment n/CS2100 a/Quiz 1 %/5 r/0.8\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "LogicManager -\u003e ModuleListParser : parseCommand(\"addassignment n/CS2100 a/Quiz 1 %/5 r/0.8\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate ModuleListParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "create AddAssignmentParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ModuleListParser -\u003e AddAssignmentParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate AddAssignmentParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentParser --\u003e ModuleListParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate AddAssignmentParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ModuleListParser -\u003e AddAssignmentParser : parse(\"n/CS2100 a/Quiz 1 %/5 r/0.8\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate AddAssignmentParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "create AddAssignmentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentParser -\u003e AddAssignmentCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate AddAssignmentCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentCommand --\u003e AddAssignmentParser : a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate AddAssignmentCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentParser --\u003e ModuleListParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate AddAssignmentParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentParser -[hidden]-\u003e ModuleListParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "destroy AddAssignmentParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ModuleListParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate ModuleListParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "LogicManager -\u003e AddAssignmentCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate AddAssignmentCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentCommand -\u003e Model : getFilteredModuleList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Model --\u003e AddAssignmentCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentCommand --\u003e Module : addAssignment(\"Quiz 1\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate Module"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Module --\u003e AddAssignmentCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate Module"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "CommandResult --\u003e AddAssignmentCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "AddAssignmentCommand --\u003e LogicManager :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate AddAssignmentCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "murtubak": 76
    }
  },
  {
    "path": "docs/diagrams/model/ContactListDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Interface ReadOnlyContactList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ContactList *-right-\u003e \"1\" UniqueContactList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ContactList .down.|\u003e ReadOnlyContactList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "UniqueContactList o-right-\u003e\"*\" Contact"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Contact *--\u003e\"1\" Name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Contact *--\u003e\"1\" Email"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Contact *--\u003e\"1\" Telegram"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "murtubak": 17
    }
  },
  {
    "path": "docs/diagrams/model/GradeTrackerDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Module *--\u003e\"1\" GradeTracker"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "GradeTracker *--\u003e\"1\" Grade"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "GradeTracker *--\u003e\"*\" Assignment"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "murtubak": 11
    }
  },
  {
    "path": "docs/diagrams/model/ModuleListDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Interface ReadOnlyModuleList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ModuleList *-right-\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "ModuleList .down.|\u003e ReadOnlyModuleList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "UniqueModuleList o-right-\u003e\"*\" Module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Module *--\u003e\"1\" ModuleName"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Module *--\u003e\"1\" ZoomLink"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Module *--\u003e\"1\" GradeTracker"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "GradeTracker *--\u003e\"1\" Grade"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "GradeTracker *--\u003e\"*\" Assignment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "murtubak": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "title: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F12-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "![Ui](images/OriginalImages/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Cap 5.0 Buddy is a desktop application that helps NUS SoC students to keep track of their module details efficiently.**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* If you are interested in using Cap 5.0 Buddy, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* If you are interested about developing Cap 5.0 Buddy, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "jonasngs": 8
    }
  },
  {
    "path": "docs/team/davidcaiqifan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "title: David Cai Qifan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "docs/team/jonasng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "title: Jonas Ng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "jonasngs": 2
    }
  },
  {
    "path": "docs/team/joshuawong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "title: Joshua Wong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Cap 5.0 Buddy helps NUS SoC students to keep track of their module details and contacts efficiently. It helps them centralize key module details, contacts and information,  and follows their study progress through a Command Line Interface (CLI) that allows efficient management of module details."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **New Feature**: Added the ability to delete modules."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * What it does: allows the user to remove a module from the Module List."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Justification: This feature is necessary as it allows the user to remove unnecessary modules from the Module List."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **New Feature**: Added the Assignment components to each module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Credits:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **New Feature**: Added the Grade component to each module."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * What it does:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Justification:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Highlights:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Credits:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zFR\u003dfalse\u0026zA\u003dmurtubak\u0026zR\u003dAY2021S1-CS2103T-F12-3%2Ftp%5Bmaster%5D\u0026zACS\u003d258.1984652947332\u0026zS\u003d2020-08-14\u0026zFS\u003d\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Refactored Add / Delete / View / Edit / Add Zoom Link commands (Pull requests [\\#200](https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/200))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "murtubak": 59
    }
  },
  {
    "path": "docs/team/matthiaslhk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "title: Li Huankang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Cap 5.0 Buddy - Cap 5.0 Buddy helps SoC students to keep track of their module details efficiently. It helps them to centralize key module details and follows their study progress through a CLI that optimizes the management of important module details."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **New Feature**: Added the ability to create and add modules into the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * What it does: allows the user to store modules into the program with the given information."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Highlights: This enhancement allows more complicated and advanced commands to be executed with the introduction of the different extensions. It required an in-depth analysis of design alternatives. The implementation was not very difficult as this is just the basic block for future functions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Credits: We refactored the original AB3\u0027s code to change from a AddPerson to a AddModule."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* What it does:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Credits:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* What it does:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Credits:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Updated the GUI to fit our project design as we needed to display more information. (Pull requests [\\#168](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/168\u0027), [\\#218](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/218\u0027))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Refactored Ui components to change the GUI display from showing a list of persons to modules. (Pull requests [\\#218](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/218\u0027))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Code contributed**: [RepoSense link](\u0027https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003df12-3\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0027)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Managed releases `v1.2` - `v1.2b` (2 releases) on GitHub"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Documentation**: // add PR number and links"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Added documentation for the features `addmodule`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Added the UI screenshot for demonstration purposes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Added the UML diagram for the overall program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Added the implementation for the `addmodule` feature."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#146](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/146\u0027)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * PRs reviewed (with trivial review comments): [\\#25](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/25\u0027), [\\#29](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/29\u0027), [\\#37](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/37\u0027), [\\#40](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/40\u0027), [\\#44](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/44\u0027), [\\#74](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/74\u0027), [\\#76](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/76\u0027), [\\#80](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/80\u0027),[\\#91](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/91\u0027), [\\#127](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/127\u0027), [\\#129](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/129\u0027), [\\#135](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/135\u0027), [\\#188](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/188\u0027), [\\#190](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/190\u0027), [\\#200](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/200\u0027), [\\#208](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/208\u0027), [\\#210](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/210\u0027), [\\#212](\u0027https://github.com/AY2021S1-CS2103T-F12-3/tp/pull/212\u0027)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 56
    }
  },
  {
    "path": "docs/team/michael-setia.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "title: Michael Setia Atmaja\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 2,
      "-": 44
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "#Mon Oct 12 03:55:31 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "murtubak": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ContactList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.storage.ContactListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.storage.JsonContactListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.storage.JsonTodoListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.storage.ModuleListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.storage.TodoListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ModuleList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ModuleListStorage moduleListStorage \u003d new JsonModuleListStorage(userPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ContactListStorage contactListStorage \u003d new JsonContactListStorage(userPrefs.getContactListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        TodoListStorage todoListStorage \u003d new JsonTodoListStorage(userPrefs.getTodoListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        storage \u003d new StorageManager(moduleListStorage, contactListStorage, todoListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s module list, contact list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Optional\u003cReadOnlyModuleList\u003e moduleListOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ReadOnlyModuleList initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ReadOnlyContactList initialContactList \u003d initializeContactList(storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ReadOnlyTodoList initialTodoList \u003d initializeTodoList(storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            moduleListOptional \u003d storage.readModuleList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ModuleList\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                initialData \u003d new ModuleList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                initialData \u003d moduleListOptional.get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            //to be used when sample modulelist is created"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            //initialData \u003d moduleListOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            initialData \u003d new ModuleList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            initialData \u003d new ModuleList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new ModelManager(initialData, initialContactList, initialTodoList, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns a {@code ReadOnlyContactList} with the data from {@code storage}\u0027s contact list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object containing contact list data."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return ReadOnlyContactList containing the contacts from the Storage argument."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private ReadOnlyContactList initializeContactList(Storage storage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Optional\u003cReadOnlyContactList\u003e contactListOptional;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ReadOnlyContactList initialContactList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            contactListOptional \u003d storage.readContactList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!contactListOptional.isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ContactList\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                initialContactList \u003d new ContactList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                initialContactList \u003d contactListOptional.get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DataConversionException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ContactList\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            initialContactList \u003d new ContactList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ModuleList\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            initialContactList \u003d new ContactList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return initialContactList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns a {@code ReadOnlyTodoList} with the data from {@code storage}\u0027s todo list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param storage Storage object containing todo list data."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return ReadOnlyTodoList containing the tasks from the Storage argument."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private ReadOnlyTodoList initializeTodoList(Storage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cReadOnlyTodoList\u003e todoListOptional;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ReadOnlyTodoList initialTodoList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            todoListOptional \u003d storage.readTodoList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            if (!todoListOptional.isPresent()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TodoList\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                initialTodoList \u003d new TodoList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                initialTodoList \u003d todoListOptional.get();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (DataConversionException ex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TodoList\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            initialTodoList \u003d new TodoList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TodoList\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            initialTodoList \u003d new TodoList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return initialTodoList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 28,
      "-": 165,
      "jonasngs": 38,
      "davidcaiqifan": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_CONTACTS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX \u003d \"The contact index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "murtubak": 1,
      "-": 11,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @see seedu.address.model.Model#getModuleList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ReadOnlyModuleList getModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the Contact List."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ReadOnlyContactList getContactList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns an unmodifiable list of filtered contacts."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns the Todo List."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ReadOnlyTodoList getTodoList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an unmodifiable list of filtered tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the file Path of the Contact List."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return Path of contact list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Path getContactListFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 12,
      "MatthiasLHK": 22,
      "-": 44,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.GradeTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ModuleListParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.TodoListParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.contactlistparsers.ContactListParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final ModuleListParser moduleListParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final ContactListParser contactListParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final TodoListParser todoListParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final GradeTrackerParser gradeTrackerParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final ParserManager parserManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        moduleListParser \u003d new ModuleListParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        contactListParser \u003d new ContactListParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        todoListParser \u003d new TodoListParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        gradeTrackerParser \u003d new GradeTrackerParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        parserManager \u003d new ParserManager(moduleListParser, todoListParser, contactListParser, gradeTrackerParser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String commandWord \u003d commandText.split(\" \")[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FeatureParser parser \u003d parserManager.select(commandWord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Command command \u003d parser.parseCommand(commandText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            storage.saveModuleList(model.getModuleList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveContactList(model.getContactList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            storage.saveTodoList(model.getTodoList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return model.getModuleList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return model.getModuleListFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ReadOnlyContactList getContactList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return model.getContactList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return model.getFilteredContactList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ReadOnlyTodoList getTodoList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return model.getTodoList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return model.getFilteredTodoList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Path getContactListFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return model.getModuleListFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 12,
      "MatthiasLHK": 35,
      "murtubak": 4,
      "-": 66,
      "jonasngs": 5,
      "davidcaiqifan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ParserManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.GradeTrackerParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ModuleListParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.TodoListParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.contactlistparsers.ContactListParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the manager in charge of overseeing all the medium feature parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final ModuleListParser moduleListParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final ContactListParser contactListParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final TodoListParser todoListParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final GradeTrackerParser gradeTrackerParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a Container the holds all the medium parsers."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param moduleListParser parses module related commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param todoListParser parses task related commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param contactListParser parses contact related commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param gradeTrackerParser parses grade tracker related commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ParserManager(ModuleListParser moduleListParser,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                         TodoListParser todoListParser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                         ContactListParser contactListParser,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                         GradeTrackerParser gradeTrackerParser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.contactListParser \u003d contactListParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.todoListParser \u003d todoListParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.moduleListParser \u003d moduleListParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTrackerParser \u003d gradeTrackerParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Selects which medium parser to be used based on the command word."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param commandWord the command word of the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return FeatureParser a medium parser."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ParseException when the command word is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public FeatureParser select(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (commandWord.contains(\"module\") || commandWord.contains(\"undo\") || commandWord.contains(\"redo\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return this.moduleListParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (commandWord.contains(\"task\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return this.todoListParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (commandWord.contains(\"contact\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return this.contactListParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else if (commandWord.contains(\"assignment\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return this.gradeTrackerParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(\"Does not recognise command type!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 46,
      "murtubak": 8,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.setModuleList(new ModuleList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 6,
      "-": 20,
      "jonasngs": 2,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return True if the session has been terminated, false otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 7,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String.format(Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW, model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 5,
      "-": 39,
      "jonasngs": 3,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Finds and lists all contacts in the contact list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindContactCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findcontact\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all contacts whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a FindContactCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param predicate Predicate to test if the Contact contains the search keyword provided by users."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindContactCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String.format(Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW, model.getFilteredContactList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof FindContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 5,
      "-": 22,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Adds a contact into the contact list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addcontact\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a contact to the contact list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_TELEGRAM + \"TELEGRAM \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_TELEGRAM + \"@johndoe\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_TAG + \"friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New contact added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact already exists in the contact list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Contact toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new AddContactCommand for the addition of a new contact."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param contact Contact to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddContactCommand(Contact contact) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        toAdd \u003d contact;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (model.hasContact(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.addContact(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21,
      "jonasngs": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Deletes a contact identified using it\u0027s displayed index from the contact list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteContactCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletecontact\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \": Deletes the contact identified by the index number used in the displayed contact list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Contact: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact contactToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, contactToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21,
      "jonasngs": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/EditContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONTACTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Edits the details of an existing contact in the contact list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditContactCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editcontact\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the contact identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"by the index number used in the displayed contact list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"[\" + PREFIX_TELEGRAM + \"TELEGRAM]...\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_EDIT_CONTACT_SUCCESS \u003d \"Edited Contact: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact already exists in the contact list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final EditContactDescriptor editContactDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index of the contact in the filtered contact list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param editContactDescriptor details to edit the contact with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public EditContactCommand(Index index, EditContactDescriptor editContactDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(editContactDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.editContactDescriptor \u003d new EditContactDescriptor(editContactDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact contactToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact editedContact \u003d createEditedContact(contactToEdit, editContactDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!contactToEdit.isSameContact(editedContact) \u0026\u0026 model.hasContact(editedContact)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.setContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CONTACT_SUCCESS, editedContact));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and returns a {@code Contact} with the details of {@code contactToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * edited with {@code editContactDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static Contact createEditedContact(Contact contactToEdit, EditContactDescriptor editContactDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assert contactToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Name updatedName \u003d editContactDescriptor.getName().orElse(contactToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Email updatedEmail \u003d editContactDescriptor.getEmail().orElse(contactToEdit.getEmail());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Telegram updatedTelegram \u003d editContactDescriptor.getTelegram().orElse(contactToEdit.getTelegramUsername());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editContactDescriptor.getTags().orElse(contactToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new Contact(updatedName, updatedEmail, updatedTelegram, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 editContactDescriptor.equals(e.editContactDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21,
      "jonasngs": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/EditContactDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Stores the details to edit the contact with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * corresponding field value of the contact."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class EditContactDescriptor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Telegram telegram;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public EditContactDescriptor() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public EditContactDescriptor(EditContactDescriptor toCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setEmail(toCopy.email);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setTelegram(toCopy.telegram);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, email, telegram);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setTelegram(Telegram telegram) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cTelegram\u003e getTelegram() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return Optional.ofNullable(telegram);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!(other instanceof EditContactDescriptor)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        EditContactDescriptor e \u003d (EditContactDescriptor) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 getTelegram().equals(e.getTelegram())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Finds the specific contact in the contact list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindContactCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findcontact\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/HelpContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Format full help instructions for every contact related command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class HelpContactCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"helpcontact\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/contactlistcommands/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.contactlistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Lists all the existing contacts in the contact list to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ListContactCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listcontact\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all contacts\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListContactCommand.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        logger.info(\"Display all contacts in contact list\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21,
      "jonasngs": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gradetrackercommands/AddAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.commands.gradetrackercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_NEW_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERCENTAGE_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESULT_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AddAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addassignment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an assignment to the grade tracker for a module. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"MODULE NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_ADD_NEW_ASSIGNMENT + \"ASSIGNMENT NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_PERCENTAGE_ASSIGNMENT + \" PERCENTAGE OF FINAL GRADE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_RESULT_ASSIGNMENT + \" RESULT ACHIEVED \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"CS2100 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_ADD_NEW_ASSIGNMENT + \"Quiz 1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_PERCENTAGE_ASSIGNMENT + \" 15\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_RESULT_ASSIGNMENT + \" 0.85\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assignment %1$s added.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_NOT_ADDED \u003d \"Module to add to not found.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final String moduleToAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final Assignment assignmentToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates an AddAssignmentCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public AddAssignmentCommand(String moduleToAdd, Assignment assignment) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.moduleToAdd \u003d moduleToAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentToAdd \u003d assignment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (Module eachModule : lastShownList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (eachModule.getName().fullName.equals(moduleToAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                module \u003d eachModule;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(MESSAGE_ASSIGNMENT_NOT_ADDED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        module.addAssignment(assignmentToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, assignmentToAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 71,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gradetrackercommands/AddGradeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.commands.gradetrackercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AddGradeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addgrade\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a grade to the grade tracker for a module. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"MODULE NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_GRADE + \" GRADE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"CS2100 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_GRADE + \"0.90\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New grade %1$s added.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_GRADE_NOT_ADDED \u003d \"Module to add to not found.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final String moduleToAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final Grade gradeToAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates an AddAssignmentCommand to add the specified {@code Grade}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public AddGradeCommand(String moduleToAdd, Grade grade) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.moduleToAdd \u003d moduleToAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeToAdd \u003d grade;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (Module eachModule : lastShownList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (eachModule.getName().fullName.equals(moduleToAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                module \u003d eachModule;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(MESSAGE_GRADE_NOT_ADDED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        module.addGrade(gradeToAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, gradeToAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 65,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gradetrackercommands/DeleteAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.commands.gradetrackercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class DeleteAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteassignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \": Deletes the assignment at the specified position in the specified module.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"CS2100\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_DELETE_ASSIGNMENT_SUCCESS \u003d \"Deleted assignment %1$s from module: %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_NOT_DELETED \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Assignment to be deleted or module specified is invalid.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final ModuleName targetModule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates a DeleteAssignmentCommand to remove the specified assignment in the specified module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param targetIndex the index of the assignment to be removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param targetModule the module to remove the assignment from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public DeleteAssignmentCommand(Index targetIndex, ModuleName targetModule) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.targetModule \u003d targetModule;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (Module eachModule : lastShownList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (eachModule.getName().equals(targetModule)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                module \u003d eachModule;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(MESSAGE_ASSIGNMENT_NOT_DELETED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        GradeTracker gradeTracker \u003d module.getGradeTracker();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Assignment assignmentToDelete \u003d gradeTracker.getSortedAssignments().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        gradeTracker.removeAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        module.setGradeTracker(gradeTracker);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ASSIGNMENT_SUCCESS, assignmentToDelete, module));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            || (other instanceof DeleteAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteAssignmentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gradetrackercommands/EditAssignmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.commands.gradetrackercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class EditAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editassignment\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addmodule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to the module list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_ZOOM_LINK + \"ZOOM LINK \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"CS2100 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_ZOOM_LINK + \"www.zoom.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the module list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7,
      "murtubak": 17,
      "-": 36,
      "jonasngs": 4,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/AddZoomLinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents the AddZoomLinkCommand class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AddZoomLinkCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addzoomlink\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a zoom link to the module. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Parameters: \" + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_ZOOM_LINK + \"ZOOM LINK \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"1\" + PREFIX_ZOOM_LINK + \"www.zoom.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final int moduleID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final ZoomLink zoomLink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates and initialises a new AddZoomLinkCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param moduleIndex Zero based index of the module in the list of modules."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param zoomLink String containing the zoom link to be added to the module."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public AddZoomLinkCommand(int moduleIndex, ZoomLink zoomLink) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.moduleID \u003d moduleIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (moduleID \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module moduleToAddLink \u003d lastShownList.get(moduleID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module updatedModule \u003d moduleToAddLink.addZoomLink(zoomLink);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        model.setModule(moduleToAddLink, updatedModule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(createSuccessMessage(updatedModule.getName().fullName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates a success message when the zoom link has been successfully added to the desired module."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param moduleName String containing the name of the module."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return String containing the success message."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public String createSuccessMessage(String moduleName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String message \u003d this.zoomLink + \" has been successfully added to \" + moduleName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return False since the sessions has not been terminated."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 3,
      "murtubak": 78,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Deletes a module identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletemodule\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \": Deletes the module identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted module: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public DeleteModuleCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module moduleToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteModuleCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7,
      "murtubak": 13,
      "-": 38,
      "jonasngs": 2,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Edits the details of an existing Module in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editmodule\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"by the index number used in the displayed module list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_ZOOM_LINK + \"www.zoom-link3.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited module: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the module list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param index                the index of the module to edit from the display list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param editModuleDescriptor details to edit the Module with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public EditModuleCommand(Index index, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module module \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module editedModule \u003d createEditedModule(module, editModuleDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!module.isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        model.setModule(module, editedModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.commitModuleList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates and returns a {@code module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editModuleDescriptor.getTags().orElse(moduleToEdit.getTags());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ModuleName moduleName \u003d editModuleDescriptor.getModuleName().orElse(moduleToEdit.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ZoomLink zoomLink \u003d editModuleDescriptor.getZoomLink().orElse(moduleToEdit.getLink());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        GradeTracker gradeTracker \u003d moduleToEdit.getGradeTracker();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (editModuleDescriptor.getGradePoint().isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            gradeTracker.setGradePoint(editModuleDescriptor.getGradePoint().get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ModularCredits modularCredits \u003d editModuleDescriptor"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                .getModularCredits().orElse((moduleToEdit.getModularCredits()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Module(moduleName, zoomLink, gradeTracker, updatedTags, modularCredits);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!(other instanceof EditModuleCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        EditModuleCommand e \u003d (EditModuleCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 6,
      "murtubak": 45,
      "-": 52,
      "jonasngs": 4,
      "davidcaiqifan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/EditModuleDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradePoint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * corresponding field value of the module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class EditModuleDescriptor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private ZoomLink zoomLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private GradeTracker gradeTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private ModularCredits modularCredits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private GradePoint gradePoint;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        setModuleName(toCopy.moduleName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        setZoomLink(toCopy.zoomLink);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        setGradeTracker(toCopy.gradeTracker);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        setModularCredits(toCopy.modularCredits);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        setGradePoint(toCopy.gradePoint);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //this.gradeTracker.setGradePoint(toCopy.gradeTracker.getGradePoint());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return CollectionUtil.isAnyNonNull(moduleName, zoomLink, modularCredits, gradePoint);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setZoomLink(ZoomLink zoomLink) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setGradeTracker(GradeTracker gradeTracker) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTracker \u003d gradeTracker;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setGradePoint(GradePoint gradePoint) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradePoint \u003d gradePoint;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Sets {@code modularCredits} to this object\u0027s {@code modularCredits}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * A defensive copy of {@code modularCredits} is used internally."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setModularCredits(ModularCredits modularCredits) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Optional\u003cModuleName\u003e getModuleName() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Optional\u003cZoomLink\u003e getZoomLink() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Optional.ofNullable(zoomLink);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Optional\u003cGradeTracker\u003e getGradeTracker() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Optional.ofNullable(gradeTracker);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Optional\u003cModularCredits\u003e getModularCredits() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Optional.ofNullable(modularCredits);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Optional\u003cGradePoint\u003e getGradePoint() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Optional.ofNullable(gradePoint);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return getModuleName().equals(e.getModuleName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 getZoomLink().equals(e.getZoomLink())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 getGradeTracker().equals(e.getGradeTracker())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 getModularCredits().equals(e.getModularCredits());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            + \": Redoes the last undone user command.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_REDO_COMMAND_SUCCESS \u003d \"Undone command has been redone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public RedoCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.redoModuleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new CommandResult(MESSAGE_REDO_COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                || (other instanceof RedoCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            + \": Undoes the last user command.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_UNDO_COMMAND_SUCCESS \u003d \"Previous command has been undone\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        model.undoModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                || (other instanceof UndoCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulelistcommands/ViewModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.modulelistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewModuleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewmodule\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module details have been displayed successfully!\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views a module in the module list. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"The module requested cannot be found.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Creates an ViewCommand to view the specified {@code Module}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ViewModuleCommand(ModuleName moduleName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module moduleToView \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (Module module : lastShownList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (module.getName().equals(moduleName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                moduleToView \u003d module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (moduleToView \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, moduleToView));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 5,
      "murtubak": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulercommands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.schedulercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addevent\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulercommands/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.schedulercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteevent\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulercommands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.schedulercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editevent\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulercommands/FindEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.schedulercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findevent\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/schedulercommands/ViewEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.schedulercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewevent\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Adds a task to the todo list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtask\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the todo list. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_NAME + \"TASK NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_TAG + \"TAG [OPTIONAL] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_PRIORITY + \"PRIORITY [OPTIONAL] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_DATE + \"DATE/DEADLINE [OPTIONAL] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_NAME + \"Do Lab Sheet 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_TAG + \"LAB \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_PRIORITY + \"HIGH \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_DATE + \"2020-10-16 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the todo list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AddTaskCommand.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        logger.info(\"Adding a task: \\n\" + task.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.warning(\"Detected duplicate task. Task will not be added to the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert toAdd !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        logger.info(\"Adding task to the list.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "michael-setia": 63,
      "MatthiasLHK": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/CompleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Marks a task identified using it\u0027s displayed index from the todo list as completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"completetask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \": Mark the task identified by the index number used in the displayed todo list as COMPLETED.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Note : To mark or undo a task to NOT COMPLETED please use the \u0027resettask\u0027 command\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_COMPLETE_TASK_SUCCESS \u003d \"Completed Task: \\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public CompleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTodoList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task taskToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task completedTask \u003d taskToComplete.setStatus(Status.COMPLETED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.setTask(taskToComplete, completedTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETE_TASK_SUCCESS, completedTask));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || (other instanceof CompleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((CompleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the todo list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \": Deletes the task identified by the index number used in the displayed todo list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: \\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTodoList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 44,
      "MatthiasLHK": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Edits the details of an existing task in the todo list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittask\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"by the index number used in the displayed todo list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG (can be more than 1)] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE/DEADLINE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"[\" + PREFIX_PRIORITY + \"PRIORITY]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + PREFIX_NAME + \"read chapter 7\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"NOTE : 1. To update the status of the task you can use the complete command.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"NOTE : 2. If tags are present, it will overwrite all of previous tags (editing tags is not cumulative)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited task: \\n%1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the todo list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param index of the task in the filtered todo list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTodoList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.updateFilteredTodoList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert taskToEdit.getName().isPresent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        TaskName name \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName().get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task editedTask \u003d new Task(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (taskToEdit.getTags().isPresent() || editTaskDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Set\u003cTag\u003e updatedTag \u003d editTaskDescriptor.getTags()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                    .orElseGet(() -\u003e taskToEdit.getTags().get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editedTask \u003d editedTask.setTags(updatedTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (taskToEdit.getPriority().isPresent() || editTaskDescriptor.getPriority().isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Priority updatedPriority \u003d editTaskDescriptor.getPriority()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                    .orElseGet(() -\u003e taskToEdit.getPriority().get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editedTask \u003d editedTask.setPriority(updatedPriority);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (taskToEdit.getDate().isPresent() || editTaskDescriptor.getDate().isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Date updatedDate \u003d editTaskDescriptor.getDate()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                    .orElseGet(() -\u003e taskToEdit.getDate().get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editedTask \u003d editedTask.setDate(updatedDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (taskToEdit.getStatus().isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editedTask \u003d editedTask.setStatus(taskToEdit.getStatus().get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return editedTask;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 127,
      "MatthiasLHK": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/EditTaskDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * corresponding field value of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class EditTaskDescriptor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private TaskName name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        setDate(toCopy.date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, tags, priority, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setName(TaskName name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cTaskName\u003e getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 getDate().equals(e.getDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/FindTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findtodo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/HelpTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class HelpTaskCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"helptodo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/ListTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listtask\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.updateFilteredTodoList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 10,
      "MatthiasLHK": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/ResetTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Reset status of a task identified using it\u0027s displayed index from the todo list from completed to not completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class ResetTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resettask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \": Change status of a task from COMPLETED to NOT COMPLETED.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_RESET_TASK_SUCCESS \u003d \"This task is not completed now : \\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ResetTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTodoList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task taskToReset \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task resetTask \u003d taskToReset.setStatus(Status.NOT_COMPLETED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.setTask(taskToReset, resetTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RESET_TASK_SUCCESS, resetTask));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || (other instanceof ResetTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ResetTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/SortTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Sorts the todo list based on specified comparator."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class SortTaskCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sorttask\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort the todo list based on a criterion. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"You can sort based on the name, priority, or the date/deadline of the tasks.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Parameters: [REVERSE] CRITERION \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"You can choose from the criterion below: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"  NAME     -\u003e to sort the task lexicographic based on name \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"  PRIORITY -\u003e to sort the task based on priority \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"  DATE     -\u003e to sort the task based on date or deadline \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"To reverse the ordering, you can add \u0027r\u0027 before the criterion. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" PRIORITY \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        + \"Example (reversed) : \" + COMMAND_WORD + \" r\" + \" PRIORITY \\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List has been sorted!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Comparator\u003cTask\u003e comparator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates SortTaskCommand to sort the todo list based on {@code Comparator}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public SortTaskCommand(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        model.updateSortedTodoList(comparator);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof SortTaskCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        SortTaskCommand s \u003d (SortTaskCommand) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.comparator.equals(s.comparator);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/todolistcommands/ViewTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.commands.todolistcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewTaskCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewtask\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "MatthiasLHK": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** User input to be tokenized. Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Array of prefixes which will be used to tokenize the user input. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Prefix[] prefixes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises an ArgumentTokenizer to tokenize the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param prefixes Array of prefixes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ArgumentTokenizer(String userInput, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.prefixes \u003d prefixes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ArgumentMultimap tokenize() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return extractArguments(positions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private List\u003cPrefixPosition\u003e findAllPrefixPositions() throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "              .flatMap(prefix -\u003e findPrefixPositions(userInput, prefix).stream())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "              .collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        /*List\u003cPrefixPosition\u003e prefixPositions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (Prefix prefix : this.prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Optional\u003cPrefixPosition\u003e prefixPosition \u003d findPrefixPosition(prefix);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            prefixPosition.ifPresent(position -\u003e prefixPositions.add(position));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return prefixPositions;*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*private Optional\u003cPrefixPosition\u003e findPrefixPosition(Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //        : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String prefixSearch \u003d \" \" + prefix.getPrefix();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int prefixIndex \u003d this.userInput.indexOf(prefixSearch);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        boolean hasMultipleSamePrefixes \u003d hasMultipleSamePrefixes(prefix, prefixIndex + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (hasMultipleSamePrefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"User input has multiple arguments for the same prefix\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(error);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return (prefixIndex \u003d\u003d -1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ? Optional.empty()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                : Optional.of(new PrefixPosition(prefix, prefixIndex + 1)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Determines if the same prefix is used more than once."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param prefix Prefix."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param currentPrefixIndex Index of the current prefix in the user input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private boolean hasMultipleSamePrefixes(Prefix prefix, int currentPrefixIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String toSearch \u003d this.userInput.substring(currentPrefixIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return toSearch.contains(\" \" + prefix.getPrefix());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private ArgumentMultimap extractArguments(List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), this.userInput.length());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Prefix prefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String prefixArgument \u003d extractArgumentValue(this.userInput,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            argMultimap.put(prefix, prefixArgument);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "jonasngs": 57,
      "davidcaiqifan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Prefix PREFIX_TELEGRAM \u003d new Prefix(\"te/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final Prefix PREFIX_ZOOM_LINK \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final Prefix PREFIX_ADD_NEW_ASSIGNMENT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final Prefix PREFIX_PERCENTAGE_ASSIGNMENT \u003d new Prefix(\"%/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final Prefix PREFIX_RESULT_ASSIGNMENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final Prefix PREFIX_MODULAR_CREDITS \u003d new Prefix(\"mc/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final Prefix PREFIX_GRADE_POINT \u003d new Prefix(\"gp/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 3,
      "murtubak": 5,
      "-": 12,
      "jonasngs": 1,
      "davidcaiqifan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FeatureParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public interface FeatureParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Command parseCommand(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "jonasngs": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindContactParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.FindContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Parses input arguments and creates a new FindContactCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindContactParser implements Parser\u003cFindContactCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindContactCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and returns a FindContactCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradeTrackerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.AddGradeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.gradetrackerparsers.AddAssignmentParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.gradetrackerparsers.AddGradeParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.gradetrackerparsers.DeleteAssignmentParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.gradetrackerparsers.EditAssignmentParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents the parser in charge for GradeTracker related commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class GradeTrackerParser implements FeatureParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case AddAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return new AddAssignmentParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case EditAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return new EditAssignmentParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case DeleteAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return new DeleteAssignmentParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case AddGradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return new AddGradeParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 19,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.FindContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.AddContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.DeleteContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.EditContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddZoomLinkCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.EditModuleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.ViewModuleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.contactlistparsers.AddContactParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.contactlistparsers.DeleteContactParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.contactlistparsers.EditContactParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.AddModuleParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.AddZoomLinkParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.DeleteModuleParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.EditModuleParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.RedoParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.UndoParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.ViewModuleParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ModuleListParser implements FeatureParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new AddModuleParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new EditModuleParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new DeleteModuleParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case AddZoomLinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new AddZoomLinkParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ViewModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ViewModuleParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case FindContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new FindContactParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case DeleteContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DeleteContactParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case EditContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new EditContactParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case AddContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddContactParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return new UndoParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return new RedoParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 20,
      "murtubak": 5,
      "-": 60,
      "jonasngs": 18,
      "davidcaiqifan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.grade.GradePoint;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Criterion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses a {@code String telegramUsername} into an {@code Telegram}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException if the given {@code telegramUsername} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static Telegram parseTelegram(String telegramUsername) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(telegramUsername);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String trimmedTelegram \u003d telegramUsername.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!Telegram.isValidTelegram(trimmedTelegram)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new Telegram(trimmedTelegram);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static ModuleName parseModuleName(String name) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!ModuleName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new ModuleName(trimmedName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses a {@code String zoomLink} into a {@code ZoomLink}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @throws ParseException if the given {@code zoomLink} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static ZoomLink parseZoomLink(String zoomLink) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(zoomLink);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String trimmedZoomLink \u003d zoomLink.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!ZoomLink.isValidZoomLink(trimmedZoomLink)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(ZoomLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new ZoomLink(trimmedZoomLink);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses a {@code String assignmentName}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static String parseAssignmentName(String assignmentName) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String trimmedAssignmentName \u003d assignmentName.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Assignment.isValidAssignmentName(trimmedAssignmentName)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(Assignment.MESSAGE_ASSIGNMENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return trimmedAssignmentName;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses a {@code String assignmentPercentage}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static double parseAssignmentPercentage(String assignmentPercentage) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        double trimmedAssignmentPercentage \u003d Double.parseDouble(assignmentPercentage.trim());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Assignment.isValidAssignmentPercentage(trimmedAssignmentPercentage)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(Assignment.MESSAGE_ASSIGNMENT_PERCENTAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return trimmedAssignmentPercentage;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses a {@code String assignmentResult}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static double parseAssignmentResult(String assignmentResult) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        double trimmedAssignmentResult \u003d Double.parseDouble(assignmentResult.trim());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Assignment.isValidAssignmentResult(trimmedAssignmentResult)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(Assignment.MESSAGE_ASSIGNMENT_RESULT_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return trimmedAssignmentResult;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Parses a {@code String modularCredits}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static ModularCredits parseModularCredits(String modularCredits) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        double trimmedModularCredits;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!ModularCredits.isValidModularCredits(modularCredits)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new ParseException(ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            trimmedModularCredits \u003d Double.parseDouble(modularCredits.trim());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new ModularCredits(trimmedModularCredits);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses a {@code String grade}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static double parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        double trimmedGrade \u003d Double.parseDouble(grade.trim());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return trimmedGrade;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Parses a {@code String modularCredits}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static GradePoint parseGradePoint(String gradePoint) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        double trimmedGradePoint;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!GradePoint.isValidGradePoint(gradePoint)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new ParseException(Assignment.MESSAGE_ASSIGNMENT_RESULT_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            trimmedGradePoint \u003d Double.parseDouble(gradePoint.trim());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new GradePoint(trimmedGradePoint);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TodoList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses a {@code String name} into a {@code TaskName}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static TaskName parseTaskName(String name) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!TaskName.isValidTaskName(trimmedName)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(TaskName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new TaskName(trimmedName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static Priority parseTaskPriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert priority !\u003d null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String priorityAllUpperCase \u003d priority.toUpperCase();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        switch(priorityAllUpperCase) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"HIGHEST\"):"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Priority.HIGHEST;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"HIGH\"):"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"NORMAL\"):"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Priority.NORMAL;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"LOW\"):"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static Date parseTaskDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Date(date);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses a {@code String criterion} into a {@code Criterion}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the given {@code criterion} is invalid."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static Criterion parseTaskCriterion(String criterion) throws ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert criterion !\u003d null;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String criterionAllUpperCase \u003d criterion.toUpperCase();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        switch(criterionAllUpperCase) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"DESCRIPTION\"):"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"DESC\"):"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Criterion.NAME;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"DATE\"):"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"DEADLINE\"):"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Criterion.DATE;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"PRIORITY\"):"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case(\"PRIO\"):"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Criterion.PRIORITY;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(Criterion.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 82,
      "murtubak": 79,
      "-": 90,
      "jonasngs": 20,
      "davidcaiqifan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PrefixPosition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class PrefixPosition {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private int startPosition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    int getStartPosition() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return startPosition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Prefix getPrefix() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SchedulerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.AddEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.DeleteEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.EditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.FindEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.ViewEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.schedulerparsers.AddEventParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.schedulerparsers.DeleteEventParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.schedulerparsers.EditEventParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.schedulerparsers.FindEventParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.schedulerparsers.ViewEventParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the parser in charge for Scheduler related commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class SchedulerParser implements FeatureParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new AddEventParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new EditEventParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new DeleteEventParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ViewEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ViewEventParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case FindEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new FindEventParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TodoListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.EditTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.FindTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.HelpTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.ListTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.ResetTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.ViewTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.AddTaskParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.CompleteTaskParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.DeleteTaskParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.EditTaskParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.FindTaskParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.ResetTaskParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.todolistparsers.ViewTaskParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class TodoListParser implements FeatureParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new AddTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new EditTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new DeleteTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case FindTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new FindTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case ResetTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new ResetTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case CompleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new CompleteTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case HelpTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new HelpTaskCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ViewTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ViewTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //case AddAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //return new AddAssignmentParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 10,
      "MatthiasLHK": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contactlistparsers/AddContactParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.contactlistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.AddContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddContactParser implements Parser\u003cAddContactCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new ArgumentTokenizer(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_TELEGRAM, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Telegram telegram \u003d ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact contact \u003d new Contact(name, email, telegram, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new AddContactCommand(contact);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 3,
      "-": 41,
      "jonasngs": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contactlistparsers/ContactListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.logic.parser.contactlistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.DeleteContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.EditContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.FindContactCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.HelpContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.ListContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.FeatureParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ContactListParser implements FeatureParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case AddContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new AddContactParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case EditContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new EditContactParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case DeleteContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new DeleteContactParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            //return new ClearCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case FindContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new FindContactParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case ListContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ListContactCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            //return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case HelpContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new HelpContactCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 67,
      "jonasngs": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contactlistparsers/DeleteContactParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.contactlistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.DeleteContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Parses input arguments and creates a new DeleteContactCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteContactParser implements Parser\u003cDeleteContactCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteContactCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and returns a DeleteContactCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DeleteContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11,
      "jonasngs": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contactlistparsers/EditContactParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.contactlistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.EditContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.EditContactDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Parses input arguments and creates a new EditContactCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditContactParser implements Parser\u003cEditContactCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditContactCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and returns an EditContactCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public EditContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_TELEGRAM);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        EditContactDescriptor editContactDescriptor \u003d new EditContactDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            editContactDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            editContactDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TELEGRAM).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            editContactDescriptor.setTelegram(ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editContactDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!editContactDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new EditContactCommand(index, editContactDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 5,
      "-": 57,
      "jonasngs": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contactlistparsers/FindContactParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.contactlistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.contactlistcommands.FindContactCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Parses input arguments and creates a new FindContactCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindContactParser implements Parser\u003cFindContactCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public FindContactCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gradetrackerparsers/AddAssignmentParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.parser.gradetrackerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_NEW_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERCENTAGE_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESULT_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AddAssignmentParser implements Parser\u003cAddAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public AddAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Assignment newAssignment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String moduleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME, PREFIX_ADD_NEW_ASSIGNMENT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                PREFIX_PERCENTAGE_ASSIGNMENT, PREFIX_RESULT_ASSIGNMENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADD_NEW_ASSIGNMENT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                PREFIX_PERCENTAGE_ASSIGNMENT, PREFIX_RESULT_ASSIGNMENT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get()).fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String assignmentName \u003d ParserUtil.parseAssignmentName(argMultimap.getValue(PREFIX_ADD_NEW_ASSIGNMENT).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        double assignmentPercentage \u003d ParserUtil.parseAssignmentPercentage("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                argMultimap.getValue(PREFIX_PERCENTAGE_ASSIGNMENT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        double assignmentResult \u003d ParserUtil.parseAssignmentResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                argMultimap.getValue(PREFIX_RESULT_ASSIGNMENT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        newAssignment \u003d new Assignment(assignmentName, assignmentPercentage, assignmentResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new AddAssignmentCommand(moduleName, newAssignment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gradetrackerparsers/AddGradeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.parser.gradetrackerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.AddGradeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AddGradeParser implements Parser\u003cAddGradeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public AddGradeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Grade newGrade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String moduleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME, PREFIX_GRADE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GRADE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGradeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get()).fullName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        double grade \u003d ParserUtil.parseGrade("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                argMultimap.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new AddGradeCommand(moduleName, new Grade(grade));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gradetrackerparsers/DeleteAssignmentParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.parser.gradetrackerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class DeleteAssignmentParser implements Parser\u003cDeleteAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public DeleteAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ModuleName moduleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    DeleteAssignmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new NoSuchElementException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    DeleteAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new DeleteAssignmentCommand(index, moduleName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gradetrackerparsers/EditAssignmentParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.parser.gradetrackerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.gradetrackercommands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class EditAssignmentParser implements Parser\u003cEditAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public EditAssignmentCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/AddModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULAR_CREDITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME, PREFIX_ZOOM_LINK, PREFIX_TAG,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                PREFIX_MODULAR_CREDITS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ModularCredits modularCredits;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULAR_CREDITS)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            modularCredits \u003d ParserUtil.parseModularCredits(argMultimap.getValue(PREFIX_MODULAR_CREDITS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            modularCredits \u003d new ModularCredits();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ZOOM_LINK).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            ZoomLink zoomLink \u003d ParserUtil.parseZoomLink(argMultimap.getValue(PREFIX_ZOOM_LINK).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            module \u003d new Module(moduleName, zoomLink, tagList, modularCredits);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            module \u003d new Module(moduleName, tagList, modularCredits);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // return new AddCommand(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //Person person \u003d new Person(name, email, tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11,
      "murtubak": 11,
      "-": 30,
      "jonasngs": 10,
      "davidcaiqifan": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/AddZoomLinkParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddZoomLinkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddZoomLinkParser implements Parser\u003cAddZoomLinkCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public AddZoomLinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_ZOOM_LINK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    AddZoomLinkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ZOOM_LINK)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddZoomLinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ZoomLink zoomLink \u003d ParserUtil.parseZoomLink(argMultimap.getValue(PREFIX_ZOOM_LINK).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new AddZoomLinkCommand(index.getZeroBased(), zoomLink);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8,
      "murtubak": 43,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/DeleteModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteModuleParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new DeleteModuleCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/EditModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE_POINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULAR_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.EditModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.EditModuleDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.EditTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditModuleParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME, PREFIX_ZOOM_LINK,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                PREFIX_TAG, PREFIX_MODULAR_CREDITS, PREFIX_GRADE_POINT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        /*if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            editModuleDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            editModuleDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editModuleDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        /*if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            editModuleDescriptor.setModuleName(ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ZOOM_LINK).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            editModuleDescriptor.setZoomLink(ParserUtil.parseZoomLink(argMultimap.getValue(PREFIX_ZOOM_LINK).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULAR_CREDITS).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            editModuleDescriptor.setModularCredits(ParserUtil"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .parseModularCredits(argMultimap.getValue(PREFIX_MODULAR_CREDITS).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GRADE_POINT).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            editModuleDescriptor.setGradePoint(ParserUtil"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .parseGradePoint(argMultimap.getValue(PREFIX_GRADE_POINT).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ParseException(EditModuleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new EditModuleCommand(index, editModuleDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "MatthiasLHK": 9,
      "murtubak": 28,
      "-": 45,
      "jonasngs": 2,
      "davidcaiqifan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/RedoParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.RedoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Parses input arguments and creates a new RedoCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class RedoParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns a RedoCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public RedoCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new RedoCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/UndoParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.UndoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Parses input arguments and creates a new UndoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class UndoParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns a UndoCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public UndoCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new UndoCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/modulelistparsers/ViewModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.modulelistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.ViewModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewModuleParser implements Parser\u003cViewModuleCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ViewModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return new ViewModuleCommand(moduleName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 10,
      "murtubak": 23,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedulerparsers/AddEventParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.schedulerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.AddEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddEventParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public AddEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedulerparsers/DeleteEventParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.schedulerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.DeleteEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteEventParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public DeleteEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedulerparsers/EditEventParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.schedulerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.EditEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditEventParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EditEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedulerparsers/FindEventParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.schedulerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.FindEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindEventParser implements Parser\u003cFindEventCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public FindEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/schedulerparsers/ViewEventParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.schedulerparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.schedulercommands.ViewEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewEventParser implements Parser\u003cViewEventCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ViewEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/AddTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.AddTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddTaskParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AddTaskParser.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public AddTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        logger.info(\"User input is: \" + userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(userInput, PREFIX_NAME, PREFIX_TAG, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            PREFIX_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.warning(\"User input does not contain prefix for name which is compulsory for creating task.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert argMultimap.getValue(PREFIX_NAME).isPresent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        TaskName taskName \u003d ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        task \u003d new Task(taskName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.info(\"Tag field is present\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Set\u003cTag\u003e taskTags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            task \u003d task.setTags(taskTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.info(\"Priority field is present.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Priority priority \u003d ParserUtil.parseTaskPriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            task \u003d task.setPriority(priority);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            logger.info(\"Date field is present.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Date date \u003d ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            task \u003d task.setDate(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 76,
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/CompleteTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Parses input arguments and creates a new CompleteTaskCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class CompleteTaskParser implements Parser\u003cCompleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * and returns a CompleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public CompleteTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new CompleteTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/DeleteTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteTaskParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public DeleteTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 19,
      "MatthiasLHK": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/EditTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.EditTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.EditTaskDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditTaskParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EditTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ArgumentTokenizer tokenizer \u003d new ArgumentTokenizer(userInput, PREFIX_NAME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            PREFIX_TAG, PREFIX_PRIORITY, PREFIX_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ArgumentMultimap argMultimap \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil.parseTaskPriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editTaskDescriptor.setDate(ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 77,
      "MatthiasLHK": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/FindTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.FindTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindTaskParser implements Parser\u003cFindTaskCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public FindTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/ResetTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.ResetTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Parses input arguments and creates a new ResetTaskCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class ResetTaskParser implements Parser\u003cResetTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ResetTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * and returns a ResetTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ResetTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new ResetTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResetTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/SortTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.SortTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Criterion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.comparator.TaskComparatorByDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.comparator.TaskComparatorByName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.comparator.TaskComparatorByPriority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Parses input arguments and creates a new SortTaskCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class SortTaskParser implements Parser\u003cSortTaskCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * and returns an SortTaskCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public SortTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String[] splittedInput \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Comparator\u003cTask\u003e comparator \u003d parseReversedComparatorForSort(splittedInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new SortTaskCommand(comparator);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Comparator\u003cTask\u003e parseComparatorForSort(String input) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Criterion criterion \u003d ParserUtil.parseTaskCriterion(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        switch(criterion) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case NAME:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new TaskComparatorByName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case PRIORITY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new TaskComparatorByPriority();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case DATE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return new TaskComparatorByDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(Criterion.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Comparator\u003cTask\u003e parseReversedComparatorForSort(String[] splitInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert splitInput.length \u003e\u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (splitInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return parseComparatorForSort(splitInput[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!splitInput[0].equals(\"r\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new ParseException(\"Format should be in order i.e. [r] [CRITERION]\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return parseComparatorForSort(splitInput[1]).reversed();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/todolistparsers/ViewTaskParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.logic.parser.todolistparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.todolistcommands.ViewTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewTaskParser implements Parser\u003cViewTaskCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ViewTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.UniqueContactList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Wraps all data at the contact list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ContactList implements ReadOnlyContactList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final UniqueContactList contacts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a Contact list using the Contacts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactList(ReadOnlyContactList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * * Resets the existing data of this {@code ContactList} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void resetData(ReadOnlyContactList newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setContact(newData.getContactList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if a contact with the same identity as {@code contact} exists in the contact list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contacts.contains(contact);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a contact to the contact list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact must not already exist in the contact list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addContact(Contact m) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.add(m);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the contents of the contact list with {@code contact}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code contact} must not contain duplicate contact."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContact(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contacts.setContacts(contacts);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the given contact {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code target} must exist in the contactlist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * contact existing in the contactlist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(editedContact);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.setContact(target, editedContact);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes {@code key} from this {@code ContactList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code key} must exist in the contactlist."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeContact(Contact key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contacts.asUnmodifiableObservableList().size() + \" contacts\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ObservableList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contacts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof ContactList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 contacts.equals(((ContactList) other).contacts));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contacts.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Predicate\u003cContact\u003e PREDICATE_SHOW_ALL_CONTACTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModuleList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces module list data with the data in {@code modulelist}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void setModuleList(ReadOnlyModuleList moduleList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Returns the ModuleList */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    ReadOnlyModuleList getModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the module list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The module must exist in the module list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code module} must not already exist in the module list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code target} must exist in the module list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the module."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Saves the current module list state in history."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void commitModuleList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Restores the previous module list state from history."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void undoModuleList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Restores the previously undone module list state from history."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void redoModuleList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ContactList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces contact list data with the data in {@code contactlist}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void setContactList(ReadOnlyContactList contactList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Returns the ContactList */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    ReadOnlyContactList getContactList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if a contact with the same identity as {@code contact} exists in the contact list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    boolean hasContact(Contact contact);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Deletes the given contact."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact must exist in the contact list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void deleteContact(Contact target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds the given contact."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code contact} must not already exist in the contact list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void addContact(Contact contact);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the given contact {@code target} with {@code editedContact}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code target} must exist in the contact list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another existing"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * contact in the contact list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void setContact(Contact target, Contact editedContact);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Returns an unmodifiable view of the filtered contact list */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Updates the filter of the filtered contact list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void updateFilteredContactList(Predicate\u003cContact\u003e predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the file path of the contact list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return Path contact list file path."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Path getContactListFilePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TodoList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces todo list data with the data in {@code todolist}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    void setTodoList(ReadOnlyTodoList todoList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /** Returns the TodoList */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    ReadOnlyTodoList getTodoList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if a task with the same name, date, and type as {@code task} exists in the todo list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The task must exist in the todo list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code task} must not already exist in the todo list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code target} must exist in the todo list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The task name of {@code editedTask} must not be the same as another existing task in the todo list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /** Returns an unmodifiable view of the filtered todo list */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Updates the filter of the filtered todo list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    void updateFilteredTodoList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /** Returns an unmodifiable view of the filtered todo list */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    ObservableList\u003cTask\u003e getSortedTodoList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Updates the filter of the filtered todo list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    void updateSortedTodoList(Comparator\u003cTask\u003e comparator);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 37,
      "MatthiasLHK": 7,
      "-": 85,
      "jonasngs": 71,
      "davidcaiqifan": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ModuleList moduleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final VersionedModuleList versionedModuleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ContactList contactList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final TodoList todoList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final FilteredList\u003cContact\u003e filteredContacts;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final SortedList\u003cTask\u003e sortedTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModelManager(ReadOnlyModuleList moduleList, ReadOnlyContactList contactList, ReadOnlyTodoList todoList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireAllNonNull(moduleList, todoList, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        logger.fine(\"Initializing with module list: \" + moduleList + \" and todo list\" + todoList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.moduleList \u003d new ModuleList(moduleList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.versionedModuleList \u003d new VersionedModuleList(moduleList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contactList \u003d new ContactList(contactList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.todoList \u003d new TodoList(todoList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        filteredModules \u003d new FilteredList\u003cModule\u003e(this.moduleList.getModuleList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        filteredContacts \u003d new FilteredList\u003cContact\u003e(this.contactList.getContactList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003cTask\u003e(this.todoList.getTodoList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        sortedTasks \u003d new SortedList\u003cTask\u003e(this.todoList.getTodoList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this(new ModuleList(), new ContactList(), new TodoList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return userPrefs.getModuleListFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        userPrefs.setModuleListFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setModuleList(ReadOnlyModuleList moduleList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.moduleList.resetData(moduleList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return moduleList.hasModule(module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        moduleList.removeModule(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        moduleList.addModule(module);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        moduleList.setModule(target, editedModule);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void commitModuleList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        versionedModuleList.commit(moduleList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void undoModuleList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        versionedModuleList.undo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        setModuleList(versionedModuleList.getCurrentModuleList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void redoModuleList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        versionedModuleList.redo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        setModuleList(versionedModuleList.getCurrentModuleList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Contact List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContactList(ReadOnlyContactList contactList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contactList.resetData(contactList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ReadOnlyContactList getContactList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contactList.hasContact(contact);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contactList.removeContact(target);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contactList.addContact(contact);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contactList.setContact(target, editedContact);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Path getContactListFilePath() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return userPrefs.getContactListFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Todo List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTodoList(ReadOnlyTodoList todoList) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.todoList.resetData(todoList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ReadOnlyTodoList getTodoList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return todoList.hasTask(task);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoList.removeTask(target);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoList.addTask(task);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        updateFilteredTodoList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Contact} backed by the internal list of"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return filteredContacts;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        filteredContacts.setPredicate(predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void updateFilteredTodoList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ObservableList\u003cTask\u003e getSortedTodoList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return sortedTasks;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void updateSortedTodoList(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        sortedTasks.setComparator(comparator);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return moduleList.equals(other.moduleList)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                \u0026\u0026 filteredContacts.equals(other.filteredContacts)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                \u0026\u0026 sortedTasks.equals(other.sortedTasks);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 88,
      "MatthiasLHK": 6,
      "-": 125,
      "jonasngs": 73,
      "davidcaiqifan": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ModuleList implements ReadOnlyModuleList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ModuleList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ModuleList(ReadOnlyModuleList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * * Resets the existing data of this {@code ModuleList} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void resetData(ReadOnlyModuleList newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setModule(newData.getModuleList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the module list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a module to the module list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The module must not already exist in the module list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        modules.add(m);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the contents of the module list with {@code module}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code module} must not contain duplicate module."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setModule(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code target} must exist in the modulelist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the modulelist."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes {@code key} from this {@code ModuleList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code key} must exist in the modulelist."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof ModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 modules.equals(((ModuleList) other).modules));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "jonasngs": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Unmodifiable view of a contact list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public interface ReadOnlyContactList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns an unmodifiable view of the contact list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * This list will not contain any duplicate contacts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    ObservableList\u003cContact\u003e getContactList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Unmodifiable view of a module list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public interface ReadOnlyModuleList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTodoList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Unmodifiable view of a todo list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public interface ReadOnlyTodoList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an unmodifiable view of the todo list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    ObservableList\u003cTask\u003e getTodoList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Path getContactListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getTodoListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "jonasngs": 2,
      "davidcaiqifan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TodoList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.UniqueTodoList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.comparator.TaskComparatorByDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.comparator.TaskComparatorByName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.comparator.TaskComparatorByPriority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Wraps all data at the todo list level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TodoList implements ReadOnlyTodoList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final UniqueTodoList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks \u003d new UniqueTodoList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public TodoList() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates a TodoList using the tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public TodoList(ReadOnlyTodoList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * * Resets the existing data of this {@code TodoList} with {@code newData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void resetData(ReadOnlyTodoList newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        setTask(newData.getTodoList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    //// task-level operation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if a task with the same name as {@code tasks} exists in the todo list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Adds a task to the todo list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The task must not already exist in the todo list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces the contents of the todo list with {@code tasks}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTask(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code target} must exist in the todo list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The name of the task {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * existing task in the todo list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Removes {@code key} from this {@code TodoList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code key} must exist in the todo list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sort the list by name."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks.sort(new TaskComparatorByName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sort the list by date."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks.sort(new TaskComparatorByDate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sort the list by priority."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void sortByPriority() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        tasks.sort(new TaskComparatorByPriority());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ObservableList\u003cTask\u003e getTodoList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || (other instanceof TodoList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 tasks.equals(((TodoList) other).tasks));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private Path moduleListFilePath \u003d Paths.get(\"data\" , \"moduleList.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Path contactListFilePath \u003d Paths.get(\"data\" , \"contactList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private Path todoListFilePath \u003d Paths.get(\"data\" , \"todoList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        setModuleListFilePath(newUserPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setContactListFilePath(newUserPrefs.getContactListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Path getContactListFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contactListFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getTodoListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return todoListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void setModuleListFilePath(Path moduleListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(moduleListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.moduleListFilePath \u003d moduleListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContactListFilePath(Path contactListFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(contactListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contactListFilePath \u003d contactListFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void setTodoListFilePath(Path todoListFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(todoListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.todoListFilePath \u003d todoListFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 moduleListFilePath.equals(o.moduleListFilePath)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 contactListFilePath.equals(o.contactListFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return Objects.hash(guiSettings, moduleListFilePath, contactListFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + moduleListFilePath + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        sb.append(contactListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "jonasngs": 16,
      "davidcaiqifan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class VersionedModuleList extends ModuleList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private List\u003cReadOnlyModuleList\u003e moduleListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates a versioned module list using the module lists in the {@code toBeCopied}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param toBeCopied"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public VersionedModuleList(ReadOnlyModuleList toBeCopied) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        super(toBeCopied);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        moduleListStateList.add(toBeCopied);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Saves the current module list state in history."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void commit(ModuleList moduleList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        moduleListStateList.subList(this.currentStatePointer + 1, moduleListStateList.size()).clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        moduleListStateList.add(new ModuleList(moduleList));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.currentStatePointer +\u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Restores the previous module list state from history."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        assert !isIndexZero() : \"Assertion error, there are no instructions to undo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.currentStatePointer -\u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Restores the previously undone module list state from history."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        assert !isLastIndex() : \"Assertion error, there are no instructions to redo\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.currentStatePointer +\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean isIndexZero() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return currentStatePointer \u003d\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean isLastIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return currentStatePointer \u003e\u003d moduleListStateList.size() - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns the module list the current state pointer is pointing to in the form"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * of an observable list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ReadOnlyModuleList getCurrentModuleList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleListStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a contact in the contact list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Telegram telegramUsername;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Contact(Name name, Email email, Telegram telegramUsername, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(name, email, telegramUsername, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.telegramUsername \u003d telegramUsername;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Telegram getTelegramUsername() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.telegramUsername;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if both contacts of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isSameContact(Contact otherPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherPerson.getTelegramUsername().equals(getTelegramUsername());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if both contacts have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * This defines a stronger notion of equality between two contacts."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!(other instanceof Contact)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact otherPerson \u003d (Contact) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherPerson.getTelegramUsername().equals(getTelegramUsername())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return Objects.hash(name, email, telegramUsername, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .append(\" Telegram: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .append(getTelegramUsername())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 21,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a Contact\u0027s email in the contact list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a Contact\u0027s name in the contact list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cContact\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean test(Contact person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Telegram.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a Contact\u0027s telegram in the contact list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTelegram(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Telegram {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \"Telegram username should be at least 5 characters long and should only contain \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"alphanumeric characters and underscore, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Constraints for a telegram username as specified by the Telegram application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String USERNAME_REGEX \u003d \"[a-zA-Z0-9_]{5,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"@\" + USERNAME_REGEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Telegram username. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public final String telegramUsername;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Telegram object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param telegramUsername Telegram username."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Telegram(String telegramUsername) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.telegramUsername \u003d telegramUsername;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if a given string is a valid telegram username."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static boolean isValidTelegram(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.telegramUsername;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof Telegram // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 this.telegramUsername.equals(((Telegram) other).telegramUsername)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.telegramUsername.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/UniqueContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * A list of contacts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * A contact is considered unique by comparing using {@code Contact#isSameContact(Contact)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * As such, adding and updating of contacts uses Contact#isSameContact(Contact) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * so as to ensure that the contact being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * the UniqueContactList. However, the removal of a contact uses Contact#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * as to ensure that the contact with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * @see Contact#isSameContact(Contact)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class UniqueContactList implements Iterable\u003cContact\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ObservableList\u003cContact\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ObservableList\u003cContact\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if the list contains an equivalent contact as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean contains(Contact toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameContact);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a contact to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void add(Contact toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the contact {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact identity of {@code editedContact} must not be the same as another existing contact in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!target.isSameContact(editedContact) \u0026\u0026 contains(editedContact)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        internalList.set(index, editedContact);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes the equivalent contact from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The contact must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void remove(Contact toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContacts(UniqueContactList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the contents of this list with {@code contacts}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setContacts(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(contacts);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!contactsAreUnique(contacts)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        internalList.setAll(contacts);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ObservableList\u003cContact\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Iterator\u003cContact\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof UniqueContactList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueContactList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if {@code contacts} contains only unique contacts."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private boolean contactsAreUnique(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (int i \u003d 0; i \u003c contacts.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int j \u003d i + 1; j \u003c contacts.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (contacts.get(i).isSameContact(contacts.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 49,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/exceptions/ContactNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ContactNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/exceptions/DuplicateContactException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DuplicateContactException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DuplicateContactException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents an Event to that keep tracks of the start and end time and date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final EventName name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final EventTime time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a Event object with the specified name and the start and end timings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Event(EventName name, EventTime time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert(name !\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EventName getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EventTime getTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return Collections.unmodifiableSet(this.tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns True if the two events have at least one field that is different, ignoring the Tags."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * This defines a weaker notion of equality between two Events."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param event Event to be compared."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean if the two Events are the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isSameEvent(Event event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (this \u003d\u003d event) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (event \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return this.getName().equals(event.getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    \u0026\u0026 this.getTime().equals(event.getTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns True if the two Events are exactly the same, even the Tags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * This defines a stronger notion of equality between the two Events."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param other Event to be compared."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean if the two Events are the same."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return this.getName().equals(otherEvent.getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    \u0026\u0026 this.getTime().equals(otherEvent.getTime())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    \u0026\u0026 this.getTags().equals(otherEvent.getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return Objects.hash(this.name, this.time, this.tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        builder.append(\" Event Name: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(\" Time/Date: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a Event\u0027s name in the Scheduler."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a EventName object that represents the name of a Event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EventName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert(name !\u003d null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean isValidName(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return name.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean equals(Object otherName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (otherName \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (this \u003d\u003d otherName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return otherName instanceof EventName"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    || this.name.equals(((EventName) otherName).getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the container that stores the start and end time of an Event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EventTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final LocalDateTime end;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an EventTime object that stores the start and end time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param start start time and date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param end end time and date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public EventTime(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.start;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        builder.append(\"Start time \u0026 date: \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(getStart())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(\"End time \u0026 date: \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                .append(getEnd());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean equals(Object otherTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (this \u003d\u003d otherTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (otherTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (otherTime instanceof EventTime) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            EventTime other \u003d (EventTime) otherTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return this.getStart().isEqual(other.getStart())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    \u0026\u0026 this.getEnd().isEqual(other.getEnd());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return Objects.hash(this.start, this.end);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventDuplicateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Throws this error when a duplicate event is being created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EventDuplicateException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Throws when the requested Event is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EventNotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventOverlapException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Throws when two Events have overlapping timings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EventOverlapException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModularCredits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class ModularCredits {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            \"Modular Credits should be in the form of an number and cannot be less than zero.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final double DEFAULT_MODULAR_CREDITS \u003d 4.0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public final double moduleCredits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code ModularCredits}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param modularCredits A number in string form"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ModularCredits(double modularCredits) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(modularCredits);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        checkArgument(isValidModularCredits(Double.toString(modularCredits)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.moduleCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code ModularCredits} with the default modular credits value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ModularCredits() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        moduleCredits \u003d DEFAULT_MODULAR_CREDITS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns true if a given double is a valid modular credits value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean isValidModularCredits(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        double convertedModuleCredits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            convertedModuleCredits \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return convertedModuleCredits \u003e\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Double.toString(moduleCredits);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                \u0026\u0026 moduleCredits \u003d\u003d (((ModularCredits) other).moduleCredits)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Grade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents the Module creation class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final ModuleName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final ZoomLink zoomLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final GradeTracker gradeTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final ModularCredits modularCredits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param zoomLink zoom link attached to module"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param gradeTracker grade tracker attached to module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param tags tag attached to module"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module(ModuleName name, ZoomLink zoomLink, GradeTracker gradeTracker, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTracker \u003d gradeTracker;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d new ModularCredits();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param zoomLink zoom link attached to module"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param gradeTracker grade tracker attached to module"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param tags tag attached to module"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module(ModuleName name, ZoomLink zoomLink, GradeTracker gradeTracker, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                  ModularCredits modularCredits) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradeTracker \u003d gradeTracker;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param zoomLink zoom link attached to module"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param tags tag attached to module"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module(ModuleName name, ZoomLink zoomLink, Set\u003cTag\u003e tags, ModularCredits modularCredits) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param zoomLink zoom link attached to module"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module(ModuleName name, ZoomLink zoomLink, ModularCredits modularCredits) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.zoomLink \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d new ModularCredits();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Module(ModuleName name) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.zoomLink \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d new ModularCredits();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param zoomLink zoom link attached to module"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module(ModuleName name, ZoomLink zoomLink) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d new ModularCredits();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param tags tag attached to module"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param modularCredits modular credits for module"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module(ModuleName name, Set\u003cTag\u003e tags, ModularCredits modularCredits) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.zoomLink \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d modularCredits;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param gradeTracker grade tracker attached to module"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Module(ModuleName name, GradeTracker gradeTracker) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.zoomLink \u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeTracker \u003d gradeTracker;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d new ModularCredits();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the module name."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return ModuleName module name."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public ModuleName getName() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assert this.name !\u003d null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the zoom link of the module."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return ZoomLink zoom link."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public ZoomLink getLink() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.zoomLink;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds the zoom link for this module."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param zoomLink zoom link."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Module a new Module with the input zoom link."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Module addZoomLink(ZoomLink zoomLink) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Module(this.getName(), zoomLink, this.gradeTracker, this.tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns the grades being tracked for this module."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return grade tracker."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public GradeTracker getGradeTracker() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return gradeTracker;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Sets the GradeTracker for this module."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return the module."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Module setGradeTracker(GradeTracker gradeTracker) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new Module(this.getName(), zoomLink, gradeTracker, this.tags);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns the modular credits for this module"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ModularCredits getModularCredits() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return this.modularCredits;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Adds an assignment to the GradeTracker of the module."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param assignment assignment to add to grade tracker."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return Module a new module with the assignment added if it is different."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Module addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!gradeTracker.isDuplicateAssignment(assignment)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            gradeTracker.addAssignment(assignment);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return new Module(name, zoomLink, gradeTracker, tags);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Adds a grade to the GradeTracker of the module."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param grade grade to add to grade tracker."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return Module a new module with the grade added."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Module addGrade(Grade grade) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (Grade.isValidGrade(grade.gradeResult)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            gradeTracker.setGrade(grade);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return new Module(name, zoomLink, gradeTracker, tags);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if both modules have the same name."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 otherModule.getName().equals(getName());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns true if module is completed by checking whether the module has a completed tag."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return this.tags.stream().map(x -\u003e x.equals(new Tag(\"completed\")))"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                .reduce(false, (x, y) -\u003e x || y);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return String.format(\"The zoom link for %s is %s\", getName(), getLink());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return otherModule.getName().equals(getName())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherModule.getLink().equals(getLink())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 otherModule.getModularCredits().equals((getModularCredits()))"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherModule.getGradeTracker().equals(getGradeTracker());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 90,
      "jonasngs": 84,
      "davidcaiqifan": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents a Module\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs a {@code ModuleName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public ModuleName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 fullName.equals(((ModuleName) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the Module being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setModule(Module target, Module editedPodule) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireAllNonNull(target, editedPodule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!target.isSameModule(editedPodule) \u0026\u0026 contains(editedPodule)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        internalList.set(index, editedPodule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 19,
      "jonasngs": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ZoomLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents a Module\u0027s Zoom Link in the Module List."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidZoomLink(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class ZoomLink {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Zoom links should be of the format www.zoom.com\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /*      + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param zoomLink A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public ZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(zoomLink);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        checkArgument(isValidZoomLink(zoomLink), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        value \u003d zoomLink;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidZoomLink(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || (other instanceof ZoomLink // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 value.equals(((ZoomLink) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the link stored in the object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String zoom link."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getLink() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8,
      "murtubak": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents an assignment in the Grade Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAssignmentName(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Assignment names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_PERCENTAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Assignment percentage should be in the range 0 - 100\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_RESULT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Assignment result should be in the range 0.00 to 1.00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public final String assignmentName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public final double assignmentPercentage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public final double assignmentResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs a {@code Assignment}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param assignmentName name of the assignment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param assignmentPercentage the percentage of the total grade that this assignment takes up."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param assignmentResult the result achieved for this assignment. Range from 0 to 1."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Assignment(String assignmentName, double assignmentPercentage, double assignmentResult) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(assignmentName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        checkArgument(isValidAssignmentName(assignmentName), MESSAGE_ASSIGNMENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        checkArgument(isValidAssignmentPercentage(assignmentPercentage), MESSAGE_ASSIGNMENT_PERCENTAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        checkArgument(isValidAssignmentResult(assignmentResult), MESSAGE_ASSIGNMENT_RESULT_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentPercentage \u003d assignmentPercentage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentResult \u003d assignmentResult;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Default constructor for Assignment."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Assignment() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignmentName \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignmentPercentage \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignmentResult \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if a given string is a valid assignment name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidAssignmentName(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if a given double is a valid assignment percentage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidAssignmentPercentage(double test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (test \u003c\u003d 100 \u0026\u0026 test \u003e\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if a given string is a valid assignment result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidAssignmentResult(double test) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (test \u003c\u003d 1 \u0026\u0026 test \u003e\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public String getAssignmentName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return assignmentName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public double getPercentageOfGrade() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return assignmentPercentage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public double getResult() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return assignmentResult;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if both assignments have the same name."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * This defines a weaker notion of equality between two assignments."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param otherAssignment other assignment to be compared"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return true if both assignment has the same name."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (this \u003d\u003d otherAssignment) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return getAssignmentName().equals((otherAssignment.getAssignmentName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return String.format(\"Assignment %s is %.2f of the total grade and the result is %.2f\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                assignmentName, assignmentPercentage, assignmentResult);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || (other instanceof Assignment // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 assignmentName.equals(((Assignment) other).assignmentName))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 assignmentResult \u003d\u003d ((Assignment) other).assignmentResult"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 assignmentPercentage \u003d\u003d ((Assignment) other).assignmentPercentage; // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return assignmentName.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/Grade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents a Grade in the Grade Tracker."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Grade should be given as a decimal from 0.00 to 1.00.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public final double gradeResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs a {@code Grade}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param gradeResult A valid grade result."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Grade(double gradeResult) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        checkArgument(isValidGrade(gradeResult), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.gradeResult \u003d gradeResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Checks if the grade can be placed into the grade tracker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param test grade to be checked."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return true if the grade is valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidGrade(double test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (test \u003e\u003d 0 \u0026\u0026 test \u003c\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return Double.toString(this.gradeResult);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || (other instanceof Grade // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 gradeResult \u003d\u003d ((Grade) other).gradeResult); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/GradePoint.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.model.module.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Represents an association class that tracks the CAP for a module"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class GradePoint {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            \"GradePoint should be given as a decimal from 0.00 to 5.00.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public final double gradePoint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code GradePoint}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param gradePoint A valid grade result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public GradePoint(double gradePoint) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        checkArgument(isValidGradePoint(Double.toString(gradePoint)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradePoint \u003d gradePoint;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Checks if the grade point can be placed into the grade tracker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param test grade point to be checked."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @return true if the grade is valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean isValidGradePoint(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        double convertedGradePoint;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            convertedGradePoint \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (convertedGradePoint \u003e\u003d 0 \u0026\u0026 convertedGradePoint \u003c\u003d 5) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Double.toString(this.gradePoint);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                || (other instanceof Grade // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                \u0026\u0026 gradePoint \u003d\u003d ((GradePoint) other).gradePoint); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/GradeTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.comparator.AssignmentNameComparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents an association class that tracks the assignments and grade for a module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class GradeTracker implements ReadOnlyGradeTracker {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_INVALID_GRADE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Grades should be provided in the range from 0.00 to 1.00.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_INVALID_GRADEPOINT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            \"GradePoint should be given as a decimal from 0.00 to 5.00.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            \"Assignments cannot be repeated.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final UniqueAssignmentList assignments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final AssignmentNameComparator comparator \u003d new AssignmentNameComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private GradePoint gradePoint;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates a GradeTracker that stores the assignment, grades and grade point for a module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public GradeTracker() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.grade \u003d new Grade(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        gradePoint \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates a GradeTracker that stores the assignment, grades and grade point for a module."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param gradePoint GradePoint for a completed module"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public GradeTracker(double gradePoint) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.grade \u003d new Grade(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradePoint \u003d new GradePoint(gradePoint);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setGrade(Grade newGrade) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.grade \u003d newGrade;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void setGradePoint(GradePoint newGradePoint) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradePoint \u003d newGradePoint;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cGradePoint\u003e getGradePoint() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Optional.ofNullable(gradePoint);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void addAssignment(Assignment newAssignment) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignments.add(newAssignment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Removes {@code key} from this {@code assignments}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code key} must exist in the assignments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public List\u003cAssignment\u003e getSortedAssignments() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        List\u003cAssignment\u003e sortedAssignments \u003d new SortedList\u003cAssignment\u003e(assignments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                .asUnmodifiableObservableList(), comparator);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return sortedAssignments;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Checks if the Grade Tracker is valid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param gradeTracker grade tracker to check."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return true if the grade tracker is valid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static boolean isValidGradeTracker(GradeTracker gradeTracker) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        boolean areAssignmentsValid \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (Assignment eachAssignment: gradeTracker.assignments) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (!Assignment.isValidAssignmentResult(eachAssignment.assignmentResult)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    \u0026\u0026 Assignment.isValidAssignmentName(eachAssignment.assignmentName)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    \u0026\u0026 Assignment.isValidAssignmentPercentage(eachAssignment.assignmentPercentage)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                areAssignmentsValid \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (Grade.isValidGrade(gradeTracker.grade.gradeResult) \u0026\u0026 areAssignmentsValid) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Checks for duplicated assignments in the module."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param otherAssignment the assignment being checked."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return true if the assignment already exists"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isDuplicateAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (Assignment eachAssignment : assignments) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (eachAssignment.equals(otherAssignment)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 105,
      "davidcaiqifan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/ReadOnlyGradeTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Unmodifiable view of a GradeTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public interface ReadOnlyGradeTracker {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns an unmodifiable view of the assignments in GradeTracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * This list will not contain any duplicate assignments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignments();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/UniqueAssignmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * An assignment is considered unique by comparing using {@code Assignment#isSame(Assignment)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * updating of assignments uses Assignment#isSameAssignment(Assignment) for equality so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * assignment being added or updated is unique in terms of identity in the UniqueAssignmentList. However, the removal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * an assignment uses Assignment#equals(Object) so as to ensure that the assignment with exactly the same fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class UniqueAssignmentList implements Iterable\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssignment);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Adds an assignment to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The assignment must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Replaces the assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The name of the assignment {@code editedAssignment} must not be the same as another"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * existing assignment in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!target.isSameAssignment(editedAssignment) \u0026\u0026 contains(editedAssignment)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        internalList.set(index, editedAssignment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setAssignments(UniqueAssignmentList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Replaces the contents of this list with {@code assignments}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        requireAllNonNull(assignments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!assignmentsAreUnique(assignments)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        internalList.setAll(assignments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Sort the list using the comparator."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param comparator comparator for sorting"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void sort(Comparator\u003c? super Assignment\u003e comparator) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        internalList.sort(comparator);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Iterator\u003cAssignment\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                || (other instanceof UniqueAssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAssignmentList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns true if {@code assignments} contains only unique assignments."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                if (assignments.get(i).isSameAssignment(assignments.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/comparator/AssignmentNameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Comparator to compare two tasks name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AssignmentNameComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Compare two assignments lexicographically."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param assignment first assignment"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param otherAssignment second assignment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return -1 if value of assignment is lexicographically less than value of otherAssignment,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *         0 if both assignment names are the same, and 1 if value of assignment is lexicographically"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *         greater than value of otherAssignment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public int compare(Assignment assignment, Assignment otherAssignment) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return assignment.assignmentName.compareTo(otherAssignment.getAssignmentName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/exceptions/AssignmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/grade/exceptions/DuplicateAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.model.module.grade.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Signals that the operation will result in duplicate assignments (Assignments are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * if they have the same name, type, and date)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public DuplicateAssignmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        super(\"Operation would result in duplicate assignments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Criterion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents the Criterion that is related to tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public enum Criterion {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    DATE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \"There are only 3 criterion that can be chosen: DESCTIPTION(DESC), \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            + \"DEADLINE(DATE), and PRIORITY(PRIO).\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents a date that is related to a Task\u0027s."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * For example, it can be used as a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the format of YYYY-MM-DD.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private static final DateTimeFormatter validDateFormat \u003d DateTimeFormatter.ISO_LOCAL_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param date valid date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.value \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param test given string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if date is valid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return value.equals(((Date) other).value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return value.format(validDateFormat);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents the Priority of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    HIGHEST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    NORMAL,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    LOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \"There are only 4 priority level that can be chosen: HIGHEST, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            + \"HIGH, NORMAL, and LOW.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static Priority getPriority(String priority) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        String inputAllUpperCase \u003d priority.toUpperCase();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        switch (inputAllUpperCase) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case (\"HIGHEST\"):"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return HIGHEST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case (\"HIGH\"):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return HIGH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case (\"NORMAL\"):"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return NORMAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return LOW;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * [method might be used in the future to improve SLAP in ParserUtil if needed]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param test given string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if priority is valid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String inputAllUpperCase \u003d test.toUpperCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        switch(inputAllUpperCase) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case (\"HIGHEST\"):"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case (\"HIGH\"):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case (\"NORMAL\"):"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case (\"LOW\"):"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 35,
      "davidcaiqifan": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents the status of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    COMPLETED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    NOT_COMPLETED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static Status getStatus(String status) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        String inputAllUpperCase \u003d status.toUpperCase();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (inputAllUpperCase \u003d\u003d \"COMPLETED\") {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return COMPLETED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return NOT_COMPLETED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 8,
      "davidcaiqifan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents a Task in the todo list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Guarantees: non-null field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final TaskName name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Initial constructor to avoid having null as arguments."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param name name of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task(TaskName name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.priority \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.status \u003d Status.NOT_COMPLETED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Constructor to support immutability."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param name name of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param tags tags related to the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param priority priority of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param date date of the task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param status status of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task(TaskName name, Set\u003cTag\u003e tags, Priority priority, Date date, Status status) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cTaskName\u003e getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.of(this.name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task setName(TaskName name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Task(name, this.tags, this.priority, this.date, this.status);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        //return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(this.tags).map(Collections::unmodifiableSet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Task(this.name, tags, this.priority, this.date, this.status);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(this.priority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task setPriority(Priority priority) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Task(this.name, this.tags, priority, this.date, this.status);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(this.date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task setDate(Date date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Task(this.name, this.tags, this.priority, date, this.status);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert this.status !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return Optional.ofNullable(this.status);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Task setStatus(Status status) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Task(this.name, this.tags, this.priority, this.date, status);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if both task have the same name."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param otherTask other task to be compared"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if both task has the same name."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this \u003d\u003d otherTask) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return getName().equals((otherTask.getName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if this task has the specified date."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param date the specified date"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if this task has the specified date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean hasSameDate(Date date) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(this.date);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.date.equals(date);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if this task has the specified priority."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param priority the specified priority"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if this task has the specified priority"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean hasSamePriority(Priority priority) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(this.priority);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.priority.equals(priority);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if this task has the specified tag(s)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param tag the specified tag"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if this task has the specified tag(s)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean hasSameTag(Set\u003cTag\u003e tag) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(this.tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.tags.equals(tag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Checks if two tasks are equal."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * This defines a stronger equality between two tasks."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param other other task to be compared"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if both task have the same name, type, priority, date, and status"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 otherTask.getTags().equals(getTags())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 otherTask.getDate().equals(getDate())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 otherTask.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns string representing of the name of the task for the UI."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return string to be displayed in the UI."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String getNameForUi() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert this.name !\u003d null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.name.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns a set representing of the tags of the task for the UI."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return set of tags to be displayed in the UI."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Set\u003cTag\u003e getTagsForUi() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this.tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            HashSet\u003cTag\u003e defaultTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            defaultTags.add(new Tag(\"Tags not provided\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return defaultTags;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return this.tags;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns string representing of the priority of the task for the UI."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return string to be displayed in the UI."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String getPriorityForUi() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this.priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return \"Priority not provided\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return this.priority.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns string representing of the date of the task for the UI."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return string to be displayed in the UI."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String getDateForUi() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return \"Date not provided\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return this.date.toString();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns string representing of the status of the task for the UI."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return string to be displayed in the UI."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String getStatusForUi() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert this.status !\u003d null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.status.toString();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        builder"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\" *Name: \")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(getName().isPresent() ? getName().get() : \"\")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\" *Tag: \")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                //.append(getTags().isPresent() ? getTags().get() : \"\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(getTags().isPresent() ? getTags().get() : \"\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\" *Priority: \")"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(getPriority().isPresent() ? getPriority().get() : \"\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\" *Date: \")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(getDate().isPresent() ? getDate().get() : \"\")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\" *Status: \")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(getStatus().isPresent() ? getStatus().get() : \"\")"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 253,
      "davidcaiqifan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents a Task\u0027s name in the todo list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTaskName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Task name should not be empty or longer than 30 words.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final int MAXIMUM_LENGTH \u003d 30;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Constructs a {@code TaskName}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param taskName valid task name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public TaskName(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.value \u003d taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if a given string is a valid task name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param test given string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return true if task name is valid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static boolean isValidTaskName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return test.length() \u003c\u003d MAXIMUM_LENGTH \u0026\u0026 !test.equals(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof TaskName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return value.equalsIgnoreCase(((TaskName) other).value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Type.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents the type of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    ASSIGNMENT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    TUTORIAL,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    PROJECT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    STUDY,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    DAILY"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTodoList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSame(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * unique in terms of identity in the UniqueTodoList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class UniqueTodoList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The name of the task {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * existing task in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTasks(UniqueTodoList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sort the list using the comparator."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param comparator comparator for sorting"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void sort(Comparator\u003c? super Task\u003e comparator) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        internalList.sort(comparator);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            || (other instanceof UniqueTodoList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTodoList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/comparator/DateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Comparator to compare two dates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class DateComparator implements Comparator\u003cDate\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Compares two dates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param date first date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param otherDate second date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return 1 if date is earlier, 0 if both dates are the same, and -1 if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         otherDate is earlier"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int compare(Date date, Date otherDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return date.getValue().compareTo(otherDate.getValue());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/comparator/TaskComparatorByDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Comparator to compare two Tasks based on their dates."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskComparatorByDate implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Compares two tasks based on date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param task first task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param otherTask second task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return 1 if task has an earlier date, 0 if both tasks have the same date,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         and -1 if otherTask has an earlier date. If one or more of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         does not have a date, return -1 if only the second task does not have"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         a date, 0 if both task do not have a date, and 1 if only the first task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         does not have a date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int compare(Task task, Task otherTask) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cDate\u003e date \u003d task.getDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cDate\u003e otherDate \u003d otherTask.getDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        DateComparator dateComparator \u003d new DateComparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (date.isPresent() \u0026\u0026 otherDate.isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return dateComparator.compare(date.get(), otherDate.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (date.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (otherDate.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/comparator/TaskComparatorByName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Comparator to compare two Tasks based on their name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskComparatorByName implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Compare two Task based on their name, lexicographically."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param task first task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param otherTask second task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return -1 if task\u0027s name is lexicographically less than value of otherTask\u0027s name,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         0 if both task name are the same, and 1 if value of task\u0027s name is lexicographically"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         greater than value of otherTask\u0027s name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int compare(Task task, Task otherTask) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cTaskName\u003e name \u003d task.getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cTaskName\u003e otherName \u003d otherTask.getName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        TaskNameComparator descriptionComparator \u003d new TaskNameComparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // names are compulsory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // no need to check with ifPresent() [?]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return descriptionComparator.compare(name.get(), otherName.get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/comparator/TaskComparatorByPriority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Comparator to compare two Tasks based on their priority."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskComparatorByPriority implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Compares two task based on their priority."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param task first task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param otherTask second task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return -1 if first task has lower priority level than otherTask, 0 if both task have same"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         priority level, and 1 if first task has higher priority level than otherTask"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         If one or more of the task does not have a priority, return -1 if only the second task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         does not have a priority, 0 if both task do not have a priority, and 1 if only the first task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         does not have a priority."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int compare(Task task, Task otherTask) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Optional\u003cPriority\u003e otherPriority \u003d otherTask.getPriority();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (priority.isPresent() \u0026\u0026 otherPriority.isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return priority.get().compareTo(otherPriority.get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (otherPriority.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/comparator/TaskNameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Comparator to compare two tasks name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskNameComparator implements Comparator\u003cTaskName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Compare two TaskName lexicographically."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param name first task name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param otherName second task name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return -1 if value of name is lexicographically less than value of otherName,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         0 if both task name are the same, and 1 if value of name is lexicographically"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         greater than value of otherName"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int compare(TaskName name, TaskName otherName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return name.getValue().compareTo(otherName.getValue());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * name, type, and date)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        super(\"Operation would result in duplicate taskks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Signals that the operation is unable to find the specified task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static Contact[] getSamplePersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new Contact[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            new Contact(new Name(\"Alex Yeoh\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new Telegram(\"@alexyeoh\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            new Contact(new Name(\"Bernice Yu\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new Telegram(\"@bernice\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            new Contact(new Name(\"Charlotte Oliveiro\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new Telegram(\"@charlotte\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            new Contact(new Name(\"David Li\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new Telegram(\"@david\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            new Contact(new Name(\"Irfan Ibrahim\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new Telegram(\"@irfan\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            new Contact(new Name(\"Roy Balakrishnan\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                new Telegram(\"@roybala\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static ReadOnlyContactList getSampleAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList sampleAb \u003d new ModuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (Contact samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // return sampleAb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "jonasngs": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ContactListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ContactList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public interface ContactListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Path getContactListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns ContactList data as a {@link ReadOnlyContactList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Optional\u003cReadOnlyContactList\u003e readContactList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @see #getContactListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Optional\u003cReadOnlyContactList\u003e readContactList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Saves the given {@link ReadOnlyContactList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param contactList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void saveContactList(ReadOnlyContactList contactList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @see #saveContactList(ReadOnlyContactList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void saveContactList(ReadOnlyContactList contactList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAssignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final String assignmentName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final double assignmentPercentage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final double assignmentResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"assignmentName\") String assignmentName,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                             @JsonProperty(\"assignmentPercentage\") double assignmentPercentage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                                 @JsonProperty(\"assignmentResult\") double assignmentResult) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentPercentage \u003d assignmentPercentage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.assignmentResult \u003d assignmentResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignmentName \u003d source.getAssignmentName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignmentPercentage \u003d source.getPercentageOfGrade();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignmentResult \u003d source.getResult();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (assignmentName \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"assignment name\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (Double.isNaN(assignmentPercentage)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"assignment percentage\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (Double.isNaN(assignmentResult)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"assignment result\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Assignment.isValidAssignmentName(assignmentName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(Assignment.MESSAGE_ASSIGNMENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Assignment.isValidAssignmentPercentage(assignmentPercentage)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(Assignment.MESSAGE_ASSIGNMENT_PERCENTAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Assignment.isValidAssignmentResult(assignmentResult)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(Assignment.MESSAGE_ASSIGNMENT_RESULT_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new Assignment(assignmentName, assignmentPercentage, assignmentResult);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedContact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Jackson-friendly version of {@link Contact}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class JsonAdaptedContact {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Contact\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String telegram;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Constructs a {@code JsonAdaptedContact} with the given contact details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public JsonAdaptedContact(@JsonProperty(\"name\") String name, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                              @JsonProperty(\"telegram\") String telegram,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts a given {@code Contact} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public JsonAdaptedContact(Contact source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        telegram \u003d source.getTelegramUsername().telegramUsername;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts this Jackson-friendly adapted contact object into the model\u0027s {@code Contact} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contact."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Contact toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (telegram \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Telegram.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!Telegram.isValidTelegram(telegram)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new IllegalValueException(Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        final Telegram modelTelegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new Contact(modelName, modelEmail, modelTelegram, modelTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "jonasngs": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGradeTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.Grade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.grade.GradePoint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Jackson-friendly version of {@link GradeTracker}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class JsonAdaptedGradeTracker {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"GradeTracker\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final double grade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    //private final Optional\u003cGradePoint\u003e gradePoint;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String gradePoint;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs a {@code JsonAdaptedGradeTracker} with the given Grade Tracker details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public JsonAdaptedGradeTracker(@JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                             @JsonProperty(\"grade\") double grade, @JsonProperty(\"gradepoint\") String gradePoint) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (assignments !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.gradePoint \u003d gradePoint;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Converts a given {@code GradeTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public JsonAdaptedGradeTracker(GradeTracker source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignments.addAll(source.getAssignments().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                .map(JsonAdaptedAssignment::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.grade \u003d source.getGrade().gradeResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        assert source.getGradePoint() !\u003d null : \"Assertion error, gradepoint not defined\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (source.getGradePoint().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            this.gradePoint \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            this.gradePoint \u003d source.getGradePoint().get().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Converts this Jackson-friendly adapted Grade Tracker object into the model\u0027s {@code GradeTracker} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted GradeTracker."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public GradeTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        GradeTracker modelGradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        for (JsonAdaptedAssignment assignment : assignments) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            if (!modelGradeTracker.isDuplicateAssignment(assignment.toModelType())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                modelGradeTracker.addAssignment(assignment.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                throw new IllegalValueException(GradeTracker.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (Double.isNaN(grade)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(GradeTracker.MESSAGE_INVALID_GRADE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        final Grade modelGrade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final GradePoint modelGradePoint;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (gradePoint \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            modelGradePoint \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else if (!GradePoint.isValidGradePoint(gradePoint)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(GradeTracker.MESSAGE_INVALID_GRADEPOINT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            modelGradePoint \u003d new GradePoint(Double.parseDouble(gradePoint));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        modelGradeTracker.setGrade(modelGrade);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        modelGradeTracker.setGradePoint(modelGradePoint);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return modelGradeTracker;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 68,
      "davidcaiqifan": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String zoomLink;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String modularCredits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final JsonAdaptedGradeTracker gradeTracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                             @JsonProperty(\"zoomLink\") String zoomLink,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                             @JsonProperty(\"gradeTracker\") JsonAdaptedGradeTracker storedGradeTracker,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                             @JsonProperty(\"modularCredits\") String storedModularCredits,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (storedGradeTracker \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            this.gradeTracker \u003d new JsonAdaptedGradeTracker(new GradeTracker());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            this.gradeTracker \u003d storedGradeTracker;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modularCredits \u003d storedModularCredits;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (source.getLink() \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            zoomLink \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            zoomLink \u003d source.getLink().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        gradeTracker \u003d new JsonAdaptedGradeTracker(source.getGradeTracker());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        modularCredits \u003d source.getModularCredits().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!ModuleName.isValidName(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final ModuleName modelName \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (zoomLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    ZoomLink.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!ZoomLink.isValidZoomLink(zoomLink)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final ZoomLink modelLink \u003d new ZoomLink(zoomLink);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (gradeTracker \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                    GradeTracker.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        if (!GradeTracker.isValidGradeTracker(gradeTracker.toModelType())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            throw new IllegalValueException(GradeTracker.MESSAGE_INVALID_GRADE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!ModularCredits.isValidModularCredits(modularCredits)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final ModularCredits modelModularCredits \u003d new ModularCredits(Double.parseDouble(modularCredits));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Module(modelName, modelLink, gradeTracker.toModelType(), modelTags, modelModularCredits);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 19,
      "-": 36,
      "jonasngs": 1,
      "davidcaiqifan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.task.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.task.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"tag\") List\u003cJsonAdaptedTag\u003e tags,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                              @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                           @JsonProperty(\"date\") String date, @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        name \u003d source.getName().get().getValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (source.getPriority().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            priority \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            priority \u003d source.getPriority().get().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (source.getDate().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            date \u003d source.getDate().get().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (source.getStatus().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            status \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            status \u003d source.getStatus().get().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (source.getTags().isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            tags.addAll(source.getTags().get().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contact."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    TaskName.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!TaskName.isValidTaskName(name)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(TaskName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final TaskName modelTaskName \u003d new TaskName(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // final Tag modelTag \u003d tag.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final Priority modelPriority \u003d Priority.getPriority(priority);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final Status modelStatus \u003d Status.getStatus(status);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Task(modelTaskName, modelTags, modelPriority, modelDate, modelStatus);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "davidcaiqifan": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonContactListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * A class to access ContactList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class JsonContactListStorage implements ContactListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonContactListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public JsonContactListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Path getContactListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cReadOnlyContactList\u003e readContactList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return readContactList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Similar to {@link #readContactList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cReadOnlyContactList\u003e readContactList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Optional\u003cJsonSerializableContactList\u003e jsonContactList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                filePath, JsonSerializableContactList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!jsonContactList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return Optional.of(jsonContactList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveContactList(ReadOnlyContactList contactList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        saveContactList(contactList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Similar to {@link #saveContactList(ReadOnlyContactList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveContactList(ReadOnlyContactList contactList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireAllNonNull(contactList, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        JsonSerializableContactList contactListJsonFile \u003d new JsonSerializableContactList(contactList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        JsonUtil.saveJsonFile(contactListJsonFile, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "jonasngs": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonModuleListStorage implements ModuleListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonModuleListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return readModuleList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Similar to {@link #readModuleList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Optional\u003cJsonSerializableModuleList\u003e jsonModuleList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                filePath, JsonSerializableModuleList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!jsonModuleList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Optional.of(jsonModuleList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Similar to {@link #saveModuleList(ReadOnlyModuleList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleList(moduleList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "jonasngs": 1,
      "davidcaiqifan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ContactList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * An Immutable ContactList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "@JsonRootName(value \u003d \"contactlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class JsonSerializableContactList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"Contact list contains duplicate contact(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final List\u003cJsonAdaptedContact\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Constructs a {@code JsonSerializableContactList} with the given contacts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public JsonSerializableContactList(@JsonProperty(\"contacts\") List\u003cJsonAdaptedContact\u003e contacts) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contacts.addAll(contacts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts a given {@code ReadOnlyContactList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableContactList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public JsonSerializableContactList(ReadOnlyContactList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.addAll(source.getContactList().stream().map(JsonAdaptedContact::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts this contact list into the model\u0027s {@code ContactList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ContactList contactList \u003d new ContactList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (JsonAdaptedContact jsonAdaptedContact : contacts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Contact contact \u003d jsonAdaptedContact.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (contactList.hasContact(contact)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            contactList.addContact(contact);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "@JsonRootName(value \u003d \"modulelist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "class JsonSerializableModuleList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate moduke(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleList} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonSerializableModuleList(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given {@code ReadOnlyModuleList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonSerializableModuleList(ReadOnlyModuleList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts this module list into the model\u0027s {@code UniqueModuleList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ModuleList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            if (moduleList.hasModule(module)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "jonasngs": 4,
      "davidcaiqifan": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTodoList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * An Immutable TodoList that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "@JsonRootName(value \u003d \"todolist\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonSerializableTodoList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Todo list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code JsonSerializableTodoList} with the given contacts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonSerializableTodoList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given {@code ReadOnlyTodoList} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTodoList}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonSerializableTodoList(ReadOnlyTodoList source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        tasks.addAll(source.getTodoList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts this contact list into the model\u0027s {@code ContactList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public TodoList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        TodoList todoList \u003d new TodoList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            if (todoList.hasTask(task)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            todoList.addTask(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTodoListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonTodoListStorage implements TodoListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTodoListStorage.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonTodoListStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getTodoListFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return readTodoList(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Similar to {@link #readTodoList()}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        assert filePath !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Optional\u003cJsonSerializableTodoList\u003e jsonTodoList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                filePath, JsonSerializableTodoList.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!jsonTodoList.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Optional.of(jsonTodoList.get().toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        saveTodoList(todoList, filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Similar to {@link #saveTodoList(ReadOnlyTodoList)}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        assert todoList !\u003d null \u0026\u0026 filePath !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTodoList(todoList), filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a storage for {@link ModuleList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public interface ModuleListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns ModuleList data as a {@link ReadOnlyModuleList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @see #getModuleListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cReadOnlyModuleList\u003e readModuleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Saves the given {@link ReadOnlyModuleList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param moduleList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveModuleList(ReadOnlyModuleList moduleList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @see #saveModuleList(ReadOnlyModuleList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "jonasngs": 2,
      "davidcaiqifan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public interface Storage extends ModuleListStorage, ContactListStorage, TodoListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveModuleList(ReadOnlyModuleList moduleList) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Path getContactListFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Optional\u003cReadOnlyContactList\u003e readContactList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    void saveContactList(ReadOnlyContactList contactList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getTodoListFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveTodoList(ReadOnlyTodoList todoList) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "jonasngs": 10,
      "davidcaiqifan": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private ModuleListStorage moduleListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private ContactListStorage contactListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private TodoListStorage todoListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ModuleListStorage},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code ContactListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public StorageManager(ModuleListStorage moduleListStorage, ContactListStorage contactListStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                          TodoListStorage todoListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.moduleListStorage \u003d moduleListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contactListStorage \u003d contactListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.todoListStorage \u003d todoListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModuleList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleListStorage.getModuleListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return readModuleList(moduleListStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleListStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        saveModuleList(moduleList, moduleListStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        moduleListStorage.saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ContactList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Path getContactListFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contactListStorage.getContactListFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cReadOnlyContactList\u003e readContactList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return readContactList(contactListStorage.getContactListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Optional\u003cReadOnlyContactList\u003e readContactList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contactListStorage.readContactList(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveContactList(ReadOnlyContactList contactList) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        saveContactList(contactList, contactListStorage.getContactListFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveContactList(ReadOnlyContactList contactList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contactListStorage.saveContactList(contactList, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TodoList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getTodoListFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return todoListStorage.getTodoListFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return readTodoList(todoListStorage.getTodoListFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        logger.fine(\"Attempting to read Todo list data from file: \" + filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return todoListStorage.readTodoList(filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        saveTodoList(todoList, todoListStorage.getTodoListFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        logger.fine(\"Attempting to write Todo list to data file: \" + filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        todoListStorage.saveTodoList(todoList, filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "jonasngs": 34,
      "davidcaiqifan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TodoListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TodoList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public interface TodoListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getTodoListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns TodoList data as a {@link ReadOnlyTodoList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @see #getTodoListFilePath() ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cReadOnlyTodoList\u003e readTodoList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Saves the given {@link ReadOnlyTodoList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param todoList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveTodoList(ReadOnlyTodoList todoList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @see #saveTodoList(ReadOnlyTodoList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContactCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * An UI component that displays information of a {@code Contact}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ContactCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String FXML \u003d \"ContactListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public final Contact contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Label telegram;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ContactCard(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        name.setText(contact.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        email.setText(contact.getEmail().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        telegram.setText(contact.getTelegramUsername().telegramUsername);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contact.getTags().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!(other instanceof ContactCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ContactCard card \u003d (ContactCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                \u0026\u0026 contact.equals(card.contact);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 62,
      "jonasngs": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContactListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ContactListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String FXML \u003d \"ContactListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ContactListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ListView\u003cContact\u003e contactListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ContactListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        contactListView.setItems(contactList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        contactListView.setCellFactory(listView -\u003e new ContactListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    class ContactListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                setGraphic(new ContactCard(contact, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f12-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Click here to copy the link to the User Guide!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ContactListPanel contactListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private TodoListPanel todoListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private VBox moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private VBox contactListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private VBox todoListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private VBox eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //resizeTest();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // Waiting for contact list storage to be implemented."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        contactListPanel \u003d new ContactListPanel(logic.getFilteredContactList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        contactListPanelPlaceholder.getChildren().add(contactListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoListPanel \u003d new TodoListPanel(logic.getFilteredTodoList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoListPanelPlaceholder.getChildren().add(todoListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void resizeTest() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        primaryStage.setHeight(1000);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        primaryStage.setWidth(1000);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ModuleListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 4,
      "MatthiasLHK": 30,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Label zoomLink;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private Label modularCredits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private FlowPane assignments;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        name.setText(module.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        zoomLink.setText(module.getLink().getLink());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        modularCredits.setText(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        module.getGradeTracker().getAssignments().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                .sorted(Comparator.comparing(assignment -\u003e assignment.assignmentName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                .forEach(assignment -\u003e assignments.getChildren().add(new Label(assignment.assignmentName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignments.setHgap(10);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assignments.setVgap(10);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //module.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //        .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //        .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16,
      "murtubak": 8,
      "-": 56,
      "davidcaiqifan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ListView\u003cModule\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private static final String FXML \u003d \"TodoListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates a {@code TaskCard} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        name.setText(task.getNameForUi());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        task.getTagsForUi().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        priority.setText(task.getPriorityForUi());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        date.setText(task.getDateForUi());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        status.setText(task.getStatusForUi());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                \u0026\u0026 task.equals(((TaskCard) other).task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 24,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TodoListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TodoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private static final String FXML \u003d \"TodoListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TodoListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private ListView\u003cTask\u003e todoListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates a {@code TodoListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public TodoListPanel(ObservableList\u003cTask\u003e todoList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoListView.setItems(todoList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        todoListView.setCellFactory(listView -\u003e new TodoListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    class TodoListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 46
    }
  },
  {
    "path": "src/main/resources/view/ContactListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003cLabel fx:id\u003d\"telegram\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$telegram\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 9,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/ContactListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  \u003cListView fx:id\u003d\"contactListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"Cap 5.0 Buddy\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cAnchorPane prefHeight\u003d\"191.0\" prefWidth\u003d\"522.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "               \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"394.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                     \u003cMenuBar style\u003d\"-fx-border-color: #030303;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                       \u003cmenus\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                             \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                             \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                       \u003c/menus\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                     \u003cSplitPane dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"165.0\" prefWidth\u003d\"475.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                       \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                         \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"141.0\" prefWidth\u003d\"151.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                         \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                 \u003cVBox layoutY\u003d\"134.0\" prefHeight\u003d\"152.0\" prefWidth\u003d\"361.3333333333333\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                       \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"25.0\" prefWidth\u003d\"355.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                             \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"9.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                       \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                       \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" prefHeight\u003d\"86.0\" prefWidth\u003d\"355.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                             \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                                       \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                       \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                             \u003cTabPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" stylesheets\u003d\"@TabPanestyle.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                               \u003ctabs\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                 \u003cTab text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003ccontent\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                         \u003cVBox fx:id\u003d\"moduleListPanelPlaceholder\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003c/content\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                 \u003c/Tab\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                 \u003cTab text\u003d\"Contacts\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003ccontent\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                         \u003cVBox fx:id\u003d\"contactListPanelPlaceholder\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003c/content\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                 \u003c/Tab\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                   \u003cTab text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003ccontent\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                                                         \u003cVBox fx:id\u003d\"todoListPanelPlaceholder\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003c/content\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                   \u003c/Tab\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                   \u003cTab text\u003d\"Events\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003ccontent\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                         \u003cVBox fx:id\u003d\"eventListPanelPlaceholder\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                      \u003c/content\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                                   \u003c/Tab\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                               \u003c/tabs\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                             \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                          \u003c/children\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                    \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                       \u003c/items\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                     \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "MatthiasLHK": 66,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindowOld.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 60
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      \u003cLabel fx:id\u003d\"zoomLink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$zoomLink\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         \u003cLabel fx:id\u003d\"modularCredits\" layoutX\u003d\"25.0\" layoutY\u003d\"71.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modularCredits\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"assignments\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 1,
      "murtubak": 1,
      "-": 30,
      "davidcaiqifan": 9
    }
  },
  {
    "path": "src/main/resources/view/TabPanestyle.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    -fx-text-fill: #96b946;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/main/resources/view/TodoListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 40
    }
  },
  {
    "path": "src/main/resources/view/TodoListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    \u003cListView fx:id\u003d\"todoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddModuleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonModuleListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                new JsonModuleListStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonModuleListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                new JsonModuleListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String addCommand \u003d AddModuleCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        //Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact expectedPerson \u003d new ContactBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //  expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static class JsonModuleListIoExceptionThrowingStub extends JsonModuleListStorage {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        private JsonModuleListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 3,
      "murtubak": 2,
      "-": 131,
      "jonasngs": 13,
      "davidcaiqifan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //    model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact validPerson \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 1,
      "-": 29,
      "jonasngs": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyContactList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact validPerson \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact validPerson \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact alice \u003d new ContactBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact bob \u003d new ContactBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void addModule(Module person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void setModuleList(ReadOnlyModuleList newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public boolean hasModule(Module person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void setModule(Module target, Module editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void addContact(Contact person) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void setContactList(ReadOnlyContactList newData) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public ReadOnlyContactList getContactList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public boolean hasContact(Contact person) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void setContact(Contact target, Contact editedPerson) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        public Path getContactListFilePath() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void setTodoList(ReadOnlyTodoList newData) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public ReadOnlyTodoList getTodoList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void updateFilteredTodoList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public ObservableList\u003cTask\u003e getSortedTodoList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void updateSortedTodoList(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        public void commitModuleList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        public void redoModuleList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        public void undoModuleList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        private final Module person;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModelStubWithPerson(Module person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public boolean hasModule(Module person) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return this.person.isSameModule(person);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        final ArrayList\u003cModule\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public boolean hasModule(Module person) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSameModule);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public void addModule(Module person) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ModuleList();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 54,
      "MatthiasLHK": 9,
      "-": 144,
      "jonasngs": 90,
      "davidcaiqifan": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.setAddressBook(new ModuleList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "jonasngs": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ZOOM_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String VALID_MODULENAME_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String VALID_MODULENAME_ES2660 \u003d \"ES2660\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String VALID_ZOOMLINK_CS2103T \u003d \"www.cs2103tzoom.us\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String VALID_ZOOMLINK_ES2660 \u003d \"www.es2660zoom.us\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String NAME_DESC_CS2103T \u003d \" \" + PREFIX_NAME + VALID_MODULENAME_CS2103T;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String ZOOMLINK_DESC_CS2103T \u003d \" \" + PREFIX_ZOOM_LINK + VALID_ZOOMLINK_CS2103T;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String NAME_DESC_ES2660 \u003d \" \" + PREFIX_NAME + VALID_MODULENAME_ES2660;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final String ZOOMLINK_DESC_ES2660 \u003d \" \" + PREFIX_ZOOM_LINK + VALID_ZOOMLINK_ES2660;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //public static final EditCommand.EditModuleDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //public static final EditCommand.EditModuleDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //       .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //       .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ModuleList expectedModuleList \u003d new ModuleList(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(expectedModuleList, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 5,
      "murtubak": 15,
      "-": 90,
      "jonasngs": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //  expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteModuleCommand deleteFirstCommand \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteModuleCommand deleteSecondCommand \u003d new DeleteModuleCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteModuleCommand deleteFirstCommandCopy \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7,
      "-": 72,
      "jonasngs": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact editedPerson \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand.EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(new ModuleList(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // Person editedPerson \u003d personInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand.EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(new ModuleList(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditModuleDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(new ModuleList(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Model expectedModel \u003d new ModelManager(new ModuleList(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ssertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand.EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand.EditModuleDescriptor copyDescriptor \u003d new EditCommand.EditModuleDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "MatthiasLHK": 1,
      "murtubak": 32,
      "-": 90,
      "jonasngs": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand.EditModuleDescriptor descriptorWithSameValues \u003d new EditCommand.EditModuleDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //ssertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "jonasngs": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "jonasngs": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULENAME_CS2103T;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ZOOMLINK_CS2103T;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ZOOMLINK_DESC_CS2103T;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddModuleCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.AddModuleParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private AddModuleParser parser \u003d new AddModuleParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //Contact expectedPerson \u003d new ContactBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withName(VALID_MODULENAME_CS2103T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "                .withZoomLink(VALID_ZOOMLINK_CS2103T).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Command command \u003d parser.parse(NAME_DESC_CS2103T + ZOOMLINK_DESC_CS2103T);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        AddModuleCommand test2 \u003d new AddModuleCommand(expectedModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_CS2103T + ZOOMLINK_DESC_CS2103T, new AddModuleCommand(expectedModule));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact expectedPersonMultipleTags \u003d new ContactBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact expectedPerson \u003d new ContactBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertParseFailure(parser, VALID_NAME_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertParseFailure(parser, VALID_NAME_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, INVALID_NAME_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, INVALID_NAME_DESC + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //       String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 6,
      "MatthiasLHK": 5,
      "murtubak": 42,
      "-": 52,
      "jonasngs": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 113,
      "jonasngs": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteModuleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.DeleteModuleParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteModuleParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private DeleteModuleParser parser \u003d new DeleteModuleParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteModuleCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditModuleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.EditModuleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.parser.modulelistparsers.EditModuleParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class EditModuleParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private EditModuleParser parser \u003d new EditModuleParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //.withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + TAG_DESC_FRIEND + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //.withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //.build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // String userInput \u003d targetIndex.getOneBased();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //.build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 9,
      "MatthiasLHK": 5,
      "murtubak": 53,
      "-": 102,
      "jonasngs": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jonasngs": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ModuleListParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ModuleListParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final ModuleListParser parser \u003d new ModuleListParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteModuleCommand command \u003d (DeleteModuleCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                DeleteModuleCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(new DeleteModuleCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact person \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 6,
      "murtubak": 6,
      "-": 80,
      "jonasngs": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "jonasngs": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "// import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.testutil.ModuleListBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertEquals(new ModuleList(), new ModuleList(modelManager.getModuleList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        userPrefs.setModuleListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        userPrefs.setModuleListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(path, modelManager.getModuleListFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_moduleNotInModuleList_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertFalse(modelManager.hasModule(CS2030));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_moduleInModuleList_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        modelManager.addModule(CS2030);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertTrue(modelManager.hasModule(CS2030));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ModuleList moduleList \u003d new ModuleListBuilder().withModule(CS2030).withModule(CS2101).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList differentModuleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // modelManager \u003d new ModelManager(moduleList, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ModelManager modelManagerCopy \u003d new ModelManager(moduleList, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // different moduleList -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(differentModuleList, userPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // Note : No NameContainsKeywordsPredicate class for Module yet."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        //String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(moduleList, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        differentUserPrefs.setModuleListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(moduleList, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 19,
      "MatthiasLHK": 1,
      "-": 100,
      "jonasngs": 9,
      "davidcaiqifan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ZOOMLINK_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "// import seedu.address.model.module.exceptions.DuplicateModulesException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ModuleListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertEquals(Collections.emptyList(), moduleList.getModuleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e moduleList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void resetData_withValidReadOnlyModuleList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ModuleList newData \u003d getTypicalModuleList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        moduleList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(newData, moduleList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // Two modules with the same name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Module editedCS2030 \u003d new ModuleBuilder(CS2030).withZoomLink(VALID_ZOOMLINK_CS2103T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS2030, editedCS2030);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ModuleListStub newData \u003d new ModuleListStub(newModules);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertThrows(DuplicateModuleException.class, () -\u003e moduleList.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e moduleList.hasModule(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_moduleNotInModuleList_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertFalse(moduleList.hasModule(CS2030));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_moduleInModuleList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        moduleList.addModule(CS2030);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertTrue(moduleList.hasModule(CS2030));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void hasModule_moduleWithSameNameModuleList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        moduleList.addModule(CS2030);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Module editedCS2030 \u003d new ModuleBuilder(CS2030).withZoomLink(VALID_ZOOMLINK_CS2103T)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertTrue(moduleList.hasModule(editedCS2030));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e moduleList.getModuleList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * A stub ReadOnlyModuleList whose modules list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private static class ModuleListStub implements ReadOnlyModuleList {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ModuleListStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 38,
      "-": 58,
      "jonasngs": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setModuleListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // Keywords match email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "jonasngs": 10,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact person \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(ALICE.isSameContact(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertFalse(ALICE.isSameContact(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact aliceCopy \u003d new ContactBuilder(ALICE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "jonasngs": 19,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final UniqueContactList uniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(DuplicateContactException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setContact(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setContact(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(ContactNotFoundException.class, () -\u003e uniquePersonList.setContact(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        uniquePersonList.setContact(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        UniqueContactList expectedUniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        uniquePersonList.setContact(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        UniqueContactList expectedUniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        uniquePersonList.setContact(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        UniqueContactList expectedUniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(DuplicateContactException.class, () -\u003e uniquePersonList.setContact(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(ContactNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        UniqueContactList expectedUniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setContacts((UniqueContactList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        UniqueContactList expectedUniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        uniquePersonList.setContacts(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setContacts((List\u003cContact\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cContact\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        uniquePersonList.setContacts(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        UniqueContactList expectedUniquePersonList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cContact\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertThrows(DuplicateContactException.class, () -\u003e uniquePersonList.setContacts(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 29,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/*import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.person.Name;*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonAdaptedModule person \u003d new JsonAdaptedModule(BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonAdaptedModule person \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                new JsonAdaptedModule(INVALID_NAME, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonAdaptedModule person \u003d new JsonAdaptedModule(null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonAdaptedModule person \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                new JsonAdaptedModule(VALID_NAME, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonAdaptedModule person \u003d new JsonAdaptedModule(VALID_NAME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonAdaptedModule person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                new JsonAdaptedModule(VALID_NAME, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "davidcaiqifan": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonModuleListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonModuleListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new JsonModuleListStorage(Paths.get(filePath)).readModuleList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonModuleListStorage jsonAddressBookStorage \u003d new JsonModuleListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(original, new ModuleList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(original, new ModuleList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(original, new ModuleList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            new JsonModuleListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .saveModuleList(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new ModuleList(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "jonasngs": 21,
      "davidcaiqifan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/*import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.testutil.TypicalPersons;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonSerializableModuleListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonSerializableModuleList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                JsonSerializableModuleList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList moduleListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList typicalPersonsModuleList \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(moduleListFromFile, typicalPersonsModuleList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonSerializableModuleList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                JsonSerializableModuleList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonSerializableModuleList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                JsonSerializableModuleList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        //         dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "jonasngs": 6,
      "davidcaiqifan": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        userPrefs.setModuleListFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /*private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "davidcaiqifan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonModuleListStorage addressBookStorage \u003d new JsonModuleListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertEquals(original, new ModuleList(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "jonasngs": 13,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ContactBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Telegram;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * A utility class to help with building Contact objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ContactBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String DEFAULT_TELEGRAM \u003d \"@alice\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Telegram telegram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        telegram \u003d new Telegram(DEFAULT_TELEGRAM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactBuilder(Contact personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        telegram \u003d personToCopy.getTelegramUsername();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Sets the {@code Name} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Contact} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Sets the {@code Email} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Sets the {@code Telegram} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.telegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Contact build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new Contact(name, email, telegram, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "jonasngs": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.EditModuleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor.setModuleName(module.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor.setZoomLink(module.getLink());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sets the {@code Name} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor.setModuleName(new ModuleName(name));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sets the {@code Email} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleDescriptorBuilder withZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        descriptor.setZoomLink(new ZoomLink(zoomLink));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 50,
      "murtubak": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //public EditPersonDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public EditPersonDescriptorBuilder(Contact person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Sets the {@code Name} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Sets the {@code Email} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditModuleDescriptor}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //return descriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 23,
      "-": 42,
      "jonasngs": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.ZoomLink;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.model.module.grade.GradeTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String DEFAULT_MODULENAME \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final String DEFAULT_ZOOMLINK \u003d \"www.zoom.us\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final double DEFAULT_MODULARCREDITS \u003d 4.0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private ZoomLink zoomLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private ModularCredits modularCredits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private GradeTracker gradeTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates a {@code ModuleBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        moduleName \u003d new ModuleName(DEFAULT_MODULENAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        zoomLink \u003d new ZoomLink(DEFAULT_ZOOMLINK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        modularCredits \u003d new ModularCredits(DEFAULT_MODULARCREDITS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        gradeTracker \u003d new GradeTracker();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        moduleName \u003d moduleToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sets the {@code Name} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.moduleName \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Sets the {@code ZoomLink} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleBuilder withZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.zoomLink \u003d new ZoomLink(zoomLink);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Module(moduleName, zoomLink, modularCredits);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 52,
      "murtubak": 3,
      "davidcaiqifan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * A utility class to help with building ModuleList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " *     {@code ModuleList moduleList \u003d new ModuleList().withModule(CS2103T).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class ModuleListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private ModuleList moduleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleListBuilder(ModuleList moduleList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Adds a new {@code Module} to the {@code ModuleList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public ModuleListBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        moduleList.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ModuleList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 9,
      "-": 19,
      "jonasngs": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import seedu.address.logic.commands.modulelistcommands.EditModuleDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static String getAddCommand(Contact person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static String getPersonDetails(Contact person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        descriptor.getModuleName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        descriptor.getZoomLink().ifPresent(zoomLink -\u003e sb.append(PREFIX_EMAIL).append(zoomLink.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //    Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //    if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //       sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //    } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //        tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 2,
      "murtubak": 15,
      "-": 35,
      "jonasngs": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //  * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //     return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //  * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //     return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //  * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    //     return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "jonasngs": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULENAME_CS2103T;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULENAME_ES2660;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ZOOMLINK_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ZOOMLINK_ES2660;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module CS2030 \u003d new ModuleBuilder().withName(\"CS2030\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module CS2101 \u003d new ModuleBuilder().withName(\"CS2101\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module CS2105 \u003d new ModuleBuilder().withName(\"CS2105\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module CS1101S \u003d new ModuleBuilder().withName(\"CS1101S\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module IS1103 \u003d new ModuleBuilder().withName(\"IS1103\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module CS1231S \u003d new ModuleBuilder().withName(\"CS1231S\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module MA1101R \u003d new ModuleBuilder().withName(\"MA1101R\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(\"www.zoom.us\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    // Manually added - Modules\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module CS2103 \u003d new ModuleBuilder().withName(VALID_MODULENAME_CS2103T)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(VALID_ZOOMLINK_CS2103T).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Module ES2660 \u003d new ModuleBuilder().withName(VALID_MODULENAME_ES2660)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        .withZoomLink(VALID_ZOOMLINK_ES2660).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns an {@code ModuleList} with all the typical modules."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static ModuleList getTypicalModuleList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2030, CS2101, CS2105, CS1101S, IS1103));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact ALICE \u003d new ContactBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact BENSON \u003d new ContactBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact CARL \u003d new ContactBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact DANIEL \u003d new ContactBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact ELLE \u003d new ContactBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact FIONA \u003d new ContactBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact GEORGE \u003d new ContactBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact HOON \u003d new ContactBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact IDA \u003d new ContactBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact AMY \u003d new ContactBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Contact BOB \u003d new ContactBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static ModuleList getTypicalAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ModuleList ab \u003d new ModuleList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (Contact person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // ab.addPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static List\u003cContact\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "-": 41,
      "jonasngs": 28
    }
  }
]
